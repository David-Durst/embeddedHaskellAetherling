// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Loop_2_g8j_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Loop_2_g8j (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Loop_2_g8j_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Loop_2_g8j_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_4_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack,
        p_mul_stencil_stream_V_value_V_dout,
        p_mul_stencil_stream_V_value_V_empty_n,
        p_mul_stencil_stream_V_value_V_read,
        p_delayed_input_stencil_stream_V_value_V_dout,
        p_delayed_input_stencil_stream_V_value_V_empty_n,
        p_delayed_input_stencil_stream_V_value_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;
input  [31:0] p_mul_stencil_stream_V_value_V_dout;
input   p_mul_stencil_stream_V_value_V_empty_n;
output   p_mul_stencil_stream_V_value_V_read;
input  [31:0] p_delayed_input_stencil_stream_V_value_V_dout;
input   p_delayed_input_stencil_stream_V_value_V_empty_n;
output   p_delayed_input_stencil_stream_V_value_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;
reg p_mul_stencil_stream_V_value_V_read;
reg p_delayed_input_stencil_stream_V_value_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_302;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_302;
reg    hw_output_V_last_V_blk_n;
reg    p_mul_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    p_delayed_input_stencil_stream_V_value_V_blk_n;
reg   [20:0] indvar_flatten_reg_98;
reg   [10:0] p_hw_output_y_scan_1_reg_109;
reg   [10:0] p_hw_output_x_scan_2_reg_121;
wire   [0:0] exitcond_flatten_fu_132_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_302;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_302;
wire   [20:0] indvar_flatten_next_fu_138_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond7_fu_144_p2;
reg   [0:0] exitcond7_reg_311;
reg   [0:0] ap_reg_pp0_iter1_exitcond7_reg_311;
reg   [0:0] ap_reg_pp0_iter2_exitcond7_reg_311;
wire   [10:0] p_hw_output_x_scan_s_fu_150_p3;
reg   [10:0] p_hw_output_x_scan_s_reg_317;
wire   [10:0] p_hw_output_x_scan_1_fu_158_p2;
wire   [10:0] p_hw_output_y_scan_2_fu_164_p2;
reg   [10:0] p_hw_output_y_scan_2_reg_327;
wire   [0:0] tmp_1_fu_170_p2;
reg   [0:0] tmp_1_reg_332;
reg   [0:0] ap_reg_pp0_iter2_tmp_1_reg_332;
wire   [10:0] p_hw_output_y_scan_s_fu_176_p3;
reg   [10:0] p_hw_output_y_scan_s_reg_337;
reg   [31:0] tmp_value_V_5_reg_342;
reg   [31:0] ap_reg_pp0_iter2_tmp_value_V_5_reg_342;
reg   [31:0] ap_reg_pp0_iter3_tmp_value_V_5_reg_342;
reg   [27:0] p_s_reg_349;
wire   [0:0] tmp_s_fu_193_p2;
reg   [0:0] tmp_s_reg_354;
reg   [0:0] ap_reg_pp0_iter2_tmp_s_reg_354;
wire   [0:0] tmp_3_mid1_fu_198_p2;
reg   [0:0] tmp_3_mid1_reg_359;
wire   [31:0] p_439_fu_211_p2;
reg   [31:0] p_439_reg_364;
reg   [31:0] ap_reg_pp0_iter3_p_439_reg_364;
reg   [27:0] tmp_11_reg_370;
reg   [27:0] tmp_12_reg_375;
wire   [0:0] p_442_fu_241_p2;
reg   [0:0] p_442_reg_380;
wire   [0:0] p_444_fu_246_p2;
reg   [0:0] p_444_reg_385;
wire   [0:0] tmp_last_V_fu_251_p2;
reg   [0:0] tmp_last_V_reg_390;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] p_hw_output_y_scan_1_phi_fu_113_p4;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [31:0] p_438_fu_203_p1;
wire   [31:0] p_443_fu_206_p2;
wire   [0:0] tmp_3_mid2_fu_236_p3;
wire   [1:0] tmp_13_fu_265_p4;
wire   [1:0] tmp_14_fu_274_p3;
wire   [29:0] tmp_fu_256_p4;
wire   [29:0] tmp_5_cast_fu_281_p1;
wire   [29:0] p_447_fu_285_p3;
wire   [31:0] p_447_cast_fu_292_p1;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_132_p2))) begin
        indvar_flatten_reg_98 <= indvar_flatten_next_fu_138_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_98 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_132_p2))) begin
        p_hw_output_x_scan_2_reg_121 <= p_hw_output_x_scan_1_fu_158_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_121 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_302) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_reg_109 <= p_hw_output_y_scan_s_reg_337;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_109 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond7_reg_311 <= exitcond7_reg_311;
        ap_reg_pp0_iter1_exitcond_flatten_reg_302 <= exitcond_flatten_reg_302;
        exitcond_flatten_reg_302 <= exitcond_flatten_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond7_reg_311 <= ap_reg_pp0_iter1_exitcond7_reg_311;
        ap_reg_pp0_iter2_exitcond_flatten_reg_302 <= ap_reg_pp0_iter1_exitcond_flatten_reg_302;
        ap_reg_pp0_iter2_tmp_1_reg_332 <= tmp_1_reg_332;
        ap_reg_pp0_iter2_tmp_s_reg_354 <= tmp_s_reg_354;
        ap_reg_pp0_iter2_tmp_value_V_5_reg_342 <= tmp_value_V_5_reg_342;
        ap_reg_pp0_iter3_exitcond_flatten_reg_302 <= ap_reg_pp0_iter2_exitcond_flatten_reg_302;
        ap_reg_pp0_iter3_p_439_reg_364 <= p_439_reg_364;
        ap_reg_pp0_iter3_tmp_value_V_5_reg_342 <= ap_reg_pp0_iter2_tmp_value_V_5_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_132_p2))) begin
        exitcond7_reg_311 <= exitcond7_fu_144_p2;
        p_hw_output_x_scan_s_reg_317 <= p_hw_output_x_scan_s_fu_150_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_302))) begin
        p_439_reg_364 <= p_439_fu_211_p2;
        tmp_11_reg_370 <= {{p_439_fu_211_p2[31:4]}};
        tmp_12_reg_375 <= {{p_443_fu_206_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_302))) begin
        p_442_reg_380 <= p_442_fu_241_p2;
        p_444_reg_385 <= p_444_fu_246_p2;
        tmp_last_V_reg_390 <= tmp_last_V_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_output_y_scan_2_reg_327 <= p_hw_output_y_scan_2_fu_164_p2;
        p_s_reg_349 <= {{p_mul_stencil_stream_V_value_V_dout[31:4]}};
        tmp_s_reg_354 <= tmp_s_fu_193_p2;
        tmp_value_V_5_reg_342 <= p_delayed_input_stencil_stream_V_value_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_output_y_scan_s_reg_337 <= p_hw_output_y_scan_s_fu_176_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond7_reg_311))) begin
        tmp_1_reg_332 <= tmp_1_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_302) & (ap_reg_pp0_iter1_exitcond7_reg_311 == 1'd1))) begin
        tmp_3_mid1_reg_359 <= tmp_3_mid1_fu_198_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_132_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_302 == 1'd0))) begin
        p_delayed_input_stencil_stream_V_value_V_blk_n = p_delayed_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_delayed_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_delayed_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_delayed_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_302) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_phi_fu_113_p4 = p_hw_output_y_scan_s_reg_337;
    end else begin
        p_hw_output_y_scan_1_phi_fu_113_p4 = p_hw_output_y_scan_1_reg_109;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_302 == 1'd0))) begin
        p_mul_stencil_stream_V_value_V_blk_n = p_mul_stencil_stream_V_value_V_empty_n;
    end else begin
        p_mul_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_302 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_mul_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_mul_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_302 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((ap_reg_pp0_iter3_exitcond_flatten_reg_302 == 1'd0) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond7_fu_144_p2 = ((p_hw_output_x_scan_2_reg_121 == 11'd1918) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_132_p2 = ((indvar_flatten_reg_98 == 21'd2067604) ? 1'b1 : 1'b0);

assign hw_output_V_last_V = tmp_last_V_reg_390;

assign hw_output_V_value_V = (p_447_cast_fu_292_p1 + ap_reg_pp0_iter3_tmp_value_V_5_reg_342);

assign indvar_flatten_next_fu_138_p2 = (indvar_flatten_reg_98 + 21'd1);

assign p_438_fu_203_p1 = p_s_reg_349;

assign p_439_fu_211_p2 = (tmp_value_V_5_reg_342 - p_438_fu_203_p1);

assign p_442_fu_241_p2 = ((tmp_11_reg_370 != 28'd0) ? 1'b1 : 1'b0);

assign p_443_fu_206_p2 = (p_438_fu_203_p1 - tmp_value_V_5_reg_342);

assign p_444_fu_246_p2 = ((tmp_12_reg_375 != 28'd0) ? 1'b1 : 1'b0);

assign p_447_cast_fu_292_p1 = p_447_fu_285_p3;

assign p_447_fu_285_p3 = ((p_442_reg_380[0:0] === 1'b1) ? tmp_fu_256_p4 : tmp_5_cast_fu_281_p1);

assign p_hw_output_x_scan_1_fu_158_p2 = (p_hw_output_x_scan_s_fu_150_p3 + 11'd1);

assign p_hw_output_x_scan_s_fu_150_p3 = ((exitcond7_fu_144_p2[0:0] === 1'b1) ? 11'd0 : p_hw_output_x_scan_2_reg_121);

assign p_hw_output_y_scan_2_fu_164_p2 = (p_hw_output_y_scan_1_phi_fu_113_p4 + 11'd1);

assign p_hw_output_y_scan_s_fu_176_p3 = ((exitcond7_reg_311[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_164_p2 : p_hw_output_y_scan_1_phi_fu_113_p4);

assign tmp_13_fu_265_p4 = {{ap_reg_pp0_iter3_p_439_reg_364[3:2]}};

assign tmp_14_fu_274_p3 = ((p_444_reg_385[0:0] === 1'b1) ? tmp_13_fu_265_p4 : 2'd0);

assign tmp_1_fu_170_p2 = ((p_hw_output_y_scan_1_phi_fu_113_p4 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_3_mid1_fu_198_p2 = ((p_hw_output_y_scan_2_reg_327 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_3_mid2_fu_236_p3 = ((ap_reg_pp0_iter2_exitcond7_reg_311[0:0] === 1'b1) ? tmp_3_mid1_reg_359 : ap_reg_pp0_iter2_tmp_1_reg_332);

assign tmp_5_cast_fu_281_p1 = tmp_14_fu_274_p3;

assign tmp_fu_256_p4 = {{ap_reg_pp0_iter3_p_439_reg_364[31:2]}};

assign tmp_last_V_fu_251_p2 = (ap_reg_pp0_iter2_tmp_s_reg_354 & tmp_3_mid2_fu_236_p3);

assign tmp_s_fu_193_p2 = ((p_hw_output_x_scan_s_reg_317 == 11'd1917) ? 1'b1 : 1'b0);

endmodule //Loop_4_proc


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Loop_3_hbi_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Loop_3_hbi (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Loop_3_hbi_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Loop_3_hbi_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_target,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.600000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.332667,HLS_SYN_LAT=2077921,HLS_SYN_TPT=2077922,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3278,HLS_SYN_LUT=2048}" *)

module top (
        hw_input_V_value_V,
        hw_input_V_last_V,
        hw_output_V_value_V,
        hw_output_V_last_V,
        ap_clk,
        ap_rst,
        hw_input_V_value_V_ap_vld,
        hw_input_V_value_V_ap_ack,
        hw_input_V_last_V_ap_vld,
        hw_input_V_last_V_ap_ack,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle
);


input  [31:0] hw_input_V_value_V;
input  [0:0] hw_input_V_last_V;
output  [31:0] hw_output_V_value_V;
output  [0:0] hw_output_V_last_V;
input   ap_clk;
input   ap_rst;
input   hw_input_V_value_V_ap_vld;
output   hw_input_V_value_V_ap_ack;
input   hw_input_V_last_V_ap_vld;
output   hw_input_V_last_V_ap_ack;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;

wire    linebuffer_1_U0_ap_start;
wire    linebuffer_1_U0_start_full_n;
wire    linebuffer_1_U0_ap_ready;
wire    linebuffer_1_U0_start_out;
wire    linebuffer_1_U0_start_write;
wire   [287:0] linebuffer_1_U0_out_stream_V_value_V_din;
wire    linebuffer_1_U0_out_stream_V_value_V_write;
wire    linebuffer_1_U0_in_axi_stream_V_value_V_ap_ack;
wire    linebuffer_1_U0_in_axi_stream_V_last_V_ap_ack;
wire    linebuffer_1_U0_ap_done;
wire    linebuffer_1_U0_ap_idle;
wire    linebuffer_1_U0_ap_continue;
wire    Loop_1_proc_U0_ap_start;
wire    Loop_1_proc_U0_start_full_n;
wire    Loop_1_proc_U0_ap_ready;
wire    Loop_1_proc_U0_ap_done;
wire    Loop_1_proc_U0_ap_continue;
wire    Loop_1_proc_U0_ap_idle;
wire    Loop_1_proc_U0_start_out;
wire    Loop_1_proc_U0_start_write;
wire    Loop_1_proc_U0_p_hw_input_stencil_stream_V_value_V_read;
wire   [287:0] Loop_1_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_din;
wire    Loop_1_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_write;
wire   [287:0] Loop_1_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_din;
wire    Loop_1_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_write;
wire    Loop_2_proc_U0_ap_start;
wire    Loop_2_proc_U0_start_full_n;
wire    Loop_2_proc_U0_ap_ready;
wire    Loop_2_proc_U0_ap_done;
wire    Loop_2_proc_U0_ap_continue;
wire    Loop_2_proc_U0_ap_idle;
wire    Loop_2_proc_U0_start_out;
wire    Loop_2_proc_U0_start_write;
wire    Loop_2_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_read;
wire   [31:0] Loop_2_proc_U0_p_delayed_input_stencil_stream_V_value_V_din;
wire    Loop_2_proc_U0_p_delayed_input_stencil_stream_V_value_V_write;
wire    Loop_3_proc_U0_ap_start;
wire    Loop_3_proc_U0_ap_done;
wire    Loop_3_proc_U0_ap_continue;
wire    Loop_3_proc_U0_ap_idle;
wire    Loop_3_proc_U0_ap_ready;
wire    Loop_3_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_read;
wire   [31:0] Loop_3_proc_U0_p_mul_stencil_stream_V_value_V_din;
wire    Loop_3_proc_U0_p_mul_stencil_stream_V_value_V_write;
wire    Loop_4_proc_U0_ap_start;
wire    Loop_4_proc_U0_ap_done;
wire    Loop_4_proc_U0_ap_continue;
wire    Loop_4_proc_U0_ap_idle;
wire    Loop_4_proc_U0_ap_ready;
wire   [31:0] Loop_4_proc_U0_hw_output_V_value_V;
wire    Loop_4_proc_U0_hw_output_V_value_V_ap_vld;
wire   [0:0] Loop_4_proc_U0_hw_output_V_last_V;
wire    Loop_4_proc_U0_hw_output_V_last_V_ap_vld;
wire    Loop_4_proc_U0_p_mul_stencil_stream_V_value_V_read;
wire    Loop_4_proc_U0_p_delayed_input_stencil_stream_V_value_V_read;
wire    ap_sync_continue;
wire    p_hw_input_stencil_st_full_n;
wire   [287:0] p_hw_input_stencil_st_dout;
wire    p_hw_input_stencil_st_empty_n;
wire    p_hw_input_stencil_st_3_full_n;
wire   [287:0] p_hw_input_stencil_st_3_dout;
wire    p_hw_input_stencil_st_3_empty_n;
wire    p_hw_input_stencil_st_4_full_n;
wire   [287:0] p_hw_input_stencil_st_4_dout;
wire    p_hw_input_stencil_st_4_empty_n;
wire    p_delayed_input_stenc_full_n;
wire   [31:0] p_delayed_input_stenc_dout;
wire    p_delayed_input_stenc_empty_n;
wire    p_mul_stencil_stream_s_full_n;
wire   [31:0] p_mul_stencil_stream_s_dout;
wire    p_mul_stencil_stream_s_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_Loop_1_proc_U0_din;
wire    start_for_Loop_1_proc_U0_full_n;
wire   [0:0] start_for_Loop_1_proc_U0_dout;
wire    start_for_Loop_1_proc_U0_empty_n;
wire   [0:0] start_for_Loop_2_proc_U0_din;
wire    start_for_Loop_2_proc_U0_full_n;
wire   [0:0] start_for_Loop_2_proc_U0_dout;
wire    start_for_Loop_2_proc_U0_empty_n;
wire   [0:0] start_for_Loop_3_proc_U0_din;
wire    start_for_Loop_3_proc_U0_full_n;
wire   [0:0] start_for_Loop_3_proc_U0_dout;
wire    start_for_Loop_3_proc_U0_empty_n;
wire   [0:0] start_for_Loop_4_proc_U0_din;
wire    start_for_Loop_4_proc_U0_full_n;
wire   [0:0] start_for_Loop_4_proc_U0_dout;
wire    start_for_Loop_4_proc_U0_empty_n;
wire    Loop_3_proc_U0_start_full_n;
wire    Loop_3_proc_U0_start_write;
wire    Loop_4_proc_U0_start_full_n;
wire    Loop_4_proc_U0_start_write;

linebuffer_1 linebuffer_1_U0(
    .ap_start(linebuffer_1_U0_ap_start),
    .start_full_n(linebuffer_1_U0_start_full_n),
    .ap_ready(linebuffer_1_U0_ap_ready),
    .start_out(linebuffer_1_U0_start_out),
    .start_write(linebuffer_1_U0_start_write),
    .in_axi_stream_V_value_V(hw_input_V_value_V),
    .in_axi_stream_V_last_V(hw_input_V_last_V),
    .out_stream_V_value_V_din(linebuffer_1_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(p_hw_input_stencil_st_full_n),
    .out_stream_V_value_V_write(linebuffer_1_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_axi_stream_V_value_V_ap_vld(hw_input_V_value_V_ap_vld),
    .in_axi_stream_V_value_V_ap_ack(linebuffer_1_U0_in_axi_stream_V_value_V_ap_ack),
    .in_axi_stream_V_last_V_ap_vld(hw_input_V_last_V_ap_vld),
    .in_axi_stream_V_last_V_ap_ack(linebuffer_1_U0_in_axi_stream_V_last_V_ap_ack),
    .ap_done(linebuffer_1_U0_ap_done),
    .ap_idle(linebuffer_1_U0_ap_idle),
    .ap_continue(linebuffer_1_U0_ap_continue)
);

Loop_1_proc Loop_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_1_proc_U0_ap_start),
    .start_full_n(Loop_1_proc_U0_start_full_n),
    .ap_ready(Loop_1_proc_U0_ap_ready),
    .ap_done(Loop_1_proc_U0_ap_done),
    .ap_continue(Loop_1_proc_U0_ap_continue),
    .ap_idle(Loop_1_proc_U0_ap_idle),
    .start_out(Loop_1_proc_U0_start_out),
    .start_write(Loop_1_proc_U0_start_write),
    .p_hw_input_stencil_stream_V_value_V_dout(p_hw_input_stencil_st_dout),
    .p_hw_input_stencil_stream_V_value_V_empty_n(p_hw_input_stencil_st_empty_n),
    .p_hw_input_stencil_stream_V_value_V_read(Loop_1_proc_U0_p_hw_input_stencil_stream_V_value_V_read),
    .p_hw_input_stencil_stream_to_delayed_input_V_value_V_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_din),
    .p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n(p_hw_input_stencil_st_3_full_n),
    .p_hw_input_stencil_stream_to_delayed_input_V_value_V_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_write),
    .p_hw_input_stencil_stream_to_mul_V_value_V_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_din),
    .p_hw_input_stencil_stream_to_mul_V_value_V_full_n(p_hw_input_stencil_st_4_full_n),
    .p_hw_input_stencil_stream_to_mul_V_value_V_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_write)
);

Loop_2_proc Loop_2_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_2_proc_U0_ap_start),
    .start_full_n(Loop_2_proc_U0_start_full_n),
    .ap_ready(Loop_2_proc_U0_ap_ready),
    .ap_done(Loop_2_proc_U0_ap_done),
    .ap_continue(Loop_2_proc_U0_ap_continue),
    .ap_idle(Loop_2_proc_U0_ap_idle),
    .start_out(Loop_2_proc_U0_start_out),
    .start_write(Loop_2_proc_U0_start_write),
    .p_hw_input_stencil_stream_to_delayed_input_V_value_V_dout(p_hw_input_stencil_st_3_dout),
    .p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n(p_hw_input_stencil_st_3_empty_n),
    .p_hw_input_stencil_stream_to_delayed_input_V_value_V_read(Loop_2_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_read),
    .p_delayed_input_stencil_stream_V_value_V_din(Loop_2_proc_U0_p_delayed_input_stencil_stream_V_value_V_din),
    .p_delayed_input_stencil_stream_V_value_V_full_n(p_delayed_input_stenc_full_n),
    .p_delayed_input_stencil_stream_V_value_V_write(Loop_2_proc_U0_p_delayed_input_stencil_stream_V_value_V_write)
);

Loop_3_proc Loop_3_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_3_proc_U0_ap_start),
    .ap_done(Loop_3_proc_U0_ap_done),
    .ap_continue(Loop_3_proc_U0_ap_continue),
    .ap_idle(Loop_3_proc_U0_ap_idle),
    .ap_ready(Loop_3_proc_U0_ap_ready),
    .p_hw_input_stencil_stream_to_mul_V_value_V_dout(p_hw_input_stencil_st_4_dout),
    .p_hw_input_stencil_stream_to_mul_V_value_V_empty_n(p_hw_input_stencil_st_4_empty_n),
    .p_hw_input_stencil_stream_to_mul_V_value_V_read(Loop_3_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_read),
    .p_mul_stencil_stream_V_value_V_din(Loop_3_proc_U0_p_mul_stencil_stream_V_value_V_din),
    .p_mul_stencil_stream_V_value_V_full_n(p_mul_stencil_stream_s_full_n),
    .p_mul_stencil_stream_V_value_V_write(Loop_3_proc_U0_p_mul_stencil_stream_V_value_V_write)
);

Loop_4_proc Loop_4_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_4_proc_U0_ap_start),
    .ap_done(Loop_4_proc_U0_ap_done),
    .ap_continue(Loop_4_proc_U0_ap_continue),
    .ap_idle(Loop_4_proc_U0_ap_idle),
    .ap_ready(Loop_4_proc_U0_ap_ready),
    .hw_output_V_value_V(Loop_4_proc_U0_hw_output_V_value_V),
    .hw_output_V_value_V_ap_vld(Loop_4_proc_U0_hw_output_V_value_V_ap_vld),
    .hw_output_V_value_V_ap_ack(hw_output_V_value_V_ap_ack),
    .hw_output_V_last_V(Loop_4_proc_U0_hw_output_V_last_V),
    .hw_output_V_last_V_ap_vld(Loop_4_proc_U0_hw_output_V_last_V_ap_vld),
    .hw_output_V_last_V_ap_ack(hw_output_V_last_V_ap_ack),
    .p_mul_stencil_stream_V_value_V_dout(p_mul_stencil_stream_s_dout),
    .p_mul_stencil_stream_V_value_V_empty_n(p_mul_stencil_stream_s_empty_n),
    .p_mul_stencil_stream_V_value_V_read(Loop_4_proc_U0_p_mul_stencil_stream_V_value_V_read),
    .p_delayed_input_stencil_stream_V_value_V_dout(p_delayed_input_stenc_dout),
    .p_delayed_input_stencil_stream_V_value_V_empty_n(p_delayed_input_stenc_empty_n),
    .p_delayed_input_stencil_stream_V_value_V_read(Loop_4_proc_U0_p_delayed_input_stencil_stream_V_value_V_read)
);

fifo_w288_d1_S p_hw_input_stencil_st_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(linebuffer_1_U0_out_stream_V_value_V_din),
    .if_full_n(p_hw_input_stencil_st_full_n),
    .if_write(linebuffer_1_U0_out_stream_V_value_V_write),
    .if_dout(p_hw_input_stencil_st_dout),
    .if_empty_n(p_hw_input_stencil_st_empty_n),
    .if_read(Loop_1_proc_U0_p_hw_input_stencil_stream_V_value_V_read)
);

fifo_w288_d1_S p_hw_input_stencil_st_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_din),
    .if_full_n(p_hw_input_stencil_st_3_full_n),
    .if_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_write),
    .if_dout(p_hw_input_stencil_st_3_dout),
    .if_empty_n(p_hw_input_stencil_st_3_empty_n),
    .if_read(Loop_2_proc_U0_p_hw_input_stencil_stream_to_delayed_input_V_value_V_read)
);

fifo_w288_d1_S p_hw_input_stencil_st_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_din),
    .if_full_n(p_hw_input_stencil_st_4_full_n),
    .if_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_write),
    .if_dout(p_hw_input_stencil_st_4_dout),
    .if_empty_n(p_hw_input_stencil_st_4_empty_n),
    .if_read(Loop_3_proc_U0_p_hw_input_stencil_stream_to_mul_V_value_V_read)
);

fifo_w32_d1_S_x p_delayed_input_stenc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_2_proc_U0_p_delayed_input_stencil_stream_V_value_V_din),
    .if_full_n(p_delayed_input_stenc_full_n),
    .if_write(Loop_2_proc_U0_p_delayed_input_stencil_stream_V_value_V_write),
    .if_dout(p_delayed_input_stenc_dout),
    .if_empty_n(p_delayed_input_stenc_empty_n),
    .if_read(Loop_4_proc_U0_p_delayed_input_stencil_stream_V_value_V_read)
);

fifo_w32_d1_S_x p_mul_stencil_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_3_proc_U0_p_mul_stencil_stream_V_value_V_din),
    .if_full_n(p_mul_stencil_stream_s_full_n),
    .if_write(Loop_3_proc_U0_p_mul_stencil_stream_V_value_V_write),
    .if_dout(p_mul_stencil_stream_s_dout),
    .if_empty_n(p_mul_stencil_stream_s_empty_n),
    .if_read(Loop_4_proc_U0_p_mul_stencil_stream_V_value_V_read)
);

start_for_Loop_1_fYi start_for_Loop_1_fYi_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_1_proc_U0_din),
    .if_full_n(start_for_Loop_1_proc_U0_full_n),
    .if_write(linebuffer_1_U0_start_write),
    .if_dout(start_for_Loop_1_proc_U0_dout),
    .if_empty_n(start_for_Loop_1_proc_U0_empty_n),
    .if_read(Loop_1_proc_U0_ap_ready)
);

start_for_Loop_2_g8j start_for_Loop_2_g8j_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_2_proc_U0_din),
    .if_full_n(start_for_Loop_2_proc_U0_full_n),
    .if_write(Loop_1_proc_U0_start_write),
    .if_dout(start_for_Loop_2_proc_U0_dout),
    .if_empty_n(start_for_Loop_2_proc_U0_empty_n),
    .if_read(Loop_2_proc_U0_ap_ready)
);

start_for_Loop_3_hbi start_for_Loop_3_hbi_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_3_proc_U0_din),
    .if_full_n(start_for_Loop_3_proc_U0_full_n),
    .if_write(Loop_1_proc_U0_start_write),
    .if_dout(start_for_Loop_3_proc_U0_dout),
    .if_empty_n(start_for_Loop_3_proc_U0_empty_n),
    .if_read(Loop_3_proc_U0_ap_ready)
);

start_for_Loop_4_ibs start_for_Loop_4_ibs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_4_proc_U0_din),
    .if_full_n(start_for_Loop_4_proc_U0_full_n),
    .if_write(Loop_2_proc_U0_start_write),
    .if_dout(start_for_Loop_4_proc_U0_dout),
    .if_empty_n(start_for_Loop_4_proc_U0_empty_n),
    .if_read(Loop_4_proc_U0_ap_ready)
);

assign Loop_1_proc_U0_ap_continue = 1'b1;

assign Loop_1_proc_U0_ap_start = start_for_Loop_1_proc_U0_empty_n;

assign Loop_1_proc_U0_start_full_n = (1'b0 | start_for_Loop_2_proc_U0_full_n | start_for_Loop_3_proc_U0_full_n);

assign Loop_2_proc_U0_ap_continue = 1'b1;

assign Loop_2_proc_U0_ap_start = start_for_Loop_2_proc_U0_empty_n;

assign Loop_2_proc_U0_start_full_n = (1'b0 | start_for_Loop_4_proc_U0_full_n);

assign Loop_3_proc_U0_ap_continue = 1'b1;

assign Loop_3_proc_U0_ap_start = start_for_Loop_3_proc_U0_empty_n;

assign Loop_3_proc_U0_start_full_n = 1'b0;

assign Loop_3_proc_U0_start_write = 1'b0;

assign Loop_4_proc_U0_ap_continue = 1'b1;

assign Loop_4_proc_U0_ap_start = start_for_Loop_4_proc_U0_empty_n;

assign Loop_4_proc_U0_start_full_n = 1'b0;

assign Loop_4_proc_U0_start_write = 1'b0;

assign ap_done = Loop_4_proc_U0_ap_done;

assign ap_idle = (linebuffer_1_U0_ap_idle & Loop_1_proc_U0_ap_idle & Loop_2_proc_U0_ap_idle & Loop_3_proc_U0_ap_idle & Loop_4_proc_U0_ap_idle);

assign ap_ready = linebuffer_1_U0_ap_ready;

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_4_proc_U0_ap_done;

assign ap_sync_ready = linebuffer_1_U0_ap_ready;

assign hw_input_V_last_V_ap_ack = linebuffer_1_U0_in_axi_stream_V_last_V_ap_ack;

assign hw_input_V_value_V_ap_ack = linebuffer_1_U0_in_axi_stream_V_value_V_ap_ack;

assign hw_output_V_last_V = Loop_4_proc_U0_hw_output_V_last_V;

assign hw_output_V_last_V_ap_vld = Loop_4_proc_U0_hw_output_V_last_V_ap_vld;

assign hw_output_V_value_V = Loop_4_proc_U0_hw_output_V_value_V;

assign hw_output_V_value_V_ap_vld = Loop_4_proc_U0_hw_output_V_value_V_ap_vld;

assign linebuffer_1_U0_ap_continue = 1'b1;

assign linebuffer_1_U0_ap_start = ap_start;

assign linebuffer_1_U0_start_full_n = (start_for_Loop_1_proc_U0_full_n | 1'b0);

assign start_for_Loop_1_proc_U0_din = 1'b1;

assign start_for_Loop_2_proc_U0_din = 1'b1;

assign start_for_Loop_3_proc_U0_din = 1'b1;

assign start_for_Loop_4_proc_U0_din = 1'b1;

endmodule //hls_target


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_dout,
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n,
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_read,
        p_delayed_input_stencil_stream_V_value_V_din,
        p_delayed_input_stencil_stream_V_value_V_full_n,
        p_delayed_input_stencil_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [287:0] p_hw_input_stencil_stream_to_delayed_input_V_value_V_dout;
input   p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n;
output   p_hw_input_stencil_stream_to_delayed_input_V_value_V_read;
output  [31:0] p_delayed_input_stencil_stream_V_value_V_din;
input   p_delayed_input_stencil_stream_V_value_V_full_n;
output   p_delayed_input_stencil_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg p_hw_input_stencil_stream_to_delayed_input_V_value_V_read;
reg p_delayed_input_stencil_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    p_hw_input_stencil_stream_to_delayed_input_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_99;
reg    p_delayed_input_stencil_stream_V_value_V_blk_n;
reg   [20:0] indvar_flatten_reg_65;
wire   [0:0] exitcond_flatten_fu_76_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [20:0] indvar_flatten_next_fu_82_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_flag00001001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_76_p2))) begin
        indvar_flatten_reg_65 <= indvar_flatten_next_fu_82_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_65 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_99 <= exitcond_flatten_fu_76_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_76_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_99 == 1'd0))) begin
        p_delayed_input_stencil_stream_V_value_V_blk_n = p_delayed_input_stencil_stream_V_value_V_full_n;
    end else begin
        p_delayed_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_99 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_delayed_input_stencil_stream_V_value_V_write = 1'b1;
    end else begin
        p_delayed_input_stencil_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_99 == 1'd0))) begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_blk_n = p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_99 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_76_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_76_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n)) | ((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n)) | ((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n)) | ((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_empty_n)) | ((exitcond_flatten_reg_99 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_76_p2 = ((indvar_flatten_reg_65 == 21'd2067604) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_82_p2 = (indvar_flatten_reg_65 + 21'd1);

assign p_delayed_input_stencil_stream_V_value_V_din = {{p_hw_input_stencil_stream_to_delayed_input_V_value_V_dout[287:256]}};

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //Loop_2_proc


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call (
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [287:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    call_Loop_LB2D_buf_p_U0_ap_start;
wire    call_Loop_LB2D_buf_p_U0_start_full_n;
wire    call_Loop_LB2D_buf_p_U0_ap_ready;
wire    call_Loop_LB2D_buf_p_U0_ap_done;
wire    call_Loop_LB2D_buf_p_U0_ap_continue;
wire    call_Loop_LB2D_buf_p_U0_ap_idle;
wire    call_Loop_LB2D_buf_p_U0_start_out;
wire    call_Loop_LB2D_buf_p_U0_start_write;
wire    call_Loop_LB2D_buf_p_U0_in_stream_V_value_V_read;
wire   [95:0] call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_din;
wire    call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_write;
wire    call_Loop_LB2D_shift_U0_ap_start;
wire    call_Loop_LB2D_shift_U0_ap_done;
wire    call_Loop_LB2D_shift_U0_ap_continue;
wire    call_Loop_LB2D_shift_U0_ap_idle;
wire    call_Loop_LB2D_shift_U0_ap_ready;
wire    call_Loop_LB2D_shift_U0_slice_stream_V_value_V_read;
wire   [287:0] call_Loop_LB2D_shift_U0_out_stream_V_value_V_din;
wire    call_Loop_LB2D_shift_U0_out_stream_V_value_V_write;
wire    ap_sync_continue;
wire    slice_stream_V_value_full_n;
wire   [95:0] slice_stream_V_value_dout;
wire    slice_stream_V_value_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_call_Loop_LB2D_shift_U0_din;
wire    start_for_call_Loop_LB2D_shift_U0_full_n;
wire   [0:0] start_for_call_Loop_LB2D_shift_U0_dout;
wire    start_for_call_Loop_LB2D_shift_U0_empty_n;
wire    call_Loop_LB2D_shift_U0_start_full_n;
wire    call_Loop_LB2D_shift_U0_start_write;

call_Loop_LB2D_buf_p call_Loop_LB2D_buf_p_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_Loop_LB2D_buf_p_U0_ap_start),
    .start_full_n(call_Loop_LB2D_buf_p_U0_start_full_n),
    .ap_ready(call_Loop_LB2D_buf_p_U0_ap_ready),
    .ap_done(call_Loop_LB2D_buf_p_U0_ap_done),
    .ap_continue(call_Loop_LB2D_buf_p_U0_ap_continue),
    .ap_idle(call_Loop_LB2D_buf_p_U0_ap_idle),
    .start_out(call_Loop_LB2D_buf_p_U0_start_out),
    .start_write(call_Loop_LB2D_buf_p_U0_start_write),
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(call_Loop_LB2D_buf_p_U0_in_stream_V_value_V_read),
    .slice_stream_V_value_V_din(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_din),
    .slice_stream_V_value_V_full_n(slice_stream_V_value_full_n),
    .slice_stream_V_value_V_write(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_write)
);

call_Loop_LB2D_shift call_Loop_LB2D_shift_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_Loop_LB2D_shift_U0_ap_start),
    .ap_done(call_Loop_LB2D_shift_U0_ap_done),
    .ap_continue(call_Loop_LB2D_shift_U0_ap_continue),
    .ap_idle(call_Loop_LB2D_shift_U0_ap_idle),
    .ap_ready(call_Loop_LB2D_shift_U0_ap_ready),
    .slice_stream_V_value_V_dout(slice_stream_V_value_dout),
    .slice_stream_V_value_V_empty_n(slice_stream_V_value_empty_n),
    .slice_stream_V_value_V_read(call_Loop_LB2D_shift_U0_slice_stream_V_value_V_read),
    .out_stream_V_value_V_din(call_Loop_LB2D_shift_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(call_Loop_LB2D_shift_U0_out_stream_V_value_V_write)
);

fifo_w96_d1_S slice_stream_V_value_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_din),
    .if_full_n(slice_stream_V_value_full_n),
    .if_write(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_write),
    .if_dout(slice_stream_V_value_dout),
    .if_empty_n(slice_stream_V_value_empty_n),
    .if_read(call_Loop_LB2D_shift_U0_slice_stream_V_value_V_read)
);

start_for_call_LodEe start_for_call_LodEe_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_call_Loop_LB2D_shift_U0_din),
    .if_full_n(start_for_call_Loop_LB2D_shift_U0_full_n),
    .if_write(call_Loop_LB2D_buf_p_U0_start_write),
    .if_dout(start_for_call_Loop_LB2D_shift_U0_dout),
    .if_empty_n(start_for_call_Loop_LB2D_shift_U0_empty_n),
    .if_read(call_Loop_LB2D_shift_U0_ap_ready)
);

assign ap_done = call_Loop_LB2D_shift_U0_ap_done;

assign ap_idle = (call_Loop_LB2D_buf_p_U0_ap_idle & call_Loop_LB2D_shift_U0_ap_idle);

assign ap_ready = call_Loop_LB2D_buf_p_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = call_Loop_LB2D_shift_U0_ap_done;

assign ap_sync_ready = call_Loop_LB2D_buf_p_U0_ap_ready;

assign call_Loop_LB2D_buf_p_U0_ap_continue = 1'b1;

assign call_Loop_LB2D_buf_p_U0_ap_start = ap_start;

assign call_Loop_LB2D_buf_p_U0_start_full_n = (1'b0 | start_for_call_Loop_LB2D_shift_U0_full_n);

assign call_Loop_LB2D_shift_U0_ap_continue = ap_continue;

assign call_Loop_LB2D_shift_U0_ap_start = start_for_call_Loop_LB2D_shift_U0_empty_n;

assign call_Loop_LB2D_shift_U0_start_full_n = 1'b0;

assign call_Loop_LB2D_shift_U0_start_write = 1'b0;

assign in_stream_V_value_V_read = call_Loop_LB2D_buf_p_U0_in_stream_V_value_V_read;

assign out_stream_V_value_V_din = call_Loop_LB2D_shift_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = call_Loop_LB2D_shift_U0_out_stream_V_value_V_write;

assign start_for_call_Loop_LB2D_shift_U0_din = 1'b1;

endmodule //call


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module call_Loop_LB2D_bubkb_ram (addr0, ce0, q0, addr1, ce1, d1, we1,  clk);

parameter DWIDTH = 32;
parameter AWIDTH = 11;
parameter MEM_SIZE = 1920;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) 
    begin
            q0 <= ram[addr0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) 
    begin
        if (we1) 
        begin 
            ram[addr1] <= d1; 
        end 
    end
end


endmodule


`timescale 1 ns / 1 ps
module call_Loop_LB2D_bubkb(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    we1,
    d1);

parameter DataWidth = 32'd32;
parameter AddressRange = 32'd1920;
parameter AddressWidth = 32'd11;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;



call_Loop_LB2D_bubkb_ram call_Loop_LB2D_bubkb_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .d1( d1 ),
    .we1( we1 ));

endmodule



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Loop_4_ibs_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Loop_4_ibs (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Loop_4_ibs_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Loop_4_ibs_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Loop_1_fYi_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Loop_1_fYi (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Loop_1_fYi_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Loop_1_fYi_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w32_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd32;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w32_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd32;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w32_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w32_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call_Loop_LB2D_shift (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        slice_stream_V_value_V_dout,
        slice_stream_V_value_V_empty_n,
        slice_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [95:0] slice_stream_V_value_V_dout;
input   slice_stream_V_value_V_empty_n;
output   slice_stream_V_value_V_read;
output  [287:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg slice_stream_V_value_V_read;
reg out_stream_V_value_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    slice_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg    out_stream_V_value_V_blk_n;
reg   [0:0] icmp_reg_300;
reg   [10:0] i_0_i_i_reg_104;
wire   [0:0] tmp_1_fu_115_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] n1_1_fu_121_p2;
reg   [10:0] n1_1_reg_286;
wire   [0:0] tmp_3_fu_127_p2;
reg   [0:0] tmp_3_reg_291;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [10:0] i_fu_133_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_fu_149_p2;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [10:0] n1_reg_93;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00001001;
reg   [95:0] buffer_1_value_V_fu_72;
reg   [95:0] buffer_0_value_V_fu_76;
wire   [9:0] tmp_fu_139_p4;
wire   [31:0] p_Result_5_2_2_fu_223_p4;
wire   [31:0] p_Result_5_2_1_fu_213_p4;
wire   [31:0] p_Result_5_2_fu_203_p4;
wire   [31:0] p_Result_5_1_2_fu_193_p4;
wire   [31:0] p_Result_5_1_1_fu_183_p4;
wire   [31:0] p_Result_5_1_fu_173_p4;
wire   [31:0] tmp_5_fu_169_p1;
wire   [31:0] tmp_4_fu_165_p1;
wire   [31:0] tmp_2_fu_161_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_115_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_115_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_115_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_3_fu_127_p2))) begin
        i_0_i_i_reg_104 <= i_fu_133_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_115_p2))) begin
        i_0_i_i_reg_104 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        n1_reg_93 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n1_reg_93 <= n1_1_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_3_reg_291))) begin
        buffer_0_value_V_fu_76 <= buffer_1_value_V_fu_72;
        buffer_1_value_V_fu_72 <= slice_stream_V_value_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_3_fu_127_p2))) begin
        icmp_reg_300 <= icmp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n1_1_reg_286 <= n1_1_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_3_reg_291 <= tmp_3_fu_127_p2;
    end
end

always @ (*) begin
    if ((tmp_3_fu_127_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_115_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_115_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (icmp_reg_300 == 1'd0))) begin
        out_stream_V_value_V_blk_n = out_stream_V_value_V_full_n;
    end else begin
        out_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (icmp_reg_300 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_stream_V_value_V_write = 1'b1;
    end else begin
        out_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        slice_stream_V_value_V_blk_n = slice_stream_V_value_V_empty_n;
    end else begin
        slice_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        slice_stream_V_value_V_read = 1'b1;
    end else begin
        slice_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_3_fu_127_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_3_fu_127_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_133_p2 = (i_0_i_i_reg_104 + 11'd1);

assign icmp_fu_149_p2 = ((tmp_fu_139_p4 == 10'd0) ? 1'b1 : 1'b0);

assign n1_1_fu_121_p2 = (n1_reg_93 + 11'd1);

assign out_stream_V_value_V_din = {{{{{{{{{p_Result_5_2_2_fu_223_p4}, {p_Result_5_2_1_fu_213_p4}}, {p_Result_5_2_fu_203_p4}}, {p_Result_5_1_2_fu_193_p4}}, {p_Result_5_1_1_fu_183_p4}}, {p_Result_5_1_fu_173_p4}}, {tmp_5_fu_169_p1}}, {tmp_4_fu_165_p1}}, {tmp_2_fu_161_p1}};

assign p_Result_5_1_1_fu_183_p4 = {{buffer_1_value_V_fu_72[63:32]}};

assign p_Result_5_1_2_fu_193_p4 = {{slice_stream_V_value_V_dout[63:32]}};

assign p_Result_5_1_fu_173_p4 = {{buffer_0_value_V_fu_76[63:32]}};

assign p_Result_5_2_1_fu_213_p4 = {{buffer_1_value_V_fu_72[95:64]}};

assign p_Result_5_2_2_fu_223_p4 = {{slice_stream_V_value_V_dout[95:64]}};

assign p_Result_5_2_fu_203_p4 = {{buffer_0_value_V_fu_76[95:64]}};

assign tmp_1_fu_115_p2 = ((n1_reg_93 == 11'd1078) ? 1'b1 : 1'b0);

assign tmp_2_fu_161_p1 = buffer_0_value_V_fu_76[31:0];

assign tmp_3_fu_127_p2 = ((i_0_i_i_reg_104 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_4_fu_165_p1 = buffer_1_value_V_fu_72[31:0];

assign tmp_5_fu_169_p1 = slice_stream_V_value_V_dout[31:0];

assign tmp_fu_139_p4 = {{i_0_i_i_reg_104[10:1]}};

endmodule //call_Loop_LB2D_shift


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_3_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_to_mul_V_value_V_dout,
        p_hw_input_stencil_stream_to_mul_V_value_V_empty_n,
        p_hw_input_stencil_stream_to_mul_V_value_V_read,
        p_mul_stencil_stream_V_value_V_din,
        p_mul_stencil_stream_V_value_V_full_n,
        p_mul_stencil_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [287:0] p_hw_input_stencil_stream_to_mul_V_value_V_dout;
input   p_hw_input_stencil_stream_to_mul_V_value_V_empty_n;
output   p_hw_input_stencil_stream_to_mul_V_value_V_read;
output  [31:0] p_mul_stencil_stream_V_value_V_din;
input   p_mul_stencil_stream_V_value_V_full_n;
output   p_mul_stencil_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_hw_input_stencil_stream_to_mul_V_value_V_read;
reg p_mul_stencil_stream_V_value_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_to_mul_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_287;
reg    p_mul_stencil_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_287;
reg   [20:0] indvar_flatten_reg_105;
wire   [0:0] exitcond_flatten_fu_116_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_287;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_287;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_287;
wire   [20:0] indvar_flatten_next_fu_122_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] p_381_fu_128_p1;
reg   [31:0] p_381_reg_296;
reg   [31:0] p_393_reg_301;
reg   [31:0] ap_reg_pp0_iter2_p_393_reg_301;
reg   [31:0] p_417_reg_306;
reg   [31:0] p_429_reg_311;
reg   [30:0] tmp_7_reg_316;
reg   [30:0] tmp_8_reg_321;
reg   [30:0] ap_reg_pp0_iter2_tmp_8_reg_321;
reg   [29:0] tmp_9_reg_326;
reg   [30:0] tmp_s_reg_331;
reg   [30:0] tmp_3_reg_336;
wire   [31:0] tmp1_fu_240_p2;
reg   [31:0] tmp1_reg_341;
wire   [31:0] tmp4_fu_245_p2;
reg   [31:0] tmp4_reg_346;
reg   [31:0] ap_reg_pp0_iter3_tmp4_reg_346;
wire   [31:0] tmp5_fu_256_p2;
reg   [31:0] tmp5_reg_351;
reg   [31:0] ap_reg_pp0_iter3_tmp5_reg_351;
wire   [31:0] tmp_fu_273_p2;
reg   [31:0] tmp_reg_356;
wire   [31:0] p_433_fu_282_p2;
reg   [31:0] p_433_reg_361;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_flag00001001;
wire   [31:0] p_390_fu_212_p3;
wire   [31:0] p_414_fu_226_p3;
wire   [31:0] p_408_fu_219_p3;
wire   [31:0] p_426_fu_233_p3;
wire   [31:0] tmp6_fu_251_p2;
wire   [31:0] p_402_fu_261_p3;
wire   [31:0] tmp2_fu_268_p2;
wire   [31:0] tmp3_fu_278_p2;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_116_p2))) begin
        indvar_flatten_reg_105 <= indvar_flatten_next_fu_122_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_105 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_287 <= exitcond_flatten_reg_287;
        exitcond_flatten_reg_287 <= exitcond_flatten_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_287 <= ap_reg_pp0_iter1_exitcond_flatten_reg_287;
        ap_reg_pp0_iter2_p_393_reg_301 <= p_393_reg_301;
        ap_reg_pp0_iter2_tmp_8_reg_321 <= tmp_8_reg_321;
        ap_reg_pp0_iter3_exitcond_flatten_reg_287 <= ap_reg_pp0_iter2_exitcond_flatten_reg_287;
        ap_reg_pp0_iter3_tmp4_reg_346[31 : 1] <= tmp4_reg_346[31 : 1];
        ap_reg_pp0_iter3_tmp5_reg_351 <= tmp5_reg_351;
        ap_reg_pp0_iter4_exitcond_flatten_reg_287 <= ap_reg_pp0_iter3_exitcond_flatten_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_287 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_381_reg_296 <= p_381_fu_128_p1;
        p_393_reg_301 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[95:64]}};
        p_417_reg_306 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[223:192]}};
        p_429_reg_311 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[287:256]}};
        tmp_3_reg_336 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[254:224]}};
        tmp_7_reg_316 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[62:32]}};
        tmp_8_reg_321 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[126:96]}};
        tmp_9_reg_326 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[157:128]}};
        tmp_s_reg_331 <= {{p_hw_input_stencil_stream_to_mul_V_value_V_dout[190:160]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_287))) begin
        p_433_reg_361 <= p_433_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_287))) begin
        tmp1_reg_341 <= tmp1_fu_240_p2;
        tmp4_reg_346[31 : 1] <= tmp4_fu_245_p2[31 : 1];
        tmp5_reg_351 <= tmp5_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_287))) begin
        tmp_reg_356 <= tmp_fu_273_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_116_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_287 == 1'd0))) begin
        p_hw_input_stencil_stream_to_mul_V_value_V_blk_n = p_hw_input_stencil_stream_to_mul_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_to_mul_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_mul_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_mul_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287))) begin
        p_mul_stencil_stream_V_value_V_blk_n = p_mul_stencil_stream_V_value_V_full_n;
    end else begin
        p_mul_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_mul_stencil_stream_V_value_V_write = 1'b1;
    end else begin
        p_mul_stencil_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_116_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter5) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_116_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_116_p2 = ((indvar_flatten_reg_105 == 21'd2067604) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_122_p2 = (indvar_flatten_reg_105 + 21'd1);

assign p_381_fu_128_p1 = p_hw_input_stencil_stream_to_mul_V_value_V_dout[31:0];

assign p_390_fu_212_p3 = {{tmp_7_reg_316}, {1'd0}};

assign p_402_fu_261_p3 = {{ap_reg_pp0_iter2_tmp_8_reg_321}, {1'd0}};

assign p_408_fu_219_p3 = {{tmp_9_reg_326}, {2'd0}};

assign p_414_fu_226_p3 = {{tmp_s_reg_331}, {1'd0}};

assign p_426_fu_233_p3 = {{tmp_3_reg_336}, {1'd0}};

assign p_433_fu_282_p2 = (tmp_reg_356 + tmp3_fu_278_p2);

assign p_mul_stencil_stream_V_value_V_din = p_433_reg_361;

assign tmp1_fu_240_p2 = (p_381_reg_296 + p_390_fu_212_p3);

assign tmp2_fu_268_p2 = (p_402_fu_261_p3 + ap_reg_pp0_iter2_p_393_reg_301);

assign tmp3_fu_278_p2 = (ap_reg_pp0_iter3_tmp4_reg_346 + ap_reg_pp0_iter3_tmp5_reg_351);

assign tmp4_fu_245_p2 = (p_414_fu_226_p3 + p_408_fu_219_p3);

assign tmp5_fu_256_p2 = (p_417_reg_306 + tmp6_fu_251_p2);

assign tmp6_fu_251_p2 = (p_429_reg_311 + p_426_fu_233_p3);

assign tmp_fu_273_p2 = (tmp1_reg_341 + tmp2_fu_268_p2);

always @ (posedge ap_clk) begin
    tmp4_reg_346[0] <= 1'b0;
    ap_reg_pp0_iter3_tmp4_reg_346[0] <= 1'b0;
end

endmodule //Loop_3_proc


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_linebufeOg_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_linebufeOg (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_linebufeOg_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_linebufeOg_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w288_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd288;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w288_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd288;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w288_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w288_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call_Loop_LB2D_buf_p (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        slice_stream_V_value_V_din,
        slice_stream_V_value_V_full_n,
        slice_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [95:0] slice_stream_V_value_V_din;
input   slice_stream_V_value_V_full_n;
output   slice_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg in_stream_V_value_V_read;
reg slice_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    in_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] tmp_2_reg_290;
reg    slice_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_reg_286;
reg   [63:0] write_idx_1_1_reg_146;
reg   [10:0] col_reg_157;
wire   [0:0] tmp_fu_168_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] row_1_fu_174_p2;
reg   [10:0] row_1_reg_281;
wire   [0:0] icmp_fu_190_p2;
wire   [0:0] tmp_2_fu_196_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
wire   [10:0] col_1_fu_202_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp1_fu_224_p2;
reg   [0:0] icmp1_reg_299;
reg   [10:0] buffer_0_value_V_ad_reg_304;
reg   [10:0] ap_reg_pp0_iter1_buffer_0_value_V_ad_reg_304;
reg   [10:0] buffer_1_value_V_ad_reg_310;
reg   [10:0] ap_reg_pp0_iter1_buffer_1_value_V_ad_reg_310;
wire   [63:0] p_write_idx_1_1_fu_236_p3;
reg   [31:0] tmp_value_V_2_reg_321;
wire   [31:0] buffer_0_value_V_q0;
reg   [31:0] buffer_0_value_V_lo_reg_328;
wire   [31:0] buffer_1_value_V_q0;
reg   [31:0] buffer_1_value_V_lo_reg_334;
wire   [0:0] tmp_9_fu_243_p1;
reg   [0:0] tmp_9_reg_340;
wire   [0:0] tmp_10_fu_247_p1;
reg   [0:0] tmp_10_reg_346;
wire   [63:0] write_idx_1_2_fu_271_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
wire   [10:0] buffer_0_value_V_address0;
reg    buffer_0_value_V_ce0;
wire   [10:0] buffer_0_value_V_address1;
reg    buffer_0_value_V_ce1;
reg    buffer_0_value_V_we1;
wire   [10:0] buffer_1_value_V_address0;
reg    buffer_1_value_V_ce0;
reg    buffer_1_value_V_ce1;
reg    buffer_1_value_V_we1;
reg   [63:0] write_idx_1_reg_123;
reg    ap_block_state1;
reg   [10:0] row_reg_135;
reg   [63:0] write_idx_1_1_phi_fu_149_p4;
wire   [63:0] col_cast_fu_208_p1;
reg    ap_block_pp0_stage0_flag00001001;
wire   [9:0] tmp_6_fu_180_p4;
wire   [62:0] tmp_8_fu_214_p4;
wire   [63:0] write_idx_1_3_fu_230_p2;
wire   [31:0] p_Val2_2_1_phi_fu_256_p3;
wire   [31:0] p_Val2_2_0_phi_fu_251_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_55;
reg    ap_enable_state5_pp0_iter2_stage0;
reg    ap_enable_operation_35;
reg    ap_enable_state3_pp0_iter0_stage0;
reg    ap_enable_operation_42;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

call_Loop_LB2D_bubkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
buffer_0_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_0_value_V_address0),
    .ce0(buffer_0_value_V_ce0),
    .q0(buffer_0_value_V_q0),
    .address1(buffer_0_value_V_address1),
    .ce1(buffer_0_value_V_ce1),
    .we1(buffer_0_value_V_we1),
    .d1(tmp_value_V_2_reg_321)
);

call_Loop_LB2D_bubkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
buffer_1_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_1_value_V_address0),
    .ce0(buffer_1_value_V_ce0),
    .q0(buffer_1_value_V_q0),
    .address1(ap_reg_pp0_iter1_buffer_1_value_V_ad_reg_310),
    .ce1(buffer_1_value_V_ce1),
    .we1(buffer_1_value_V_we1),
    .d1(tmp_value_V_2_reg_321)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_168_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_168_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_168_p2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_2_fu_196_p2))) begin
        col_reg_157 <= col_1_fu_202_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_168_p2))) begin
        col_reg_157 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_reg_135 <= row_1_reg_281;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        row_reg_135 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_290 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        write_idx_1_1_reg_146 <= p_write_idx_1_1_fu_236_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_168_p2))) begin
        write_idx_1_1_reg_146 <= write_idx_1_reg_123;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        write_idx_1_reg_123 <= write_idx_1_2_fu_271_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        write_idx_1_reg_123 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_buffer_0_value_V_ad_reg_304 <= buffer_0_value_V_ad_reg_304;
        ap_reg_pp0_iter1_buffer_1_value_V_ad_reg_310 <= buffer_1_value_V_ad_reg_310;
        tmp_10_reg_346 <= tmp_10_fu_247_p1;
        tmp_2_reg_290 <= tmp_2_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_2_fu_196_p2))) begin
        buffer_0_value_V_ad_reg_304 <= col_cast_fu_208_p1;
        buffer_1_value_V_ad_reg_310 <= col_cast_fu_208_p1;
        icmp1_reg_299 <= icmp1_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_290 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buffer_0_value_V_lo_reg_328 <= buffer_0_value_V_q0;
        buffer_1_value_V_lo_reg_334 <= buffer_1_value_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_168_p2))) begin
        icmp_reg_286 <= icmp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_1_reg_281 <= row_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == icmp_reg_286) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_9_reg_340 <= tmp_9_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_290 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_value_V_2_reg_321 <= in_stream_V_value_V_dout;
    end
end

always @ (*) begin
    if ((tmp_2_fu_196_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_168_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buffer_0_value_V_ce0 = 1'b1;
    end else begin
        buffer_0_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buffer_0_value_V_ce1 = 1'b1;
    end else begin
        buffer_0_value_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_10_reg_346))) begin
        buffer_0_value_V_we1 = 1'b1;
    end else begin
        buffer_0_value_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buffer_1_value_V_ce0 = 1'b1;
    end else begin
        buffer_1_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buffer_1_value_V_ce1 = 1'b1;
    end else begin
        buffer_1_value_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (tmp_10_reg_346 == 1'd1))) begin
        buffer_1_value_V_we1 = 1'b1;
    end else begin
        buffer_1_value_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_2_reg_290 == 1'd0))) begin
        in_stream_V_value_V_blk_n = in_stream_V_value_V_empty_n;
    end else begin
        in_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_290 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_stream_V_value_V_read = 1'b1;
    end else begin
        in_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_168_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == icmp_reg_286))) begin
        slice_stream_V_value_V_blk_n = slice_stream_V_value_V_full_n;
    end else begin
        slice_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == icmp_reg_286) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        slice_stream_V_value_V_write = 1'b1;
    end else begin
        slice_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_2_reg_290 == 1'd0))) begin
        write_idx_1_1_phi_fu_149_p4 = p_write_idx_1_1_fu_236_p3;
    end else begin
        write_idx_1_1_phi_fu_149_p4 = write_idx_1_1_reg_146;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_168_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_2_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_2_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = (1'b1 == ap_block_pp0_stage0_flag00011011);
end

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_290 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == icmp_reg_286) & (1'b0 == slice_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_290 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == icmp_reg_286) & (1'b0 == slice_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_290 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == icmp_reg_286) & (1'b0 == slice_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_2_reg_290 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((1'd0 == icmp_reg_286) & (1'b0 == slice_stream_V_value_V_full_n));
end

always @ (*) begin
    ap_enable_operation_35 = (1'd0 == tmp_2_fu_196_p2);
end

always @ (*) begin
    ap_enable_operation_42 = (tmp_2_reg_290 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_55 = (1'd0 == tmp_10_reg_346);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage0 = ((ap_CS_fsm_pp0_stage0 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_CS_fsm_pp0_stage0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_CS_fsm_pp0_stage0 == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign buffer_0_value_V_address0 = col_cast_fu_208_p1;

assign buffer_0_value_V_address1 = ap_reg_pp0_iter1_buffer_0_value_V_ad_reg_304;

assign buffer_1_value_V_address0 = col_cast_fu_208_p1;

assign col_1_fu_202_p2 = (col_reg_157 + 11'd1);

assign col_cast_fu_208_p1 = col_reg_157;

assign icmp1_fu_224_p2 = ((tmp_8_fu_214_p4 != 63'd0) ? 1'b1 : 1'b0);

assign icmp_fu_190_p2 = ((tmp_6_fu_180_p4 == 10'd0) ? 1'b1 : 1'b0);

assign p_Val2_2_0_phi_fu_251_p3 = ((tmp_9_reg_340[0:0] === 1'b1) ? buffer_1_value_V_lo_reg_334 : buffer_0_value_V_lo_reg_328);

assign p_Val2_2_1_phi_fu_256_p3 = ((tmp_9_reg_340[0:0] === 1'b1) ? buffer_0_value_V_lo_reg_328 : buffer_1_value_V_lo_reg_334);

assign p_write_idx_1_1_fu_236_p3 = ((icmp1_reg_299[0:0] === 1'b1) ? write_idx_1_3_fu_230_p2 : write_idx_1_1_reg_146);

assign row_1_fu_174_p2 = (row_reg_135 + 11'd1);

assign slice_stream_V_value_V_din = {{{tmp_value_V_2_reg_321}, {p_Val2_2_1_phi_fu_256_p3}}, {p_Val2_2_0_phi_fu_251_p3}};

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp_10_fu_247_p1 = p_write_idx_1_1_fu_236_p3[0:0];

assign tmp_2_fu_196_p2 = ((col_reg_157 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_6_fu_180_p4 = {{row_reg_135[10:1]}};

assign tmp_8_fu_214_p4 = {{write_idx_1_1_phi_fu_149_p4[63:1]}};

assign tmp_9_fu_243_p1 = p_write_idx_1_1_fu_236_p3[0:0];

assign tmp_fu_168_p2 = ((row_reg_135 == 11'd1080) ? 1'b1 : 1'b0);

assign write_idx_1_2_fu_271_p2 = (write_idx_1_1_reg_146 + 64'd1);

assign write_idx_1_3_fu_230_p2 = ($signed(write_idx_1_1_reg_146) + $signed(64'd18446744073709551614));

endmodule //call_Loop_LB2D_buf_p


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_1 (
        ap_start,
        start_full_n,
        ap_ready,
        start_out,
        start_write,
        in_axi_stream_V_value_V,
        in_axi_stream_V_last_V,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        in_axi_stream_V_value_V_ap_vld,
        in_axi_stream_V_value_V_ap_ack,
        in_axi_stream_V_last_V_ap_vld,
        in_axi_stream_V_last_V_ap_ack,
        ap_done,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_axi_stream_V_value_V;
input  [0:0] in_axi_stream_V_last_V;
output  [287:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
input   in_axi_stream_V_value_V_ap_vld;
output   in_axi_stream_V_value_V_ap_ack;
input   in_axi_stream_V_last_V_ap_vld;
output   in_axi_stream_V_last_V_ap_ack;
output   ap_done;
output   ap_idle;
input   ap_continue;

reg    real_start;
reg    real_start_status_reg;
wire    internal_ap_ready;
reg    start_once_reg;
reg    start_control_reg;
wire    linebuffer_Loop_1_pr_U0_ap_start;
wire    linebuffer_Loop_1_pr_U0_start_full_n;
wire    linebuffer_Loop_1_pr_U0_ap_ready;
wire    linebuffer_Loop_1_pr_U0_ap_done;
wire    linebuffer_Loop_1_pr_U0_ap_continue;
wire    linebuffer_Loop_1_pr_U0_ap_idle;
wire    linebuffer_Loop_1_pr_U0_start_out;
wire    linebuffer_Loop_1_pr_U0_start_write;
wire    linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack;
wire    linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack;
wire   [31:0] linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din;
wire    linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write;
wire    linebuffer_U0_in_stream_V_value_V_read;
wire   [287:0] linebuffer_U0_out_stream_V_value_V_din;
wire    linebuffer_U0_out_stream_V_value_V_write;
wire    linebuffer_U0_ap_done;
wire    linebuffer_U0_ap_start;
wire    linebuffer_U0_ap_ready;
wire    linebuffer_U0_ap_idle;
wire    linebuffer_U0_ap_continue;
wire    ap_sync_continue;
wire    in_stream_V_value_V_full_n;
wire   [31:0] in_stream_V_value_V_dout;
wire    in_stream_V_value_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_linebuffer_U0_din;
wire    start_for_linebuffer_U0_full_n;
wire   [0:0] start_for_linebuffer_U0_dout;
wire    start_for_linebuffer_U0_empty_n;
wire    linebuffer_U0_start_full_n;
wire    linebuffer_U0_start_write;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
end

linebuffer_Loop_1_pr linebuffer_Loop_1_pr_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(linebuffer_Loop_1_pr_U0_ap_start),
    .start_full_n(linebuffer_Loop_1_pr_U0_start_full_n),
    .ap_ready(linebuffer_Loop_1_pr_U0_ap_ready),
    .ap_done(linebuffer_Loop_1_pr_U0_ap_done),
    .ap_continue(linebuffer_Loop_1_pr_U0_ap_continue),
    .ap_idle(linebuffer_Loop_1_pr_U0_ap_idle),
    .start_out(linebuffer_Loop_1_pr_U0_start_out),
    .start_write(linebuffer_Loop_1_pr_U0_start_write),
    .in_axi_stream_V_value_V(in_axi_stream_V_value_V),
    .in_axi_stream_V_value_V_ap_vld(in_axi_stream_V_value_V_ap_vld),
    .in_axi_stream_V_value_V_ap_ack(linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack),
    .in_axi_stream_V_last_V(in_axi_stream_V_last_V),
    .in_axi_stream_V_last_V_ap_vld(in_axi_stream_V_last_V_ap_vld),
    .in_axi_stream_V_last_V_ap_ack(linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack),
    .in_stream_V_value_V_din(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din),
    .in_stream_V_value_V_full_n(in_stream_V_value_V_full_n),
    .in_stream_V_value_V_write(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write)
);

linebuffer linebuffer_U0(
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(linebuffer_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(linebuffer_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(linebuffer_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(linebuffer_U0_ap_done),
    .ap_start(linebuffer_U0_ap_start),
    .ap_ready(linebuffer_U0_ap_ready),
    .ap_idle(linebuffer_U0_ap_idle),
    .ap_continue(linebuffer_U0_ap_continue)
);

fifo_w32_d1_S in_stream_V_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din),
    .if_full_n(in_stream_V_value_V_full_n),
    .if_write(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write),
    .if_dout(in_stream_V_value_V_dout),
    .if_empty_n(in_stream_V_value_V_empty_n),
    .if_read(linebuffer_U0_in_stream_V_value_V_read)
);

start_for_linebufeOg start_for_linebufeOg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_linebuffer_U0_din),
    .if_full_n(start_for_linebuffer_U0_full_n),
    .if_write(linebuffer_Loop_1_pr_U0_start_write),
    .if_dout(start_for_linebuffer_U0_dout),
    .if_empty_n(start_for_linebuffer_U0_empty_n),
    .if_read(linebuffer_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((start_full_n == 1'b0) & (internal_ap_ready == 1'b1))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & ((internal_ap_ready == 1'b1) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((real_start == 1'b1)) begin
            start_once_reg <= 1'b1;
        end else if ((ap_start == 1'b0)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((real_start_status_reg == 1'b1)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

assign ap_done = linebuffer_U0_ap_done;

assign ap_idle = (linebuffer_Loop_1_pr_U0_ap_idle & linebuffer_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = linebuffer_U0_ap_done;

assign ap_sync_ready = linebuffer_Loop_1_pr_U0_ap_ready;

assign in_axi_stream_V_last_V_ap_ack = linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack;

assign in_axi_stream_V_value_V_ap_ack = linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack;

assign internal_ap_ready = ap_sync_ready;

assign linebuffer_Loop_1_pr_U0_ap_continue = 1'b1;

assign linebuffer_Loop_1_pr_U0_ap_start = real_start;

assign linebuffer_Loop_1_pr_U0_start_full_n = (1'b0 | start_for_linebuffer_U0_full_n);

assign linebuffer_U0_ap_continue = ap_continue;

assign linebuffer_U0_ap_start = start_for_linebuffer_U0_empty_n;

assign linebuffer_U0_start_full_n = 1'b0;

assign linebuffer_U0_start_write = 1'b0;

assign out_stream_V_value_V_din = linebuffer_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = linebuffer_U0_out_stream_V_value_V_write;

assign start_for_linebuffer_U0_din = 1'b1;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //linebuffer_1


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_din,
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n,
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_write,
        p_hw_input_stencil_stream_to_mul_V_value_V_din,
        p_hw_input_stencil_stream_to_mul_V_value_V_full_n,
        p_hw_input_stencil_stream_to_mul_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [287:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [287:0] p_hw_input_stencil_stream_to_delayed_input_V_value_V_din;
input   p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n;
output   p_hw_input_stencil_stream_to_delayed_input_V_value_V_write;
output  [287:0] p_hw_input_stencil_stream_to_mul_V_value_V_din;
input   p_hw_input_stencil_stream_to_mul_V_value_V_full_n;
output   p_hw_input_stencil_stream_to_mul_V_value_V_write;

reg ap_done;
reg ap_idle;
reg p_hw_input_stencil_stream_V_value_V_read;
reg p_hw_input_stencil_stream_to_delayed_input_V_value_V_write;
reg p_hw_input_stencil_stream_to_mul_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_93;
reg    p_hw_input_stencil_stream_to_delayed_input_V_value_V_blk_n;
reg    p_hw_input_stencil_stream_to_mul_V_value_V_blk_n;
reg   [20:0] indvar_flatten_reg_70;
wire   [0:0] exitcond_flatten_fu_81_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [20:0] indvar_flatten_next_fu_87_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_flag00001001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_81_p2))) begin
        indvar_flatten_reg_70 <= indvar_flatten_next_fu_87_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_70 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_93 <= exitcond_flatten_fu_81_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_81_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_93 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_93 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_93 == 1'd0))) begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_blk_n = p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n;
    end else begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_93 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_write = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_delayed_input_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_93 == 1'd0))) begin
        p_hw_input_stencil_stream_to_mul_V_value_V_blk_n = p_hw_input_stencil_stream_to_mul_V_value_V_full_n;
    end else begin
        p_hw_input_stencil_stream_to_mul_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_93 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_mul_V_value_V_write = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_mul_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_81_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_81_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_delayed_input_V_value_V_full_n)) | ((exitcond_flatten_reg_93 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_mul_V_value_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_81_p2 = ((indvar_flatten_reg_70 == 21'd2067604) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_87_p2 = (indvar_flatten_reg_70 + 21'd1);

assign p_hw_input_stencil_stream_to_delayed_input_V_value_V_din = p_hw_input_stencil_stream_V_value_V_dout;

assign p_hw_input_stencil_stream_to_mul_V_value_V_din = p_hw_input_stencil_stream_V_value_V_dout;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //Loop_1_proc


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer (
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [287:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    call_U0_in_stream_V_value_V_read;
wire   [287:0] call_U0_out_stream_V_value_V_din;
wire    call_U0_out_stream_V_value_V_write;
wire    call_U0_ap_done;
wire    call_U0_ap_start;
wire    call_U0_ap_ready;
wire    call_U0_ap_idle;
wire    call_U0_ap_continue;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    call_U0_start_full_n;
wire    call_U0_start_write;

call call_U0(
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(call_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(call_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(call_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(call_U0_ap_done),
    .ap_start(call_U0_ap_start),
    .ap_ready(call_U0_ap_ready),
    .ap_idle(call_U0_ap_idle),
    .ap_continue(call_U0_ap_continue)
);

assign ap_done = call_U0_ap_done;

assign ap_idle = call_U0_ap_idle;

assign ap_ready = call_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = call_U0_ap_done;

assign ap_sync_ready = call_U0_ap_ready;

assign call_U0_ap_continue = ap_continue;

assign call_U0_ap_start = ap_start;

assign call_U0_start_full_n = 1'b0;

assign call_U0_start_write = 1'b0;

assign in_stream_V_value_V_read = call_U0_in_stream_V_value_V_read;

assign out_stream_V_value_V_din = call_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = call_U0_out_stream_V_value_V_write;

endmodule //linebuffer


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_Loop_1_pr (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        in_axi_stream_V_value_V,
        in_axi_stream_V_value_V_ap_vld,
        in_axi_stream_V_value_V_ap_ack,
        in_axi_stream_V_last_V,
        in_axi_stream_V_last_V_ap_vld,
        in_axi_stream_V_last_V_ap_ack,
        in_stream_V_value_V_din,
        in_stream_V_value_V_full_n,
        in_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [31:0] in_axi_stream_V_value_V;
input   in_axi_stream_V_value_V_ap_vld;
output   in_axi_stream_V_value_V_ap_ack;
input  [0:0] in_axi_stream_V_last_V;
input   in_axi_stream_V_last_V_ap_vld;
output   in_axi_stream_V_last_V_ap_ack;
output  [31:0] in_stream_V_value_V_din;
input   in_stream_V_value_V_full_n;
output   in_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg in_axi_stream_V_value_V_ap_ack;
reg in_axi_stream_V_last_V_ap_ack;
reg in_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    in_axi_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_flag00000000;
wire   [0:0] exitcond_flatten_fu_74_p2;
reg    in_axi_stream_V_last_V_blk_n;
reg    in_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_90;
reg   [20:0] indvar_flatten_reg_63;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [20:0] indvar_flatten_next_fu_80_p2;
reg   [31:0] tmp_value_V_reg_99;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_flag00001001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_63 <= indvar_flatten_next_fu_80_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_63 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_90 <= exitcond_flatten_fu_74_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_value_V_reg_99 <= in_axi_stream_V_value_V;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_74_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_axi_stream_V_last_V_ap_ack = 1'b1;
    end else begin
        in_axi_stream_V_last_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd0))) begin
        in_axi_stream_V_last_V_blk_n = in_axi_stream_V_last_V_ap_vld;
    end else begin
        in_axi_stream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_axi_stream_V_value_V_ap_ack = 1'b1;
    end else begin
        in_axi_stream_V_value_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd0))) begin
        in_axi_stream_V_value_V_blk_n = in_axi_stream_V_value_V_ap_vld;
    end else begin
        in_axi_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90))) begin
        in_stream_V_value_V_blk_n = in_stream_V_value_V_full_n;
    end else begin
        in_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_stream_V_value_V_write = 1'b1;
    end else begin
        in_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_74_p2 = ((indvar_flatten_reg_63 == 21'd2073600) ? 1'b1 : 1'b0);

assign in_stream_V_value_V_din = tmp_value_V_reg_99;

assign indvar_flatten_next_fu_80_p2 = (indvar_flatten_reg_63 + 21'd1);

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //linebuffer_Loop_1_pr


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_call_LodEe_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_call_LodEe (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_call_LodEe_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_call_LodEe_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w32_d1_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd32;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w32_d1_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd32;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w32_d1_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w32_d1_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w96_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd96;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w96_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd96;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w96_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w96_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



