-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_3_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_p2_mul1_stencil_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_p2_mul1_stencil_stream_V_value_V_empty_n : IN STD_LOGIC;
    p_p2_mul1_stencil_stream_V_value_V_read : OUT STD_LOGIC;
    hw_output_V_value_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    hw_output_V_value_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_value_V_ap_ack : IN STD_LOGIC;
    hw_output_V_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    hw_output_V_last_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_last_V_ap_ack : IN STD_LOGIC );
end;


architecture behav of Loop_3_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_3FC0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv21_1F80E1 : STD_LOGIC_VECTOR (20 downto 0) := "111111000000011100001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_77D : STD_LOGIC_VECTOR (10 downto 0) := "11101111101";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_434 : STD_LOGIC_VECTOR (10 downto 0) := "10000110100";
    constant ap_const_lv11_77C : STD_LOGIC_VECTOR (10 downto 0) := "11101111100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_p2_mul1_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter22_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_104 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_hw_output_y_scan_1_reg_115 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_2_reg_127 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_sig_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_exitcond_flatten_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_155_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond7_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond7_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond7_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_x_scan_s_fu_167_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_s_reg_353 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_1_fu_175_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_fu_181_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_reg_363 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_s_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_y_scan_s_fu_193_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_s_reg_373 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_value_V_5_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_2_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_mid1_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_mid1_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_417_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_418_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_reg_408 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_234_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_414 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_reg_pp0_iter22_loc_V_1_reg_414 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_264_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_424 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal p_hw_output_y_scan_1_phi_fu_119_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_hw_output_V_last_V_ap_ack : STD_LOGIC := '0';
    signal tmp_7_mid2_fu_210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_cast_i_fu_238_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_241_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_i_i_fu_255_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_i_cast_i_fu_260_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_fu_272_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_1_i_cast_i_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_cast_i_fu_292_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_cast_i_fu_281_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_2_i_i_fu_288_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_3_i_i_fu_296_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_fu_302_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_1_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_320_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_ce : STD_LOGIC;
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_144_ce : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_target_sitofphbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_target_fpext_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_target_dmul_6jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    hls_target_sitofphbi_x_U44 : component hls_target_sitofphbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_value_V_5_reg_378,
        ce => grp_fu_138_ce,
        dout => grp_fu_138_p1);

    hls_target_fpext_ibs_x_U45 : component hls_target_fpext_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_417_reg_398,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p1);

    hls_target_dmul_6jbC_x_U46 : component hls_target_dmul_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_418_reg_403,
        din1 => ap_const_lv64_3FC0000000000000,
        ce => grp_fu_144_ce,
        dout => grp_fu_144_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_last_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_last_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_value_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_149_p2))) then 
                indvar_flatten_reg_104 <= indvar_flatten_next_fu_155_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_104 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    p_hw_output_x_scan_2_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_149_p2))) then 
                p_hw_output_x_scan_2_reg_127 <= p_hw_output_x_scan_1_fu_175_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_x_scan_2_reg_127 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_hw_output_y_scan_1_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_338) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                p_hw_output_y_scan_1_reg_115 <= p_hw_output_y_scan_s_reg_373;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_y_scan_1_reg_115 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_338 <= ap_reg_pp0_iter9_exitcond_flatten_reg_338;
                ap_reg_pp0_iter10_tmp_last_V_reg_393 <= ap_reg_pp0_iter9_tmp_last_V_reg_393;
                ap_reg_pp0_iter11_exitcond_flatten_reg_338 <= ap_reg_pp0_iter10_exitcond_flatten_reg_338;
                ap_reg_pp0_iter11_tmp_last_V_reg_393 <= ap_reg_pp0_iter10_tmp_last_V_reg_393;
                ap_reg_pp0_iter12_exitcond_flatten_reg_338 <= ap_reg_pp0_iter11_exitcond_flatten_reg_338;
                ap_reg_pp0_iter12_tmp_last_V_reg_393 <= ap_reg_pp0_iter11_tmp_last_V_reg_393;
                ap_reg_pp0_iter13_exitcond_flatten_reg_338 <= ap_reg_pp0_iter12_exitcond_flatten_reg_338;
                ap_reg_pp0_iter13_tmp_last_V_reg_393 <= ap_reg_pp0_iter12_tmp_last_V_reg_393;
                ap_reg_pp0_iter14_exitcond_flatten_reg_338 <= ap_reg_pp0_iter13_exitcond_flatten_reg_338;
                ap_reg_pp0_iter14_tmp_last_V_reg_393 <= ap_reg_pp0_iter13_tmp_last_V_reg_393;
                ap_reg_pp0_iter15_exitcond_flatten_reg_338 <= ap_reg_pp0_iter14_exitcond_flatten_reg_338;
                ap_reg_pp0_iter15_tmp_last_V_reg_393 <= ap_reg_pp0_iter14_tmp_last_V_reg_393;
                ap_reg_pp0_iter16_exitcond_flatten_reg_338 <= ap_reg_pp0_iter15_exitcond_flatten_reg_338;
                ap_reg_pp0_iter16_tmp_last_V_reg_393 <= ap_reg_pp0_iter15_tmp_last_V_reg_393;
                ap_reg_pp0_iter17_exitcond_flatten_reg_338 <= ap_reg_pp0_iter16_exitcond_flatten_reg_338;
                ap_reg_pp0_iter17_tmp_last_V_reg_393 <= ap_reg_pp0_iter16_tmp_last_V_reg_393;
                ap_reg_pp0_iter18_exitcond_flatten_reg_338 <= ap_reg_pp0_iter17_exitcond_flatten_reg_338;
                ap_reg_pp0_iter18_tmp_last_V_reg_393 <= ap_reg_pp0_iter17_tmp_last_V_reg_393;
                ap_reg_pp0_iter19_exitcond_flatten_reg_338 <= ap_reg_pp0_iter18_exitcond_flatten_reg_338;
                ap_reg_pp0_iter19_tmp_last_V_reg_393 <= ap_reg_pp0_iter18_tmp_last_V_reg_393;
                ap_reg_pp0_iter20_exitcond_flatten_reg_338 <= ap_reg_pp0_iter19_exitcond_flatten_reg_338;
                ap_reg_pp0_iter20_tmp_last_V_reg_393 <= ap_reg_pp0_iter19_tmp_last_V_reg_393;
                ap_reg_pp0_iter21_exitcond_flatten_reg_338 <= ap_reg_pp0_iter20_exitcond_flatten_reg_338;
                ap_reg_pp0_iter21_tmp_last_V_reg_393 <= ap_reg_pp0_iter20_tmp_last_V_reg_393;
                ap_reg_pp0_iter22_exitcond_flatten_reg_338 <= ap_reg_pp0_iter21_exitcond_flatten_reg_338;
                ap_reg_pp0_iter22_loc_V_1_reg_414 <= loc_V_1_reg_414;
                ap_reg_pp0_iter22_tmp_last_V_reg_393 <= ap_reg_pp0_iter21_tmp_last_V_reg_393;
                ap_reg_pp0_iter2_exitcond7_reg_347 <= ap_reg_pp0_iter1_exitcond7_reg_347;
                ap_reg_pp0_iter2_exitcond_flatten_reg_338 <= ap_reg_pp0_iter1_exitcond_flatten_reg_338;
                ap_reg_pp0_iter2_tmp_2_reg_383 <= tmp_2_reg_383;
                ap_reg_pp0_iter2_tmp_s_reg_368 <= tmp_s_reg_368;
                ap_reg_pp0_iter3_exitcond_flatten_reg_338 <= ap_reg_pp0_iter2_exitcond_flatten_reg_338;
                ap_reg_pp0_iter4_exitcond_flatten_reg_338 <= ap_reg_pp0_iter3_exitcond_flatten_reg_338;
                ap_reg_pp0_iter4_tmp_last_V_reg_393 <= tmp_last_V_reg_393;
                ap_reg_pp0_iter5_exitcond_flatten_reg_338 <= ap_reg_pp0_iter4_exitcond_flatten_reg_338;
                ap_reg_pp0_iter5_tmp_last_V_reg_393 <= ap_reg_pp0_iter4_tmp_last_V_reg_393;
                ap_reg_pp0_iter6_exitcond_flatten_reg_338 <= ap_reg_pp0_iter5_exitcond_flatten_reg_338;
                ap_reg_pp0_iter6_tmp_last_V_reg_393 <= ap_reg_pp0_iter5_tmp_last_V_reg_393;
                ap_reg_pp0_iter7_exitcond_flatten_reg_338 <= ap_reg_pp0_iter6_exitcond_flatten_reg_338;
                ap_reg_pp0_iter7_tmp_last_V_reg_393 <= ap_reg_pp0_iter6_tmp_last_V_reg_393;
                ap_reg_pp0_iter8_exitcond_flatten_reg_338 <= ap_reg_pp0_iter7_exitcond_flatten_reg_338;
                ap_reg_pp0_iter8_tmp_last_V_reg_393 <= ap_reg_pp0_iter7_tmp_last_V_reg_393;
                ap_reg_pp0_iter9_exitcond_flatten_reg_338 <= ap_reg_pp0_iter8_exitcond_flatten_reg_338;
                ap_reg_pp0_iter9_tmp_last_V_reg_393 <= ap_reg_pp0_iter8_tmp_last_V_reg_393;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond7_reg_347 <= exitcond7_reg_347;
                ap_reg_pp0_iter1_exitcond_flatten_reg_338 <= exitcond_flatten_reg_338;
                exitcond_flatten_reg_338 <= exitcond_flatten_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_149_p2))) then
                exitcond7_reg_347 <= exitcond7_fu_161_p2;
                p_hw_output_x_scan_s_reg_353 <= p_hw_output_x_scan_s_fu_167_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter21_exitcond_flatten_reg_338))) then
                isNeg_reg_419 <= sh_assign_fu_241_p2(11 downto 11);
                sh_assign_1_reg_424 <= sh_assign_1_fu_264_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter20_exitcond_flatten_reg_338))) then
                loc_V_1_reg_414 <= loc_V_1_fu_234_p1;
                loc_V_reg_408 <= p_Val2_s_fu_220_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter8_exitcond_flatten_reg_338))) then
                p_417_reg_398 <= grp_fu_138_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_338))) then
                p_418_reg_403 <= grp_fu_141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_hw_output_y_scan_2_reg_363 <= p_hw_output_y_scan_2_fu_181_p2;
                tmp_2_reg_383 <= tmp_2_fu_200_p2;
                tmp_value_V_5_reg_378 <= p_p2_mul1_stencil_stream_V_value_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_hw_output_y_scan_s_reg_373 <= p_hw_output_y_scan_s_fu_193_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_338) and (ap_reg_pp0_iter1_exitcond7_reg_347 = ap_const_lv1_1))) then
                tmp_7_mid1_reg_388 <= tmp_7_mid1_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_338))) then
                tmp_last_V_reg_393 <= tmp_last_V_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond7_reg_347))) then
                tmp_s_reg_368 <= tmp_s_fu_187_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter23, exitcond_flatten_fu_149_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_149_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_149_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state26 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_338)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_empty_n));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_338, ap_enable_reg_pp0_iter23, ap_block_state25_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state25_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_338, ap_enable_reg_pp0_iter23, ap_block_state25_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state25_io)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(ap_reg_pp0_iter22_exitcond_flatten_reg_338, ap_sig_ioackin_hw_output_V_value_V_ap_ack)
    begin
                ap_block_state25_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338) and (ap_const_logic_0 = ap_sig_ioackin_hw_output_V_value_V_ap_ack));
    end process;

        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_empty_n, exitcond_flatten_reg_338)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_149_p2)
    begin
        if ((exitcond_flatten_fu_149_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(hw_output_V_value_V_ap_ack, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack)) then 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= hw_output_V_value_V_ap_ack;
        else 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    exitcond7_fu_161_p2 <= "1" when (p_hw_output_x_scan_2_reg_127 = ap_const_lv11_77D) else "0";
    exitcond_flatten_fu_149_p2 <= "1" when (indvar_flatten_reg_104 = ap_const_lv21_1F80E1) else "0";

    grp_fu_138_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_138_ce <= ap_const_logic_1;
        else 
            grp_fu_138_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_144_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_144_ce <= ap_const_logic_1;
        else 
            grp_fu_144_ce <= ap_const_logic_0;
        end if; 
    end process;

    hw_output_V_last_V <= ap_reg_pp0_iter22_tmp_last_V_reg_393;

    hw_output_V_last_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter23, ap_reg_pp0_iter22_exitcond_flatten_reg_338, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_last_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_last_V_ap_ack))) then 
            hw_output_V_last_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_last_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_last_V_blk_n_assign_proc : process(hw_output_V_last_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter23, ap_reg_pp0_iter22_exitcond_flatten_reg_338)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338))) then 
            hw_output_V_last_V_blk_n <= hw_output_V_last_V_ap_ack;
        else 
            hw_output_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hw_output_V_value_V <= 
        tmp_1_fu_316_p1 when (isNeg_reg_419(0) = '1') else 
        tmp_4_fu_320_p4;

    hw_output_V_value_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter23, ap_reg_pp0_iter22_exitcond_flatten_reg_338, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack))) then 
            hw_output_V_value_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_value_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_value_V_blk_n_assign_proc : process(hw_output_V_value_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter23, ap_reg_pp0_iter22_exitcond_flatten_reg_338)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_338))) then 
            hw_output_V_value_V_blk_n <= hw_output_V_value_V_ap_ack;
        else 
            hw_output_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten_next_fu_155_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_104) + unsigned(ap_const_lv21_1));
    isNeg_fu_247_p3 <= sh_assign_fu_241_p2(11 downto 11);
    loc_V_1_fu_234_p1 <= p_Val2_s_fu_220_p1(52 - 1 downto 0);
    p_Val2_s_fu_220_p1 <= grp_fu_144_p2;
    p_hw_output_x_scan_1_fu_175_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_x_scan_s_fu_167_p3));
    p_hw_output_x_scan_s_fu_167_p3 <= 
        ap_const_lv11_0 when (exitcond7_fu_161_p2(0) = '1') else 
        p_hw_output_x_scan_2_reg_127;

    p_hw_output_y_scan_1_phi_fu_119_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, p_hw_output_y_scan_1_reg_115, ap_reg_pp0_iter1_exitcond_flatten_reg_338, p_hw_output_y_scan_s_reg_373, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_338) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            p_hw_output_y_scan_1_phi_fu_119_p4 <= p_hw_output_y_scan_s_reg_373;
        else 
            p_hw_output_y_scan_1_phi_fu_119_p4 <= p_hw_output_y_scan_1_reg_115;
        end if; 
    end process;

    p_hw_output_y_scan_2_fu_181_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_y_scan_1_phi_fu_119_p4));
    p_hw_output_y_scan_s_fu_193_p3 <= 
        p_hw_output_y_scan_2_fu_181_p2 when (exitcond7_reg_347(0) = '1') else 
        p_hw_output_y_scan_1_phi_fu_119_p4;

    p_p2_mul1_stencil_stream_V_value_V_blk_n_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_338)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_338 = ap_const_lv1_0))) then 
            p_p2_mul1_stencil_stream_V_value_V_blk_n <= p_p2_mul1_stencil_stream_V_value_V_empty_n;
        else 
            p_p2_mul1_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_p2_mul1_stencil_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_338, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_338 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_p2_mul1_stencil_stream_V_value_V_read <= ap_const_logic_1;
        else 
            p_p2_mul1_stencil_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sh_assign_1_fu_264_p3 <= 
        tmp_1_i_cast_i_fu_260_p1 when (isNeg_fu_247_p3(0) = '1') else 
        sh_assign_fu_241_p2;
        sh_assign_1_i_cast_i_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_424),32));

    sh_assign_fu_241_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_cast_i_fu_238_p1));
    tmp_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_308_p3),32));
        tmp_1_i_cast_i_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_i_i_fu_255_p2),12));

    tmp_1_i_i_fu_255_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_408));
    tmp_2_fu_200_p2 <= "1" when (p_hw_output_x_scan_s_reg_353 = ap_const_lv11_77C) else "0";
    tmp_2_i_cast_i_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_cast_i_fu_285_p1),54));
    tmp_2_i_i_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_cast_i_fu_285_p1),137));
    tmp_3_i_i_fu_296_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_fu_272_p4),to_integer(unsigned('0' & tmp_2_i_cast_i_fu_292_p1(31-1 downto 0)))));
    tmp_4_fu_320_p4 <= tmp_4_i_i_fu_302_p2(84 downto 53);
    tmp_4_i_i_fu_302_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_i_fu_281_p1),to_integer(unsigned('0' & tmp_2_i_i_fu_288_p1(31-1 downto 0)))));
    tmp_7_mid1_fu_205_p2 <= "1" when (p_hw_output_y_scan_2_reg_363 = ap_const_lv11_434) else "0";
    tmp_7_mid2_fu_210_p3 <= 
        tmp_7_mid1_reg_388 when (ap_reg_pp0_iter2_exitcond7_reg_347(0) = '1') else 
        ap_reg_pp0_iter2_tmp_s_reg_368;
    tmp_fu_308_p3 <= tmp_3_i_i_fu_296_p2(53 downto 53);
    tmp_i_cast_i_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_272_p4),137));
    tmp_i_i_cast_i_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_reg_408),12));
    tmp_i_i_fu_272_p4 <= ((ap_const_lv1_1 & ap_reg_pp0_iter22_loc_V_1_reg_414) & ap_const_lv1_0);
    tmp_last_V_fu_215_p2 <= (ap_reg_pp0_iter2_tmp_2_reg_383 and tmp_7_mid2_fu_210_p3);
    tmp_s_fu_187_p2 <= "1" when (p_hw_output_y_scan_1_phi_fu_119_p4 = ap_const_lv11_434) else "0";
end behav;
