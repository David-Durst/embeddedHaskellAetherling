-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_mul_stencil_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    p_mul_stencil_stream_V_value_V_empty_n : IN STD_LOGIC;
    p_mul_stencil_stream_V_value_V_read : OUT STD_LOGIC;
    p_p2_mul1_stencil_stream_V_value_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_p2_mul1_stencil_stream_V_value_V_full_n : IN STD_LOGIC;
    p_p2_mul1_stencil_stream_V_value_V_write : OUT STD_LOGIC );
end;


architecture behav of Loop_2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv64_3FB0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv21_1F80E1 : STD_LOGIC_VECTOR (20 downto 0) := "111111000000011100001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal p_mul_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_p2_mul1_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter26_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_115 : STD_LOGIC_VECTOR (20 downto 0);
    signal exitcond_flatten_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter24_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter25_exitcond_flatten_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_176_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_381_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_381_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mul_stencil_value_0_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mul_stencil_value_0_1_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mul_stencil_value_0_2_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_382_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_391_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_400_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_409_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_383_reg_857 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_392_reg_862 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_401_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_410_reg_872 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_384_reg_877 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_393_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_402_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_411_reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_p_Result_s_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter24_p_Result_s_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_2_fu_237_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_2_reg_902 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_2_fu_269_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_reg_912 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_4_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_p_Result_4_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_4_fu_298_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_4_reg_922 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_1_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_4_fu_330_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_reg_932 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_17_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_17_reg_937 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter23_p_Val2_17_reg_937 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter24_p_Val2_17_reg_937 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_6_fu_351_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_6_reg_942 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_2_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_6_fu_383_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_reg_952 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_21_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_21_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter23_p_Val2_21_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter24_p_Val2_21_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_8_fu_404_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_8_reg_962 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_3_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_3_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_8_fu_436_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_8_reg_972 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_7_fu_502_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_7_reg_977 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_27_fu_574_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_27_reg_982 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_28_fu_578_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_28_reg_987 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_19_fu_640_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_19_reg_992 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_pp0_iter24_p_Val2_19_reg_992 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_23_fu_705_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_23_reg_998 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_i_i_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_i_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_i_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_i_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_726_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_1013 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_pp0_iter25_tmp_3_reg_1013 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_16_i_i2_fu_732_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_i_i2_reg_1018 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_i_i3_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_i3_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_i3_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_i3_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_26_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_26_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_415_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_415_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal p_Val2_5_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_227_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_i_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_i_i_fu_259_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_i_cast_i_fu_265_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_3_fu_288_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_i9_fu_302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_i_i1_fu_320_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_i_cast_i1_fu_326_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal loc_V_5_fu_341_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_i1_fu_355_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_fu_359_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_i_i2_fu_373_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_i_cast_i2_fu_379_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal loc_V_7_fu_394_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_i2_fu_408_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_7_fu_412_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_i_i3_fu_426_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_i_cast_i3_fu_432_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_fu_444_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_2_i_cast_i_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_i_fu_464_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_cast_i_fu_453_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_9_i_i_fu_460_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_10_i_i_fu_468_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_17_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_i_i_fu_474_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_7_fu_488_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_492_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_i7_fu_509_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_2_i_cast_i_1_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_i1_fu_529_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_cast_i8_fu_518_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_9_i_i1_fu_525_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_10_i_i1_fu_533_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_26_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_i_i1_fu_539_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_fu_553_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_557_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_15_fu_567_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_i1_fu_582_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_2_i_cast_i_2_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_i2_fu_602_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_cast_i1_fu_591_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_9_i_i2_fu_598_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_10_i_i2_fu_606_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_32_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_i_i2_fu_612_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_4_fu_626_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_630_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_i2_fu_647_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_2_i_cast_i_3_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_i3_fu_667_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_cast_i2_fu_656_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_9_i_i3_fu_663_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_10_i_i3_fu_671_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_36_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_i_i3_fu_677_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_9_fu_691_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_695_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_i_i1_fu_721_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_5_fu_751_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_758_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_6_fu_772_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_405_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_27_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_396_fu_791_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_ce : STD_LOGIC;
    signal grp_fu_129_ce : STD_LOGIC;
    signal grp_fu_132_ce : STD_LOGIC;
    signal grp_fu_135_ce : STD_LOGIC;
    signal grp_fu_138_ce : STD_LOGIC;
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_144_ce : STD_LOGIC;
    signal grp_fu_147_ce : STD_LOGIC;
    signal grp_fu_150_ce : STD_LOGIC;
    signal grp_fu_155_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_165_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_target_sitofphbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_target_fpext_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hls_target_dmul_6jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    hls_target_sitofphbi_U30 : component hls_target_sitofphbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_381_reg_817,
        ce => grp_fu_126_ce,
        dout => grp_fu_126_p1);

    hls_target_sitofphbi_U31 : component hls_target_sitofphbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_mul_stencil_value_0_reg_822,
        ce => grp_fu_129_ce,
        dout => grp_fu_129_p1);

    hls_target_sitofphbi_U32 : component hls_target_sitofphbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_mul_stencil_value_0_1_reg_827,
        ce => grp_fu_132_ce,
        dout => grp_fu_132_p1);

    hls_target_sitofphbi_U33 : component hls_target_sitofphbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_mul_stencil_value_0_2_reg_832,
        ce => grp_fu_135_ce,
        dout => grp_fu_135_p1);

    hls_target_fpext_ibs_U34 : component hls_target_fpext_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_382_reg_837,
        ce => grp_fu_138_ce,
        dout => grp_fu_138_p1);

    hls_target_fpext_ibs_U35 : component hls_target_fpext_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_391_reg_842,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p1);

    hls_target_fpext_ibs_U36 : component hls_target_fpext_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_400_reg_847,
        ce => grp_fu_144_ce,
        dout => grp_fu_144_p1);

    hls_target_fpext_ibs_U37 : component hls_target_fpext_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_409_reg_852,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p1);

    hls_target_dmul_6jbC_U38 : component hls_target_dmul_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_383_reg_857,
        din1 => ap_const_lv64_3FB0000000000000,
        ce => grp_fu_150_ce,
        dout => grp_fu_150_p2);

    hls_target_dmul_6jbC_U39 : component hls_target_dmul_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_392_reg_862,
        din1 => ap_const_lv64_3FB0000000000000,
        ce => grp_fu_155_ce,
        dout => grp_fu_155_p2);

    hls_target_dmul_6jbC_U40 : component hls_target_dmul_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_401_reg_867,
        din1 => ap_const_lv64_3FB0000000000000,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);

    hls_target_dmul_6jbC_U41 : component hls_target_dmul_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_410_reg_872,
        din1 => ap_const_lv64_3FB0000000000000,
        ce => grp_fu_165_ce,
        dout => grp_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_170_p2))) then 
                indvar_flatten_reg_115 <= indvar_flatten_next_fu_176_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_115 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_808 <= ap_reg_pp0_iter9_exitcond_flatten_reg_808;
                ap_reg_pp0_iter11_exitcond_flatten_reg_808 <= ap_reg_pp0_iter10_exitcond_flatten_reg_808;
                ap_reg_pp0_iter12_exitcond_flatten_reg_808 <= ap_reg_pp0_iter11_exitcond_flatten_reg_808;
                ap_reg_pp0_iter13_exitcond_flatten_reg_808 <= ap_reg_pp0_iter12_exitcond_flatten_reg_808;
                ap_reg_pp0_iter14_exitcond_flatten_reg_808 <= ap_reg_pp0_iter13_exitcond_flatten_reg_808;
                ap_reg_pp0_iter15_exitcond_flatten_reg_808 <= ap_reg_pp0_iter14_exitcond_flatten_reg_808;
                ap_reg_pp0_iter16_exitcond_flatten_reg_808 <= ap_reg_pp0_iter15_exitcond_flatten_reg_808;
                ap_reg_pp0_iter17_exitcond_flatten_reg_808 <= ap_reg_pp0_iter16_exitcond_flatten_reg_808;
                ap_reg_pp0_iter18_exitcond_flatten_reg_808 <= ap_reg_pp0_iter17_exitcond_flatten_reg_808;
                ap_reg_pp0_iter19_exitcond_flatten_reg_808 <= ap_reg_pp0_iter18_exitcond_flatten_reg_808;
                ap_reg_pp0_iter20_exitcond_flatten_reg_808 <= ap_reg_pp0_iter19_exitcond_flatten_reg_808;
                ap_reg_pp0_iter21_exitcond_flatten_reg_808 <= ap_reg_pp0_iter20_exitcond_flatten_reg_808;
                ap_reg_pp0_iter22_exitcond_flatten_reg_808 <= ap_reg_pp0_iter21_exitcond_flatten_reg_808;
                ap_reg_pp0_iter23_exitcond_flatten_reg_808 <= ap_reg_pp0_iter22_exitcond_flatten_reg_808;
                ap_reg_pp0_iter23_p_Result_4_reg_917 <= p_Result_4_reg_917;
                ap_reg_pp0_iter23_p_Result_s_reg_897 <= p_Result_s_reg_897;
                ap_reg_pp0_iter23_p_Val2_17_reg_937 <= p_Val2_17_reg_937;
                ap_reg_pp0_iter23_p_Val2_21_reg_957 <= p_Val2_21_reg_957;
                ap_reg_pp0_iter24_exitcond_flatten_reg_808 <= ap_reg_pp0_iter23_exitcond_flatten_reg_808;
                ap_reg_pp0_iter24_p_Result_s_reg_897 <= ap_reg_pp0_iter23_p_Result_s_reg_897;
                ap_reg_pp0_iter24_p_Val2_17_reg_937 <= ap_reg_pp0_iter23_p_Val2_17_reg_937;
                ap_reg_pp0_iter24_p_Val2_19_reg_992 <= p_Val2_19_reg_992;
                ap_reg_pp0_iter24_p_Val2_21_reg_957 <= ap_reg_pp0_iter23_p_Val2_21_reg_957;
                ap_reg_pp0_iter25_exitcond_flatten_reg_808 <= ap_reg_pp0_iter24_exitcond_flatten_reg_808;
                ap_reg_pp0_iter25_tmp_3_reg_1013 <= tmp_3_reg_1013;
                ap_reg_pp0_iter26_exitcond_flatten_reg_808 <= ap_reg_pp0_iter25_exitcond_flatten_reg_808;
                ap_reg_pp0_iter2_exitcond_flatten_reg_808 <= ap_reg_pp0_iter1_exitcond_flatten_reg_808;
                ap_reg_pp0_iter3_exitcond_flatten_reg_808 <= ap_reg_pp0_iter2_exitcond_flatten_reg_808;
                ap_reg_pp0_iter4_exitcond_flatten_reg_808 <= ap_reg_pp0_iter3_exitcond_flatten_reg_808;
                ap_reg_pp0_iter5_exitcond_flatten_reg_808 <= ap_reg_pp0_iter4_exitcond_flatten_reg_808;
                ap_reg_pp0_iter6_exitcond_flatten_reg_808 <= ap_reg_pp0_iter5_exitcond_flatten_reg_808;
                ap_reg_pp0_iter7_exitcond_flatten_reg_808 <= ap_reg_pp0_iter6_exitcond_flatten_reg_808;
                ap_reg_pp0_iter8_exitcond_flatten_reg_808 <= ap_reg_pp0_iter7_exitcond_flatten_reg_808;
                ap_reg_pp0_iter9_exitcond_flatten_reg_808 <= ap_reg_pp0_iter8_exitcond_flatten_reg_808;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_808 <= exitcond_flatten_reg_808;
                exitcond_flatten_reg_808 <= exitcond_flatten_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter21_exitcond_flatten_reg_808))) then
                isNeg_1_reg_927 <= sh_assign_3_fu_306_p2(11 downto 11);
                isNeg_2_reg_947 <= sh_assign_5_fu_359_p2(11 downto 11);
                isNeg_3_reg_967 <= sh_assign_7_fu_412_p2(11 downto 11);
                isNeg_reg_907 <= sh_assign_fu_245_p2(11 downto 11);
                loc_V_2_reg_902 <= loc_V_2_fu_237_p1;
                loc_V_4_reg_922 <= loc_V_4_fu_298_p1;
                loc_V_6_reg_942 <= loc_V_6_fu_351_p1;
                loc_V_8_reg_962 <= loc_V_8_fu_404_p1;
                p_Result_4_reg_917 <= p_Val2_s_fu_277_p1(63 downto 63);
                p_Result_s_reg_897 <= p_Val2_5_fu_216_p1(63 downto 63);
                p_Val2_17_reg_937 <= p_Val2_17_fu_338_p1;
                p_Val2_21_reg_957 <= p_Val2_21_fu_391_p1;
                sh_assign_2_reg_912 <= sh_assign_2_fu_269_p3;
                sh_assign_4_reg_932 <= sh_assign_4_fu_330_p3;
                sh_assign_6_reg_952 <= sh_assign_6_fu_383_p3;
                sh_assign_8_reg_972 <= sh_assign_8_fu_436_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_808 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_381_reg_817 <= p_381_fu_182_p1;
                p_mul_stencil_value_0_1_reg_827 <= p_mul_stencil_stream_V_value_V_dout(95 downto 64);
                p_mul_stencil_value_0_2_reg_832 <= p_mul_stencil_stream_V_value_V_dout(127 downto 96);
                p_mul_stencil_value_0_reg_822 <= p_mul_stencil_stream_V_value_V_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter8_exitcond_flatten_reg_808))) then
                p_382_reg_837 <= grp_fu_126_p1;
                p_391_reg_842 <= grp_fu_129_p1;
                p_400_reg_847 <= grp_fu_132_p1;
                p_409_reg_852 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_808))) then
                p_383_reg_857 <= grp_fu_138_p1;
                p_392_reg_862 <= grp_fu_141_p1;
                p_401_reg_867 <= grp_fu_144_p1;
                p_410_reg_872 <= grp_fu_147_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter20_exitcond_flatten_reg_808))) then
                p_384_reg_877 <= grp_fu_150_p2;
                p_393_reg_882 <= grp_fu_155_p2;
                p_402_reg_887 <= grp_fu_160_p2;
                p_411_reg_892 <= grp_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter25_exitcond_flatten_reg_808))) then
                p_415_reg_1043 <= p_415_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_808))) then
                p_Val2_19_reg_992 <= p_Val2_19_fu_640_p3;
                p_Val2_23_reg_998 <= p_Val2_23_fu_705_p3;
                p_Val2_7_reg_977 <= p_Val2_7_fu_502_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter24_exitcond_flatten_reg_808))) then
                p_Val2_26_reg_1033 <= p_Val2_26_fu_746_p3;
                tmp5_reg_1038 <= tmp5_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter23_exitcond_flatten_reg_808))) then
                    tmp_13_i_i3_reg_1023(30 downto 0) <= tmp_13_i_i3_fu_737_p1(30 downto 0);
                    tmp_13_i_i_reg_1003(30 downto 0) <= tmp_13_i_i_fu_712_p1(30 downto 0);
                tmp_16_i_i2_reg_1018 <= tmp_16_i_i2_fu_732_p2;
                tmp_16_i_i3_reg_1028 <= tmp_16_i_i3_fu_740_p2;
                tmp_3_reg_1013 <= tmp_3_fu_726_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter23_exitcond_flatten_reg_808) and (ap_reg_pp0_iter23_p_Result_s_reg_897 = ap_const_lv1_1))) then
                tmp_16_i_i_reg_1008 <= tmp_16_i_i_fu_715_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_808) and (p_Result_4_reg_917 = ap_const_lv1_1))) then
                tmp_27_reg_982 <= tmp_27_fu_574_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter22_exitcond_flatten_reg_808) and (ap_const_lv1_0 = p_Result_4_reg_917))) then
                tmp_28_reg_987 <= tmp_28_fu_578_p1;
            end if;
        end if;
    end process;
    tmp_13_i_i_reg_1003(31) <= '0';
    tmp_13_i_i3_reg_1023(31) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter27, exitcond_flatten_fu_170_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_170_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_170_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state30 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(p_mul_stencil_stream_V_value_V_empty_n, p_p2_mul1_stencil_stream_V_value_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_808, ap_enable_reg_pp0_iter27, ap_reg_pp0_iter26_exitcond_flatten_reg_808)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_808 = ap_const_lv1_0) and (ap_const_logic_0 = p_mul_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_const_lv1_0 = ap_reg_pp0_iter26_exitcond_flatten_reg_808) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_full_n)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(p_mul_stencil_stream_V_value_V_empty_n, p_p2_mul1_stencil_stream_V_value_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_808, ap_enable_reg_pp0_iter27, ap_reg_pp0_iter26_exitcond_flatten_reg_808)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_808 = ap_const_lv1_0) and (ap_const_logic_0 = p_mul_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_const_lv1_0 = ap_reg_pp0_iter26_exitcond_flatten_reg_808) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_full_n)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(p_mul_stencil_stream_V_value_V_empty_n, p_p2_mul1_stencil_stream_V_value_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_808, ap_enable_reg_pp0_iter27, ap_reg_pp0_iter26_exitcond_flatten_reg_808)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_808 = ap_const_lv1_0) and (ap_const_logic_0 = p_mul_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_const_lv1_0 = ap_reg_pp0_iter26_exitcond_flatten_reg_808) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_full_n)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp0_stage0_iter27_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_full_n, ap_reg_pp0_iter26_exitcond_flatten_reg_808)
    begin
                ap_block_state29_pp0_stage0_iter27 <= ((ap_const_lv1_0 = ap_reg_pp0_iter26_exitcond_flatten_reg_808) and (ap_const_logic_0 = p_p2_mul1_stencil_stream_V_value_V_full_n));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_mul_stencil_stream_V_value_V_empty_n, exitcond_flatten_reg_808)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_808 = ap_const_lv1_0) and (ap_const_logic_0 = p_mul_stencil_stream_V_value_V_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_170_p2)
    begin
        if ((exitcond_flatten_fu_170_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten_fu_170_p2 <= "1" when (indvar_flatten_reg_115 = ap_const_lv21_1F80E1) else "0";

    grp_fu_126_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_126_ce <= ap_const_logic_1;
        else 
            grp_fu_126_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_129_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_129_ce <= ap_const_logic_1;
        else 
            grp_fu_129_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_132_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_132_ce <= ap_const_logic_1;
        else 
            grp_fu_132_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_135_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_135_ce <= ap_const_logic_1;
        else 
            grp_fu_135_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_138_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_138_ce <= ap_const_logic_1;
        else 
            grp_fu_138_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_144_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_144_ce <= ap_const_logic_1;
        else 
            grp_fu_144_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_147_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_147_ce <= ap_const_logic_1;
        else 
            grp_fu_147_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_150_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_150_ce <= ap_const_logic_1;
        else 
            grp_fu_150_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_155_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_155_ce <= ap_const_logic_1;
        else 
            grp_fu_155_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_160_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_165_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_165_ce <= ap_const_logic_1;
        else 
            grp_fu_165_ce <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_176_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_115) + unsigned(ap_const_lv21_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_312_p3 <= sh_assign_3_fu_306_p2(11 downto 11);
    isNeg_2_fu_365_p3 <= sh_assign_5_fu_359_p2(11 downto 11);
    isNeg_3_fu_418_p3 <= sh_assign_7_fu_412_p2(11 downto 11);
    isNeg_fu_251_p3 <= sh_assign_fu_245_p2(11 downto 11);
    loc_V_2_fu_237_p1 <= p_Val2_5_fu_216_p1(52 - 1 downto 0);
    loc_V_3_fu_288_p4 <= p_Val2_s_fu_277_p1(62 downto 52);
    loc_V_4_fu_298_p1 <= p_Val2_s_fu_277_p1(52 - 1 downto 0);
    loc_V_5_fu_341_p4 <= p_Val2_17_fu_338_p1(62 downto 52);
    loc_V_6_fu_351_p1 <= p_Val2_17_fu_338_p1(52 - 1 downto 0);
    loc_V_7_fu_394_p4 <= p_Val2_21_fu_391_p1(62 downto 52);
    loc_V_8_fu_404_p1 <= p_Val2_21_fu_391_p1(52 - 1 downto 0);
    loc_V_fu_227_p4 <= p_Val2_5_fu_216_p1(62 downto 52);
    p_381_fu_182_p1 <= p_mul_stencil_stream_V_value_V_dout(32 - 1 downto 0);
    p_396_fu_791_p3 <= (ap_reg_pp0_iter25_tmp_3_reg_1013 & ap_const_lv2_0);
    p_405_fu_764_p3 <= (tmp_6_fu_758_p3 & ap_const_lv1_0);
    p_415_fu_803_p2 <= std_logic_vector(unsigned(tmp5_reg_1038) + unsigned(tmp_fu_798_p2));
    p_Result_5_fu_751_p3 <= ap_reg_pp0_iter24_p_Val2_17_reg_937(63 downto 63);
    p_Result_6_fu_772_p3 <= ap_reg_pp0_iter24_p_Val2_21_reg_957(63 downto 63);
    p_Val2_15_fu_567_p3 <= 
        tmp_s_fu_553_p1 when (isNeg_1_reg_927(0) = '1') else 
        tmp_2_fu_557_p4;
    p_Val2_17_fu_338_p1 <= p_402_reg_887;
    p_Val2_19_fu_640_p3 <= 
        tmp_4_fu_626_p1 when (isNeg_2_reg_947(0) = '1') else 
        tmp_5_fu_630_p4;
    p_Val2_21_fu_391_p1 <= p_411_reg_892;
    p_Val2_23_fu_705_p3 <= 
        tmp_9_fu_691_p1 when (isNeg_3_reg_967(0) = '1') else 
        tmp_10_fu_695_p4;
    p_Val2_26_fu_746_p3 <= 
        tmp_16_i_i_reg_1008 when (ap_reg_pp0_iter24_p_Result_s_reg_897(0) = '1') else 
        tmp_13_i_i_reg_1003;
    p_Val2_27_fu_779_p3 <= 
        tmp_16_i_i3_reg_1028 when (p_Result_6_fu_772_p3(0) = '1') else 
        tmp_13_i_i3_reg_1023;
    p_Val2_5_fu_216_p1 <= p_384_reg_877;
    p_Val2_7_fu_502_p3 <= 
        tmp_7_fu_488_p1 when (isNeg_reg_907(0) = '1') else 
        tmp_8_fu_492_p4;
    p_Val2_s_fu_277_p1 <= p_393_reg_882;

    p_mul_stencil_stream_V_value_V_blk_n_assign_proc : process(p_mul_stencil_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_808)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_808 = ap_const_lv1_0))) then 
            p_mul_stencil_stream_V_value_V_blk_n <= p_mul_stencil_stream_V_value_V_empty_n;
        else 
            p_mul_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_mul_stencil_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_808, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_808 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_mul_stencil_stream_V_value_V_read <= ap_const_logic_1;
        else 
            p_mul_stencil_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_p2_mul1_stencil_stream_V_value_V_blk_n_assign_proc : process(p_p2_mul1_stencil_stream_V_value_V_full_n, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter27, ap_reg_pp0_iter26_exitcond_flatten_reg_808)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_const_lv1_0 = ap_reg_pp0_iter26_exitcond_flatten_reg_808))) then 
            p_p2_mul1_stencil_stream_V_value_V_blk_n <= p_p2_mul1_stencil_stream_V_value_V_full_n;
        else 
            p_p2_mul1_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_p2_mul1_stencil_stream_V_value_V_din <= p_415_reg_1043;

    p_p2_mul1_stencil_stream_V_value_V_write_assign_proc : process(ap_enable_reg_pp0_iter27, ap_reg_pp0_iter26_exitcond_flatten_reg_808, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter27) and (ap_const_lv1_0 = ap_reg_pp0_iter26_exitcond_flatten_reg_808) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_p2_mul1_stencil_stream_V_value_V_write <= ap_const_logic_1;
        else 
            p_p2_mul1_stencil_stream_V_value_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sh_assign_2_fu_269_p3 <= 
        tmp_8_i_cast_i_fu_265_p1 when (isNeg_fu_251_p3(0) = '1') else 
        sh_assign_fu_245_p2;
        sh_assign_2_i_cast_i_1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_4_reg_932),32));

        sh_assign_2_i_cast_i_2_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_6_reg_952),32));

        sh_assign_2_i_cast_i_3_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_8_reg_972),32));

        sh_assign_2_i_cast_i_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_2_reg_912),32));

    sh_assign_3_fu_306_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_cast_i9_fu_302_p1));
    sh_assign_4_fu_330_p3 <= 
        tmp_8_i_cast_i1_fu_326_p1 when (isNeg_1_fu_312_p3(0) = '1') else 
        sh_assign_3_fu_306_p2;
    sh_assign_5_fu_359_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_cast_i1_fu_355_p1));
    sh_assign_6_fu_383_p3 <= 
        tmp_8_i_cast_i2_fu_379_p1 when (isNeg_2_fu_365_p3(0) = '1') else 
        sh_assign_5_fu_359_p2;
    sh_assign_7_fu_412_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_cast_i2_fu_408_p1));
    sh_assign_8_fu_436_p3 <= 
        tmp_8_i_cast_i3_fu_432_p1 when (isNeg_3_fu_418_p3(0) = '1') else 
        sh_assign_7_fu_412_p2;
    sh_assign_fu_245_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_cast_i_fu_241_p1));
    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp5_fu_785_p2 <= std_logic_vector(unsigned(p_405_fu_764_p3) + unsigned(p_Val2_27_fu_779_p3));
    tmp_10_fu_695_p4 <= tmp_11_i_i3_fu_677_p2(83 downto 53);
    tmp_10_i_i1_fu_533_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i7_fu_509_p4),to_integer(unsigned('0' & tmp_9_i_cast_i1_fu_529_p1(31-1 downto 0)))));
    tmp_10_i_i2_fu_606_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i1_fu_582_p4),to_integer(unsigned('0' & tmp_9_i_cast_i2_fu_602_p1(31-1 downto 0)))));
    tmp_10_i_i3_fu_671_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i2_fu_647_p4),to_integer(unsigned('0' & tmp_9_i_cast_i3_fu_667_p1(31-1 downto 0)))));
    tmp_10_i_i_fu_468_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_fu_444_p4),to_integer(unsigned('0' & tmp_9_i_cast_i_fu_464_p1(31-1 downto 0)))));
    tmp_11_i_i1_fu_539_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_i8_fu_518_p1),to_integer(unsigned('0' & tmp_9_i_i1_fu_525_p1(31-1 downto 0)))));
    tmp_11_i_i2_fu_612_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_i1_fu_591_p1),to_integer(unsigned('0' & tmp_9_i_i2_fu_598_p1(31-1 downto 0)))));
    tmp_11_i_i3_fu_677_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_i2_fu_656_p1),to_integer(unsigned('0' & tmp_9_i_i3_fu_663_p1(31-1 downto 0)))));
    tmp_11_i_i_fu_474_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_cast_i_fu_453_p1),to_integer(unsigned('0' & tmp_9_i_i_fu_460_p1(31-1 downto 0)))));
    tmp_13_i_i3_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_23_reg_998),32));
    tmp_13_i_i_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_reg_977),32));
    tmp_16_i_i1_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(tmp_27_reg_982));
    tmp_16_i_i2_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_Val2_19_reg_992));
    tmp_16_i_i3_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_13_i_i3_fu_737_p1));
    tmp_16_i_i_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_13_i_i_fu_712_p1));
    tmp_17_fu_480_p3 <= tmp_10_i_i_fu_468_p2(53 downto 53);
    tmp_26_fu_545_p3 <= tmp_10_i_i1_fu_533_p2(53 downto 53);
    tmp_27_fu_574_p1 <= p_Val2_15_fu_567_p3(30 - 1 downto 0);
    tmp_28_fu_578_p1 <= p_Val2_15_fu_567_p3(30 - 1 downto 0);
    tmp_2_fu_557_p4 <= tmp_11_i_i1_fu_539_p2(83 downto 53);
    tmp_32_fu_618_p3 <= tmp_10_i_i2_fu_606_p2(53 downto 53);
    tmp_36_fu_683_p3 <= tmp_10_i_i3_fu_671_p2(53 downto 53);
    tmp_3_fu_726_p3 <= 
        tmp_16_i_i1_fu_721_p2 when (ap_reg_pp0_iter23_p_Result_4_reg_917(0) = '1') else 
        tmp_28_reg_987;
    tmp_4_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_618_p3),31));
    tmp_5_fu_630_p4 <= tmp_11_i_i2_fu_612_p2(83 downto 53);
    tmp_6_fu_758_p3 <= 
        tmp_16_i_i2_reg_1018 when (p_Result_5_fu_751_p3(0) = '1') else 
        ap_reg_pp0_iter24_p_Val2_19_reg_992;
    tmp_7_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_480_p3),31));
    tmp_8_fu_492_p4 <= tmp_11_i_i_fu_474_p2(83 downto 53);
        tmp_8_i_cast_i1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_i_i1_fu_320_p2),12));

        tmp_8_i_cast_i2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_i_i2_fu_373_p2),12));

        tmp_8_i_cast_i3_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_i_i3_fu_426_p2),12));

        tmp_8_i_cast_i_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_i_i_fu_259_p2),12));

    tmp_8_i_i1_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_3_fu_288_p4));
    tmp_8_i_i2_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_5_fu_341_p4));
    tmp_8_i_i3_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_7_fu_394_p4));
    tmp_8_i_i_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_227_p4));
    tmp_9_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_683_p3),31));
    tmp_9_i_cast_i1_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_1_fu_522_p1),54));
    tmp_9_i_cast_i2_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_2_fu_595_p1),54));
    tmp_9_i_cast_i3_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_3_fu_660_p1),54));
    tmp_9_i_cast_i_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_fu_457_p1),54));
    tmp_9_i_i1_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_1_fu_522_p1),137));
    tmp_9_i_i2_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_2_fu_595_p1),137));
    tmp_9_i_i3_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_3_fu_660_p1),137));
    tmp_9_i_i_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_i_cast_i_fu_457_p1),137));
    tmp_fu_798_p2 <= std_logic_vector(unsigned(p_396_fu_791_p3) + unsigned(p_Val2_26_reg_1033));
    tmp_i_cast_i1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i1_fu_582_p4),137));
    tmp_i_cast_i2_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i2_fu_647_p4),137));
    tmp_i_cast_i8_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i7_fu_509_p4),137));
    tmp_i_cast_i_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_444_p4),137));
    tmp_i_i1_fu_582_p4 <= ((ap_const_lv1_1 & loc_V_6_reg_942) & ap_const_lv1_0);
    tmp_i_i2_fu_647_p4 <= ((ap_const_lv1_1 & loc_V_8_reg_962) & ap_const_lv1_0);
    tmp_i_i7_fu_509_p4 <= ((ap_const_lv1_1 & loc_V_4_reg_922) & ap_const_lv1_0);
    tmp_i_i_cast_i1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_5_fu_341_p4),12));
    tmp_i_i_cast_i2_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_7_fu_394_p4),12));
    tmp_i_i_cast_i9_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_3_fu_288_p4),12));
    tmp_i_i_cast_i_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_227_p4),12));
    tmp_i_i_fu_444_p4 <= ((ap_const_lv1_1 & loc_V_2_reg_902) & ap_const_lv1_0);
    tmp_s_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_545_p3),31));
end behav;
