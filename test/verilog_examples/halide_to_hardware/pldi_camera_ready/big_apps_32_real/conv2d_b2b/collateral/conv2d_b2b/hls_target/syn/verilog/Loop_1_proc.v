// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        p_mul_stencil_update_stream_V_value_V_din,
        p_mul_stencil_update_stream_V_value_V_full_n,
        p_mul_stencil_update_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [287:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [31:0] p_mul_stencil_update_stream_V_value_V_din;
input   p_mul_stencil_update_stream_V_value_V_full_n;
output   p_mul_stencil_update_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg p_hw_input_stencil_stream_V_value_V_read;
reg p_mul_stencil_update_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_287;
reg    p_mul_stencil_update_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_287;
reg   [20:0] indvar_flatten_reg_105;
wire   [0:0] exitcond_flatten_fu_116_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_287;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_287;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_287;
wire   [20:0] indvar_flatten_next_fu_122_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] p_327_fu_128_p1;
reg   [31:0] p_327_reg_296;
reg   [31:0] p_339_reg_301;
reg   [31:0] ap_reg_pp0_iter2_p_339_reg_301;
reg   [31:0] p_363_reg_306;
reg   [31:0] p_375_reg_311;
reg   [30:0] tmp_s_reg_316;
reg   [30:0] tmp_11_reg_321;
reg   [30:0] ap_reg_pp0_iter2_tmp_11_reg_321;
reg   [29:0] tmp_12_reg_326;
reg   [30:0] tmp_13_reg_331;
reg   [30:0] tmp_14_reg_336;
wire   [31:0] tmp2_fu_240_p2;
reg   [31:0] tmp2_reg_341;
wire   [31:0] tmp5_fu_245_p2;
reg   [31:0] tmp5_reg_346;
reg   [31:0] ap_reg_pp0_iter3_tmp5_reg_346;
wire   [31:0] tmp6_fu_256_p2;
reg   [31:0] tmp6_reg_351;
reg   [31:0] ap_reg_pp0_iter3_tmp6_reg_351;
wire   [31:0] tmp1_fu_273_p2;
reg   [31:0] tmp1_reg_356;
wire   [31:0] p_379_fu_282_p2;
reg   [31:0] p_379_reg_361;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_flag00001001;
wire   [31:0] p_336_fu_212_p3;
wire   [31:0] p_360_fu_226_p3;
wire   [31:0] p_354_fu_219_p3;
wire   [31:0] p_372_fu_233_p3;
wire   [31:0] tmp7_fu_251_p2;
wire   [31:0] p_348_fu_261_p3;
wire   [31:0] tmp3_fu_268_p2;
wire   [31:0] tmp4_fu_278_p2;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_116_p2))) begin
        indvar_flatten_reg_105 <= indvar_flatten_next_fu_122_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_105 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_287 <= exitcond_flatten_reg_287;
        exitcond_flatten_reg_287 <= exitcond_flatten_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_287 <= ap_reg_pp0_iter1_exitcond_flatten_reg_287;
        ap_reg_pp0_iter2_p_339_reg_301 <= p_339_reg_301;
        ap_reg_pp0_iter2_tmp_11_reg_321 <= tmp_11_reg_321;
        ap_reg_pp0_iter3_exitcond_flatten_reg_287 <= ap_reg_pp0_iter2_exitcond_flatten_reg_287;
        ap_reg_pp0_iter3_tmp5_reg_346[31 : 1] <= tmp5_reg_346[31 : 1];
        ap_reg_pp0_iter3_tmp6_reg_351 <= tmp6_reg_351;
        ap_reg_pp0_iter4_exitcond_flatten_reg_287 <= ap_reg_pp0_iter3_exitcond_flatten_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_287 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_327_reg_296 <= p_327_fu_128_p1;
        p_339_reg_301 <= {{p_hw_input_stencil_stream_V_value_V_dout[95:64]}};
        p_363_reg_306 <= {{p_hw_input_stencil_stream_V_value_V_dout[223:192]}};
        p_375_reg_311 <= {{p_hw_input_stencil_stream_V_value_V_dout[287:256]}};
        tmp_11_reg_321 <= {{p_hw_input_stencil_stream_V_value_V_dout[126:96]}};
        tmp_12_reg_326 <= {{p_hw_input_stencil_stream_V_value_V_dout[157:128]}};
        tmp_13_reg_331 <= {{p_hw_input_stencil_stream_V_value_V_dout[190:160]}};
        tmp_14_reg_336 <= {{p_hw_input_stencil_stream_V_value_V_dout[254:224]}};
        tmp_s_reg_316 <= {{p_hw_input_stencil_stream_V_value_V_dout[62:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_287))) begin
        p_379_reg_361 <= p_379_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_287))) begin
        tmp1_reg_356 <= tmp1_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_287))) begin
        tmp2_reg_341 <= tmp2_fu_240_p2;
        tmp5_reg_346[31 : 1] <= tmp5_fu_245_p2[31 : 1];
        tmp6_reg_351 <= tmp6_fu_256_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_116_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_287 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287))) begin
        p_mul_stencil_update_stream_V_value_V_blk_n = p_mul_stencil_update_stream_V_value_V_full_n;
    end else begin
        p_mul_stencil_update_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_mul_stencil_update_stream_V_value_V_write = 1'b1;
    end else begin
        p_mul_stencil_update_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_116_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter5) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_116_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_287 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_287) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_116_p2 = ((indvar_flatten_reg_105 == 21'd2067604) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_122_p2 = (indvar_flatten_reg_105 + 21'd1);

assign p_327_fu_128_p1 = p_hw_input_stencil_stream_V_value_V_dout[31:0];

assign p_336_fu_212_p3 = {{tmp_s_reg_316}, {1'd0}};

assign p_348_fu_261_p3 = {{ap_reg_pp0_iter2_tmp_11_reg_321}, {1'd0}};

assign p_354_fu_219_p3 = {{tmp_12_reg_326}, {2'd0}};

assign p_360_fu_226_p3 = {{tmp_13_reg_331}, {1'd0}};

assign p_372_fu_233_p3 = {{tmp_14_reg_336}, {1'd0}};

assign p_379_fu_282_p2 = (tmp1_reg_356 + tmp4_fu_278_p2);

assign p_mul_stencil_update_stream_V_value_V_din = p_379_reg_361;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp1_fu_273_p2 = (tmp2_reg_341 + tmp3_fu_268_p2);

assign tmp2_fu_240_p2 = (p_327_reg_296 + p_336_fu_212_p3);

assign tmp3_fu_268_p2 = (p_348_fu_261_p3 + ap_reg_pp0_iter2_p_339_reg_301);

assign tmp4_fu_278_p2 = (ap_reg_pp0_iter3_tmp5_reg_346 + ap_reg_pp0_iter3_tmp6_reg_351);

assign tmp5_fu_245_p2 = (p_360_fu_226_p3 + p_354_fu_219_p3);

assign tmp6_fu_256_p2 = (p_363_reg_306 + tmp7_fu_251_p2);

assign tmp7_fu_251_p2 = (p_375_reg_311 + p_372_fu_233_p3);

always @ (posedge ap_clk) begin
    tmp5_reg_346[0] <= 1'b0;
    ap_reg_pp0_iter3_tmp5_reg_346[0] <= 1'b0;
end

endmodule //Loop_1_proc
