-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linebuffer_1 is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_axi_stream_V_value_V : IN STD_LOGIC_VECTOR (31 downto 0);
    in_axi_stream_V_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_V_value_V_din : OUT STD_LOGIC_VECTOR (287 downto 0);
    out_stream_V_value_V_full_n : IN STD_LOGIC;
    out_stream_V_value_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_axi_stream_V_value_V_ap_vld : IN STD_LOGIC;
    in_axi_stream_V_value_V_ap_ack : OUT STD_LOGIC;
    in_axi_stream_V_last_V_ap_vld : IN STD_LOGIC;
    in_axi_stream_V_last_V_ap_ack : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of linebuffer_1 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal linebuffer_Loop_1_pr_U0_ap_start : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_start_full_n : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_ap_ready : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_ap_done : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_ap_continue : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_ap_idle : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_start_out : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_start_write : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack : STD_LOGIC;
    signal linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write : STD_LOGIC;
    signal linebuffer_U0_in_stream_V_value_V_read : STD_LOGIC;
    signal linebuffer_U0_out_stream_V_value_V_din : STD_LOGIC_VECTOR (287 downto 0);
    signal linebuffer_U0_out_stream_V_value_V_write : STD_LOGIC;
    signal linebuffer_U0_ap_done : STD_LOGIC;
    signal linebuffer_U0_ap_start : STD_LOGIC;
    signal linebuffer_U0_ap_ready : STD_LOGIC;
    signal linebuffer_U0_ap_idle : STD_LOGIC;
    signal linebuffer_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal in_stream_V_value_V_full_n : STD_LOGIC;
    signal in_stream_V_value_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_value_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_linebuffer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_linebuffer_U0_full_n : STD_LOGIC;
    signal start_for_linebuffer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_linebuffer_U0_empty_n : STD_LOGIC;
    signal linebuffer_U0_start_full_n : STD_LOGIC;
    signal linebuffer_U0_start_write : STD_LOGIC;

    component linebuffer_Loop_1_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_axi_stream_V_value_V : IN STD_LOGIC_VECTOR (31 downto 0);
        in_axi_stream_V_value_V_ap_vld : IN STD_LOGIC;
        in_axi_stream_V_value_V_ap_ack : OUT STD_LOGIC;
        in_axi_stream_V_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
        in_axi_stream_V_last_V_ap_vld : IN STD_LOGIC;
        in_axi_stream_V_last_V_ap_ack : OUT STD_LOGIC;
        in_stream_V_value_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_stream_V_value_V_full_n : IN STD_LOGIC;
        in_stream_V_value_V_write : OUT STD_LOGIC );
    end component;


    component linebuffer IS
    port (
        in_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_V_value_V_empty_n : IN STD_LOGIC;
        in_stream_V_value_V_read : OUT STD_LOGIC;
        out_stream_V_value_V_din : OUT STD_LOGIC_VECTOR (287 downto 0);
        out_stream_V_value_V_full_n : IN STD_LOGIC;
        out_stream_V_value_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fifo_w32_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_linebufeOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    linebuffer_Loop_1_pr_U0 : component linebuffer_Loop_1_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => linebuffer_Loop_1_pr_U0_ap_start,
        start_full_n => linebuffer_Loop_1_pr_U0_start_full_n,
        ap_ready => linebuffer_Loop_1_pr_U0_ap_ready,
        ap_done => linebuffer_Loop_1_pr_U0_ap_done,
        ap_continue => linebuffer_Loop_1_pr_U0_ap_continue,
        ap_idle => linebuffer_Loop_1_pr_U0_ap_idle,
        start_out => linebuffer_Loop_1_pr_U0_start_out,
        start_write => linebuffer_Loop_1_pr_U0_start_write,
        in_axi_stream_V_value_V => in_axi_stream_V_value_V,
        in_axi_stream_V_value_V_ap_vld => in_axi_stream_V_value_V_ap_vld,
        in_axi_stream_V_value_V_ap_ack => linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack,
        in_axi_stream_V_last_V => in_axi_stream_V_last_V,
        in_axi_stream_V_last_V_ap_vld => in_axi_stream_V_last_V_ap_vld,
        in_axi_stream_V_last_V_ap_ack => linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack,
        in_stream_V_value_V_din => linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din,
        in_stream_V_value_V_full_n => in_stream_V_value_V_full_n,
        in_stream_V_value_V_write => linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write);

    linebuffer_U0 : component linebuffer
    port map (
        in_stream_V_value_V_dout => in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n => in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read => linebuffer_U0_in_stream_V_value_V_read,
        out_stream_V_value_V_din => linebuffer_U0_out_stream_V_value_V_din,
        out_stream_V_value_V_full_n => out_stream_V_value_V_full_n,
        out_stream_V_value_V_write => linebuffer_U0_out_stream_V_value_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_done => linebuffer_U0_ap_done,
        ap_start => linebuffer_U0_ap_start,
        ap_ready => linebuffer_U0_ap_ready,
        ap_idle => linebuffer_U0_ap_idle,
        ap_continue => linebuffer_U0_ap_continue);

    in_stream_V_value_V_U : component fifo_w32_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din,
        if_full_n => in_stream_V_value_V_full_n,
        if_write => linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write,
        if_dout => in_stream_V_value_V_dout,
        if_empty_n => in_stream_V_value_V_empty_n,
        if_read => linebuffer_U0_in_stream_V_value_V_read);

    start_for_linebufeOg_U : component start_for_linebufeOg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_linebuffer_U0_din,
        if_full_n => start_for_linebuffer_U0_full_n,
        if_write => linebuffer_Loop_1_pr_U0_start_write,
        if_dout => start_for_linebuffer_U0_dout,
        if_empty_n => start_for_linebuffer_U0_empty_n,
        if_read => linebuffer_U0_ap_ready);





    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((start_full_n = ap_const_logic_0) and (internal_ap_ready = ap_const_logic_1))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and ((internal_ap_ready = ap_const_logic_1) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((real_start = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_start = ap_const_logic_0)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= linebuffer_U0_ap_done;
    ap_idle <= (linebuffer_Loop_1_pr_U0_ap_idle and linebuffer_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= linebuffer_U0_ap_done;
    ap_sync_ready <= linebuffer_Loop_1_pr_U0_ap_ready;
    in_axi_stream_V_last_V_ap_ack <= linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack;
    in_axi_stream_V_value_V_ap_ack <= linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack;
    internal_ap_ready <= ap_sync_ready;
    linebuffer_Loop_1_pr_U0_ap_continue <= ap_const_logic_1;
    linebuffer_Loop_1_pr_U0_ap_start <= real_start;
    linebuffer_Loop_1_pr_U0_start_full_n <= (ap_const_logic_0 or start_for_linebuffer_U0_full_n);
    linebuffer_U0_ap_continue <= ap_continue;
    linebuffer_U0_ap_start <= start_for_linebuffer_U0_empty_n;
    linebuffer_U0_start_full_n <= ap_const_logic_0;
    linebuffer_U0_start_write <= ap_const_logic_0;
    out_stream_V_value_V_din <= linebuffer_U0_out_stream_V_value_V_din;
    out_stream_V_value_V_write <= linebuffer_U0_out_stream_V_value_V_write;

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((real_start_status_reg = ap_const_logic_1)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_for_linebuffer_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
end behav;
