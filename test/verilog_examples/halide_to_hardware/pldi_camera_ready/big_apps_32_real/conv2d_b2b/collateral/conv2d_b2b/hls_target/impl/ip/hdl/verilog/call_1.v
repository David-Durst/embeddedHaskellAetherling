// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call_1 (
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [127:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    call_Loop_LB2D_buf_p_1_U0_ap_start;
wire    call_Loop_LB2D_buf_p_1_U0_start_full_n;
wire    call_Loop_LB2D_buf_p_1_U0_ap_ready;
wire    call_Loop_LB2D_buf_p_1_U0_ap_done;
wire    call_Loop_LB2D_buf_p_1_U0_ap_continue;
wire    call_Loop_LB2D_buf_p_1_U0_ap_idle;
wire    call_Loop_LB2D_buf_p_1_U0_start_out;
wire    call_Loop_LB2D_buf_p_1_U0_start_write;
wire    call_Loop_LB2D_buf_p_1_U0_in_stream_V_value_V_read;
wire   [63:0] call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_din;
wire    call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_write;
wire    call_Loop_LB2D_shift_1_U0_ap_start;
wire    call_Loop_LB2D_shift_1_U0_ap_done;
wire    call_Loop_LB2D_shift_1_U0_ap_continue;
wire    call_Loop_LB2D_shift_1_U0_ap_idle;
wire    call_Loop_LB2D_shift_1_U0_ap_ready;
wire    call_Loop_LB2D_shift_1_U0_slice_stream_V_value_V_read;
wire   [127:0] call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_din;
wire    call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_write;
wire    ap_sync_continue;
wire    slice_stream_V_value_full_n;
wire   [63:0] slice_stream_V_value_dout;
wire    slice_stream_V_value_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_call_Loop_LB2D_shift_1_U0_din;
wire    start_for_call_Loop_LB2D_shift_1_U0_full_n;
wire   [0:0] start_for_call_Loop_LB2D_shift_1_U0_dout;
wire    start_for_call_Loop_LB2D_shift_1_U0_empty_n;
wire    call_Loop_LB2D_shift_1_U0_start_full_n;
wire    call_Loop_LB2D_shift_1_U0_start_write;

call_Loop_LB2D_buf_p_1 call_Loop_LB2D_buf_p_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_Loop_LB2D_buf_p_1_U0_ap_start),
    .start_full_n(call_Loop_LB2D_buf_p_1_U0_start_full_n),
    .ap_ready(call_Loop_LB2D_buf_p_1_U0_ap_ready),
    .ap_done(call_Loop_LB2D_buf_p_1_U0_ap_done),
    .ap_continue(call_Loop_LB2D_buf_p_1_U0_ap_continue),
    .ap_idle(call_Loop_LB2D_buf_p_1_U0_ap_idle),
    .start_out(call_Loop_LB2D_buf_p_1_U0_start_out),
    .start_write(call_Loop_LB2D_buf_p_1_U0_start_write),
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(call_Loop_LB2D_buf_p_1_U0_in_stream_V_value_V_read),
    .slice_stream_V_value_V_din(call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_din),
    .slice_stream_V_value_V_full_n(slice_stream_V_value_full_n),
    .slice_stream_V_value_V_write(call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_write)
);

call_Loop_LB2D_shift_1 call_Loop_LB2D_shift_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_Loop_LB2D_shift_1_U0_ap_start),
    .ap_done(call_Loop_LB2D_shift_1_U0_ap_done),
    .ap_continue(call_Loop_LB2D_shift_1_U0_ap_continue),
    .ap_idle(call_Loop_LB2D_shift_1_U0_ap_idle),
    .ap_ready(call_Loop_LB2D_shift_1_U0_ap_ready),
    .slice_stream_V_value_V_dout(slice_stream_V_value_dout),
    .slice_stream_V_value_V_empty_n(slice_stream_V_value_empty_n),
    .slice_stream_V_value_V_read(call_Loop_LB2D_shift_1_U0_slice_stream_V_value_V_read),
    .out_stream_V_value_V_din(call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_write)
);

fifo_w64_d1_S slice_stream_V_value_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_din),
    .if_full_n(slice_stream_V_value_full_n),
    .if_write(call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_write),
    .if_dout(slice_stream_V_value_dout),
    .if_empty_n(slice_stream_V_value_empty_n),
    .if_read(call_Loop_LB2D_shift_1_U0_slice_stream_V_value_V_read)
);

start_for_call_Log8j start_for_call_Log8j_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_call_Loop_LB2D_shift_1_U0_din),
    .if_full_n(start_for_call_Loop_LB2D_shift_1_U0_full_n),
    .if_write(call_Loop_LB2D_buf_p_1_U0_start_write),
    .if_dout(start_for_call_Loop_LB2D_shift_1_U0_dout),
    .if_empty_n(start_for_call_Loop_LB2D_shift_1_U0_empty_n),
    .if_read(call_Loop_LB2D_shift_1_U0_ap_ready)
);

assign ap_done = call_Loop_LB2D_shift_1_U0_ap_done;

assign ap_idle = (call_Loop_LB2D_buf_p_1_U0_ap_idle & call_Loop_LB2D_shift_1_U0_ap_idle);

assign ap_ready = call_Loop_LB2D_buf_p_1_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = call_Loop_LB2D_shift_1_U0_ap_done;

assign ap_sync_ready = call_Loop_LB2D_buf_p_1_U0_ap_ready;

assign call_Loop_LB2D_buf_p_1_U0_ap_continue = 1'b1;

assign call_Loop_LB2D_buf_p_1_U0_ap_start = ap_start;

assign call_Loop_LB2D_buf_p_1_U0_start_full_n = (1'b0 | start_for_call_Loop_LB2D_shift_1_U0_full_n);

assign call_Loop_LB2D_shift_1_U0_ap_continue = ap_continue;

assign call_Loop_LB2D_shift_1_U0_ap_start = start_for_call_Loop_LB2D_shift_1_U0_empty_n;

assign call_Loop_LB2D_shift_1_U0_start_full_n = 1'b0;

assign call_Loop_LB2D_shift_1_U0_start_write = 1'b0;

assign in_stream_V_value_V_read = call_Loop_LB2D_buf_p_1_U0_in_stream_V_value_V_read;

assign out_stream_V_value_V_din = call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_write;

assign start_for_call_Loop_LB2D_shift_1_U0_din = 1'b1;

endmodule //call_1
