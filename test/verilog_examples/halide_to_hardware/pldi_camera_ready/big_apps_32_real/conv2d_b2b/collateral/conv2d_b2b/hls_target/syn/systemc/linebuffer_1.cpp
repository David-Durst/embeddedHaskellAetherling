// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "linebuffer_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic linebuffer_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic linebuffer_1::ap_const_logic_1 = sc_dt::Log_1;
const bool linebuffer_1::ap_const_boolean_1 = true;
const sc_lv<288> linebuffer_1::ap_const_lv288_lc_1 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

linebuffer_1::linebuffer_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    linebuffer_Loop_1_pr_U0 = new linebuffer_Loop_1_pr("linebuffer_Loop_1_pr_U0");
    linebuffer_Loop_1_pr_U0->ap_clk(ap_clk);
    linebuffer_Loop_1_pr_U0->ap_rst(ap_rst);
    linebuffer_Loop_1_pr_U0->ap_start(linebuffer_Loop_1_pr_U0_ap_start);
    linebuffer_Loop_1_pr_U0->start_full_n(linebuffer_Loop_1_pr_U0_start_full_n);
    linebuffer_Loop_1_pr_U0->ap_ready(linebuffer_Loop_1_pr_U0_ap_ready);
    linebuffer_Loop_1_pr_U0->ap_done(linebuffer_Loop_1_pr_U0_ap_done);
    linebuffer_Loop_1_pr_U0->ap_continue(linebuffer_Loop_1_pr_U0_ap_continue);
    linebuffer_Loop_1_pr_U0->ap_idle(linebuffer_Loop_1_pr_U0_ap_idle);
    linebuffer_Loop_1_pr_U0->start_out(linebuffer_Loop_1_pr_U0_start_out);
    linebuffer_Loop_1_pr_U0->start_write(linebuffer_Loop_1_pr_U0_start_write);
    linebuffer_Loop_1_pr_U0->in_axi_stream_V_value_V(in_axi_stream_V_value_V);
    linebuffer_Loop_1_pr_U0->in_axi_stream_V_value_V_ap_vld(in_axi_stream_V_value_V_ap_vld);
    linebuffer_Loop_1_pr_U0->in_axi_stream_V_value_V_ap_ack(linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack);
    linebuffer_Loop_1_pr_U0->in_axi_stream_V_last_V(in_axi_stream_V_last_V);
    linebuffer_Loop_1_pr_U0->in_axi_stream_V_last_V_ap_vld(in_axi_stream_V_last_V_ap_vld);
    linebuffer_Loop_1_pr_U0->in_axi_stream_V_last_V_ap_ack(linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack);
    linebuffer_Loop_1_pr_U0->in_stream_V_value_V_din(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din);
    linebuffer_Loop_1_pr_U0->in_stream_V_value_V_full_n(in_stream_V_value_V_full_n);
    linebuffer_Loop_1_pr_U0->in_stream_V_value_V_write(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write);
    linebuffer_U0 = new linebuffer("linebuffer_U0");
    linebuffer_U0->in_stream_V_value_V_dout(in_stream_V_value_V_dout);
    linebuffer_U0->in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n);
    linebuffer_U0->in_stream_V_value_V_read(linebuffer_U0_in_stream_V_value_V_read);
    linebuffer_U0->out_stream_V_value_V_din(linebuffer_U0_out_stream_V_value_V_din);
    linebuffer_U0->out_stream_V_value_V_full_n(out_stream_V_value_V_full_n);
    linebuffer_U0->out_stream_V_value_V_write(linebuffer_U0_out_stream_V_value_V_write);
    linebuffer_U0->ap_clk(ap_clk);
    linebuffer_U0->ap_rst(ap_rst);
    linebuffer_U0->ap_done(linebuffer_U0_ap_done);
    linebuffer_U0->ap_start(linebuffer_U0_ap_start);
    linebuffer_U0->ap_ready(linebuffer_U0_ap_ready);
    linebuffer_U0->ap_idle(linebuffer_U0_ap_idle);
    linebuffer_U0->ap_continue(linebuffer_U0_ap_continue);
    in_stream_V_value_V_U = new fifo_w32_d1_S("in_stream_V_value_V_U");
    in_stream_V_value_V_U->clk(ap_clk);
    in_stream_V_value_V_U->reset(ap_rst);
    in_stream_V_value_V_U->if_read_ce(ap_var_for_const0);
    in_stream_V_value_V_U->if_write_ce(ap_var_for_const0);
    in_stream_V_value_V_U->if_din(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din);
    in_stream_V_value_V_U->if_full_n(in_stream_V_value_V_full_n);
    in_stream_V_value_V_U->if_write(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write);
    in_stream_V_value_V_U->if_dout(in_stream_V_value_V_dout);
    in_stream_V_value_V_U->if_empty_n(in_stream_V_value_V_empty_n);
    in_stream_V_value_V_U->if_read(linebuffer_U0_in_stream_V_value_V_read);
    start_for_linebufeOg_U = new start_for_linebufeOg("start_for_linebufeOg_U");
    start_for_linebufeOg_U->clk(ap_clk);
    start_for_linebufeOg_U->reset(ap_rst);
    start_for_linebufeOg_U->if_read_ce(ap_var_for_const0);
    start_for_linebufeOg_U->if_write_ce(ap_var_for_const0);
    start_for_linebufeOg_U->if_din(start_for_linebuffer_U0_din);
    start_for_linebufeOg_U->if_full_n(start_for_linebuffer_U0_full_n);
    start_for_linebufeOg_U->if_write(linebuffer_Loop_1_pr_U0_start_write);
    start_for_linebufeOg_U->if_dout(start_for_linebuffer_U0_dout);
    start_for_linebufeOg_U->if_empty_n(start_for_linebuffer_U0_empty_n);
    start_for_linebufeOg_U->if_read(linebuffer_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( linebuffer_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( linebuffer_Loop_1_pr_U0_ap_idle );
    sensitive << ( linebuffer_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( linebuffer_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( linebuffer_Loop_1_pr_U0_ap_ready );

    SC_METHOD(thread_in_axi_stream_V_last_V_ap_ack);
    sensitive << ( linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack );

    SC_METHOD(thread_in_axi_stream_V_value_V_ap_ack);
    sensitive << ( linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_linebuffer_Loop_1_pr_U0_ap_continue);

    SC_METHOD(thread_linebuffer_Loop_1_pr_U0_ap_start);
    sensitive << ( real_start );

    SC_METHOD(thread_linebuffer_Loop_1_pr_U0_start_full_n);
    sensitive << ( start_for_linebuffer_U0_full_n );

    SC_METHOD(thread_linebuffer_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_linebuffer_U0_ap_start);
    sensitive << ( start_for_linebuffer_U0_empty_n );

    SC_METHOD(thread_linebuffer_U0_start_full_n);

    SC_METHOD(thread_linebuffer_U0_start_write);

    SC_METHOD(thread_out_stream_V_value_V_din);
    sensitive << ( linebuffer_U0_out_stream_V_value_V_din );

    SC_METHOD(thread_out_stream_V_value_V_write);
    sensitive << ( linebuffer_U0_out_stream_V_value_V_write );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( real_start_status_reg );

    SC_METHOD(thread_start_for_linebuffer_U0_din);

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( ap_start );
    sensitive << ( start_control_reg );

    SC_THREAD(thread_ap_var_for_const0);

    real_start_status_reg = SC_LOGIC_0;
    start_once_reg = SC_LOGIC_0;
    start_control_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "linebuffer_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_axi_stream_V_value_V, "(port)in_axi_stream_V_value_V");
    sc_trace(mVcdFile, in_axi_stream_V_last_V, "(port)in_axi_stream_V_last_V");
    sc_trace(mVcdFile, out_stream_V_value_V_din, "(port)out_stream_V_value_V_din");
    sc_trace(mVcdFile, out_stream_V_value_V_full_n, "(port)out_stream_V_value_V_full_n");
    sc_trace(mVcdFile, out_stream_V_value_V_write, "(port)out_stream_V_value_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, in_axi_stream_V_value_V_ap_vld, "(port)in_axi_stream_V_value_V_ap_vld");
    sc_trace(mVcdFile, in_axi_stream_V_value_V_ap_ack, "(port)in_axi_stream_V_value_V_ap_ack");
    sc_trace(mVcdFile, in_axi_stream_V_last_V_ap_vld, "(port)in_axi_stream_V_last_V_ap_vld");
    sc_trace(mVcdFile, in_axi_stream_V_last_V_ap_ack, "(port)in_axi_stream_V_last_V_ap_ack");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, real_start_status_reg, "real_start_status_reg");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, start_control_reg, "start_control_reg");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_ap_start, "linebuffer_Loop_1_pr_U0_ap_start");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_start_full_n, "linebuffer_Loop_1_pr_U0_start_full_n");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_ap_ready, "linebuffer_Loop_1_pr_U0_ap_ready");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_ap_done, "linebuffer_Loop_1_pr_U0_ap_done");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_ap_continue, "linebuffer_Loop_1_pr_U0_ap_continue");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_ap_idle, "linebuffer_Loop_1_pr_U0_ap_idle");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_start_out, "linebuffer_Loop_1_pr_U0_start_out");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_start_write, "linebuffer_Loop_1_pr_U0_start_write");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack, "linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack, "linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din, "linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din");
    sc_trace(mVcdFile, linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write, "linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write");
    sc_trace(mVcdFile, linebuffer_U0_in_stream_V_value_V_read, "linebuffer_U0_in_stream_V_value_V_read");
    sc_trace(mVcdFile, linebuffer_U0_out_stream_V_value_V_din, "linebuffer_U0_out_stream_V_value_V_din");
    sc_trace(mVcdFile, linebuffer_U0_out_stream_V_value_V_write, "linebuffer_U0_out_stream_V_value_V_write");
    sc_trace(mVcdFile, linebuffer_U0_ap_done, "linebuffer_U0_ap_done");
    sc_trace(mVcdFile, linebuffer_U0_ap_start, "linebuffer_U0_ap_start");
    sc_trace(mVcdFile, linebuffer_U0_ap_ready, "linebuffer_U0_ap_ready");
    sc_trace(mVcdFile, linebuffer_U0_ap_idle, "linebuffer_U0_ap_idle");
    sc_trace(mVcdFile, linebuffer_U0_ap_continue, "linebuffer_U0_ap_continue");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, in_stream_V_value_V_full_n, "in_stream_V_value_V_full_n");
    sc_trace(mVcdFile, in_stream_V_value_V_dout, "in_stream_V_value_V_dout");
    sc_trace(mVcdFile, in_stream_V_value_V_empty_n, "in_stream_V_value_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_linebuffer_U0_din, "start_for_linebuffer_U0_din");
    sc_trace(mVcdFile, start_for_linebuffer_U0_full_n, "start_for_linebuffer_U0_full_n");
    sc_trace(mVcdFile, start_for_linebuffer_U0_dout, "start_for_linebuffer_U0_dout");
    sc_trace(mVcdFile, start_for_linebuffer_U0_empty_n, "start_for_linebuffer_U0_empty_n");
    sc_trace(mVcdFile, linebuffer_U0_start_full_n, "linebuffer_U0_start_full_n");
    sc_trace(mVcdFile, linebuffer_U0_start_write, "linebuffer_U0_start_write");
#endif

    }
}

linebuffer_1::~linebuffer_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete linebuffer_Loop_1_pr_U0;
    delete linebuffer_U0;
    delete in_stream_V_value_V_U;
    delete start_for_linebufeOg_U;
}

void linebuffer_1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void linebuffer_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        real_start_status_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(start_full_n.read(), ap_const_logic_1)) {
            real_start_status_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(start_full_n.read(), ap_const_logic_0) && 
                    esl_seteq<1,1,1>(internal_ap_ready.read(), ap_const_logic_1))) {
            real_start_status_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_control_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_1) && 
             (esl_seteq<1,1,1>(internal_ap_ready.read(), ap_const_logic_1) || 
              esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read())))) {
            start_control_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, start_control_reg.read())) {
            start_control_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_1)) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
            start_once_reg = ap_const_logic_0;
        }
    }
}

void linebuffer_1::thread_ap_done() {
    ap_done = linebuffer_U0_ap_done.read();
}

void linebuffer_1::thread_ap_idle() {
    ap_idle = (linebuffer_Loop_1_pr_U0_ap_idle.read() & linebuffer_U0_ap_idle.read());
}

void linebuffer_1::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void linebuffer_1::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void linebuffer_1::thread_ap_sync_done() {
    ap_sync_done = linebuffer_U0_ap_done.read();
}

void linebuffer_1::thread_ap_sync_ready() {
    ap_sync_ready = linebuffer_Loop_1_pr_U0_ap_ready.read();
}

void linebuffer_1::thread_in_axi_stream_V_last_V_ap_ack() {
    in_axi_stream_V_last_V_ap_ack = linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack.read();
}

void linebuffer_1::thread_in_axi_stream_V_value_V_ap_ack() {
    in_axi_stream_V_value_V_ap_ack = linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack.read();
}

void linebuffer_1::thread_internal_ap_ready() {
    internal_ap_ready = ap_sync_ready.read();
}

void linebuffer_1::thread_linebuffer_Loop_1_pr_U0_ap_continue() {
    linebuffer_Loop_1_pr_U0_ap_continue = ap_const_logic_1;
}

void linebuffer_1::thread_linebuffer_Loop_1_pr_U0_ap_start() {
    linebuffer_Loop_1_pr_U0_ap_start = real_start.read();
}

void linebuffer_1::thread_linebuffer_Loop_1_pr_U0_start_full_n() {
    linebuffer_Loop_1_pr_U0_start_full_n = (ap_const_logic_0 | start_for_linebuffer_U0_full_n.read());
}

void linebuffer_1::thread_linebuffer_U0_ap_continue() {
    linebuffer_U0_ap_continue = ap_continue.read();
}

void linebuffer_1::thread_linebuffer_U0_ap_start() {
    linebuffer_U0_ap_start = start_for_linebuffer_U0_empty_n.read();
}

void linebuffer_1::thread_linebuffer_U0_start_full_n() {
    linebuffer_U0_start_full_n = ap_const_logic_0;
}

void linebuffer_1::thread_linebuffer_U0_start_write() {
    linebuffer_U0_start_write = ap_const_logic_0;
}

void linebuffer_1::thread_out_stream_V_value_V_din() {
    out_stream_V_value_V_din = linebuffer_U0_out_stream_V_value_V_din.read();
}

void linebuffer_1::thread_out_stream_V_value_V_write() {
    out_stream_V_value_V_write = linebuffer_U0_out_stream_V_value_V_write.read();
}

void linebuffer_1::thread_real_start() {
    if (esl_seteq<1,1,1>(real_start_status_reg.read(), ap_const_logic_1)) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void linebuffer_1::thread_start_for_linebuffer_U0_din() {
    start_for_linebuffer_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void linebuffer_1::thread_start_out() {
    start_out = real_start.read();
}

void linebuffer_1::thread_start_write() {
    start_write = (ap_start.read() & start_control_reg.read());
}

}

