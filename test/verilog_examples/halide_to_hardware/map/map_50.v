// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Loop_2_bkb_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Loop_2_bkb (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Loop_2_bkb_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Loop_2_bkb_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        hw_input_V_value_V,
        hw_input_V_value_V_ap_vld,
        hw_input_V_value_V_ap_ack,
        hw_input_V_last_V,
        hw_input_V_last_V_ap_vld,
        hw_input_V_last_V_ap_ack,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_din,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_full_n,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_write,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_din,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_full_n,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [63:0] hw_input_V_value_V;
input   hw_input_V_value_V_ap_vld;
output   hw_input_V_value_V_ap_ack;
input  [0:0] hw_input_V_last_V;
input   hw_input_V_last_V_ap_vld;
output   hw_input_V_last_V_ap_ack;
output  [63:0] p_hw_input_stencil_stream_to_hw_output_V_value_V_din;
input   p_hw_input_stencil_stream_to_hw_output_V_value_V_full_n;
output   p_hw_input_stencil_stream_to_hw_output_V_value_V_write;
output  [0:0] p_hw_input_stencil_stream_to_hw_output_V_last_V_din;
input   p_hw_input_stencil_stream_to_hw_output_V_last_V_full_n;
output   p_hw_input_stencil_stream_to_hw_output_V_last_V_write;

reg ap_done;
reg ap_idle;
reg hw_input_V_value_V_ap_ack;
reg hw_input_V_last_V_ap_ack;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    hw_input_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_flag00000000;
wire   [0:0] tmp_1_i_fu_82_p2;
reg    hw_input_V_last_V_blk_n;
reg    p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_1_i_reg_98;
reg    p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n;
reg   [7:0] p_dim_0_i_reg_71;
reg    ap_block_state2_pp0_stage0_iter0;
wire    p_hw_input_stencil_stream_to_hw_output_V_last_V1_status;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
reg   [63:0] tmp_value_V_reg_102;
wire   [7:0] p_dim_0_1_i_fu_92_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    p_hw_input_stencil_stream_to_hw_output_V_last_V1_update;
reg    ap_block_pp0_stage0_flag00001001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        p_dim_0_i_reg_71 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_i_fu_82_p2 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_dim_0_i_reg_71 <= p_dim_0_1_i_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_1_i_reg_98 <= tmp_1_i_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_i_fu_82_p2 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_value_V_reg_102 <= hw_input_V_value_V;
    end
end

always @ (*) begin
    if ((tmp_1_i_fu_82_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_i_fu_82_p2 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        hw_input_V_last_V_ap_ack = 1'b1;
    end else begin
        hw_input_V_last_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_1_i_fu_82_p2 == 1'd1))) begin
        hw_input_V_last_V_blk_n = hw_input_V_last_V_ap_vld;
    end else begin
        hw_input_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_i_fu_82_p2 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        hw_input_V_value_V_ap_ack = 1'b1;
    end else begin
        hw_input_V_value_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_1_i_fu_82_p2 == 1'd1))) begin
        hw_input_V_value_V_blk_n = hw_input_V_value_V_ap_vld;
    end else begin
        hw_input_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_1_i_reg_98) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V1_update = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_1_i_reg_98))) begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n = p_hw_input_stencil_stream_to_hw_output_V_last_V_full_n;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_1_i_reg_98))) begin
        p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n = p_hw_input_stencil_stream_to_hw_output_V_value_V_full_n;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_1_i_fu_82_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_1_i_fu_82_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_i_fu_82_p2 == 1'd1) & (1'b0 == hw_input_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_1_i_reg_98) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V1_status)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_i_fu_82_p2 == 1'd1) & (1'b0 == hw_input_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_1_i_reg_98) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V1_status)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_i_fu_82_p2 == 1'd1) & (1'b0 == hw_input_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_1_i_reg_98) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V1_status)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_1_i_fu_82_p2 == 1'd1) & (1'b0 == hw_input_V_value_V_ap_vld));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((1'd1 == tmp_1_i_reg_98) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V1_status));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign p_dim_0_1_i_fu_92_p2 = (p_dim_0_i_reg_71 + 8'd8);

assign p_hw_input_stencil_stream_to_hw_output_V_last_V1_status = (p_hw_input_stencil_stream_to_hw_output_V_value_V_full_n & p_hw_input_stencil_stream_to_hw_output_V_last_V_full_n);

assign p_hw_input_stencil_stream_to_hw_output_V_last_V_din = 1'd0;

assign p_hw_input_stencil_stream_to_hw_output_V_last_V_write = p_hw_input_stencil_stream_to_hw_output_V_last_V1_update;

assign p_hw_input_stencil_stream_to_hw_output_V_value_V_din = tmp_value_V_reg_102;

assign p_hw_input_stencil_stream_to_hw_output_V_value_V_write = p_hw_input_stencil_stream_to_hw_output_V_last_V1_update;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp_1_i_fu_82_p2 = ((p_dim_0_i_reg_71 < 8'd193) ? 1'b1 : 1'b0);

endmodule //Loop_1_proc


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_target,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.952333,HLS_SYN_LAT=28,HLS_SYN_TPT=28,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=378,HLS_SYN_LUT=373}" *)

module top (        hw_input_V_value_V,
        hw_input_V_last_V,
        hw_output_V_value_V,
        hw_output_V_last_V,
        ap_clk,
        ap_rst,
        hw_input_V_value_V_ap_vld,
        hw_input_V_value_V_ap_ack,
        hw_input_V_last_V_ap_vld,
        hw_input_V_last_V_ap_ack,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle
);


input  [63:0] hw_input_V_value_V;
input  [0:0] hw_input_V_last_V;
output  [63:0] hw_output_V_value_V;
output  [0:0] hw_output_V_last_V;
input   ap_clk;
input   ap_rst;
input   hw_input_V_value_V_ap_vld;
output   hw_input_V_value_V_ap_ack;
input   hw_input_V_last_V_ap_vld;
output   hw_input_V_last_V_ap_ack;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;

wire    Loop_1_proc_U0_ap_start;
wire    Loop_1_proc_U0_start_full_n;
wire    Loop_1_proc_U0_ap_ready;
wire    Loop_1_proc_U0_ap_done;
wire    Loop_1_proc_U0_ap_continue;
wire    Loop_1_proc_U0_ap_idle;
wire    Loop_1_proc_U0_start_out;
wire    Loop_1_proc_U0_start_write;
wire    Loop_1_proc_U0_hw_input_V_value_V_ap_ack;
wire    Loop_1_proc_U0_hw_input_V_last_V_ap_ack;
wire   [63:0] Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_din;
wire    Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_write;
wire   [0:0] Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_din;
wire    Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_write;
wire    Loop_2_proc_U0_ap_start;
wire    Loop_2_proc_U0_ap_done;
wire    Loop_2_proc_U0_ap_continue;
wire    Loop_2_proc_U0_ap_idle;
wire    Loop_2_proc_U0_ap_ready;
wire    Loop_2_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_read;
wire    Loop_2_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_read;
wire   [63:0] Loop_2_proc_U0_hw_output_V_value_V;
wire    Loop_2_proc_U0_hw_output_V_value_V_ap_vld;
wire   [0:0] Loop_2_proc_U0_hw_output_V_last_V;
wire    Loop_2_proc_U0_hw_output_V_last_V_ap_vld;
wire    ap_sync_continue;
wire    p_hw_input_stencil_st_2_1_full_n;
wire   [63:0] p_hw_input_stencil_st_2_1_dout;
wire    p_hw_input_stencil_st_2_1_empty_n;
wire    p_hw_input_stencil_st_2_full_n;
wire   [0:0] p_hw_input_stencil_st_2_dout;
wire    p_hw_input_stencil_st_2_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_Loop_2_proc_U0_din;
wire    start_for_Loop_2_proc_U0_full_n;
wire   [0:0] start_for_Loop_2_proc_U0_dout;
wire    start_for_Loop_2_proc_U0_empty_n;
wire    Loop_2_proc_U0_start_full_n;
wire    Loop_2_proc_U0_start_write;

Loop_1_proc Loop_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_1_proc_U0_ap_start),
    .start_full_n(Loop_1_proc_U0_start_full_n),
    .ap_ready(Loop_1_proc_U0_ap_ready),
    .ap_done(Loop_1_proc_U0_ap_done),
    .ap_continue(Loop_1_proc_U0_ap_continue),
    .ap_idle(Loop_1_proc_U0_ap_idle),
    .start_out(Loop_1_proc_U0_start_out),
    .start_write(Loop_1_proc_U0_start_write),
    .hw_input_V_value_V(hw_input_V_value_V),
    .hw_input_V_value_V_ap_vld(hw_input_V_value_V_ap_vld),
    .hw_input_V_value_V_ap_ack(Loop_1_proc_U0_hw_input_V_value_V_ap_ack),
    .hw_input_V_last_V(hw_input_V_last_V),
    .hw_input_V_last_V_ap_vld(hw_input_V_last_V_ap_vld),
    .hw_input_V_last_V_ap_ack(Loop_1_proc_U0_hw_input_V_last_V_ap_ack),
    .p_hw_input_stencil_stream_to_hw_output_V_value_V_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_din),
    .p_hw_input_stencil_stream_to_hw_output_V_value_V_full_n(p_hw_input_stencil_st_2_1_full_n),
    .p_hw_input_stencil_stream_to_hw_output_V_value_V_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_write),
    .p_hw_input_stencil_stream_to_hw_output_V_last_V_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_din),
    .p_hw_input_stencil_stream_to_hw_output_V_last_V_full_n(p_hw_input_stencil_st_2_full_n),
    .p_hw_input_stencil_stream_to_hw_output_V_last_V_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_write)
);

Loop_2_proc Loop_2_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_2_proc_U0_ap_start),
    .ap_done(Loop_2_proc_U0_ap_done),
    .ap_continue(Loop_2_proc_U0_ap_continue),
    .ap_idle(Loop_2_proc_U0_ap_idle),
    .ap_ready(Loop_2_proc_U0_ap_ready),
    .p_hw_input_stencil_stream_to_hw_output_V_value_V_dout(p_hw_input_stencil_st_2_1_dout),
    .p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n(p_hw_input_stencil_st_2_1_empty_n),
    .p_hw_input_stencil_stream_to_hw_output_V_value_V_read(Loop_2_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_read),
    .p_hw_input_stencil_stream_to_hw_output_V_last_V_dout(p_hw_input_stencil_st_2_dout),
    .p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n(p_hw_input_stencil_st_2_empty_n),
    .p_hw_input_stencil_stream_to_hw_output_V_last_V_read(Loop_2_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_read),
    .hw_output_V_value_V(Loop_2_proc_U0_hw_output_V_value_V),
    .hw_output_V_value_V_ap_vld(Loop_2_proc_U0_hw_output_V_value_V_ap_vld),
    .hw_output_V_value_V_ap_ack(hw_output_V_value_V_ap_ack),
    .hw_output_V_last_V(Loop_2_proc_U0_hw_output_V_last_V),
    .hw_output_V_last_V_ap_vld(Loop_2_proc_U0_hw_output_V_last_V_ap_vld),
    .hw_output_V_last_V_ap_ack(hw_output_V_last_V_ap_ack)
);

fifo_w64_d1_S p_hw_input_stencil_st_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_din),
    .if_full_n(p_hw_input_stencil_st_2_1_full_n),
    .if_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_write),
    .if_dout(p_hw_input_stencil_st_2_1_dout),
    .if_empty_n(p_hw_input_stencil_st_2_1_empty_n),
    .if_read(Loop_2_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_value_V_read)
);

fifo_w1_d1_S p_hw_input_stencil_st_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_din),
    .if_full_n(p_hw_input_stencil_st_2_full_n),
    .if_write(Loop_1_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_write),
    .if_dout(p_hw_input_stencil_st_2_dout),
    .if_empty_n(p_hw_input_stencil_st_2_empty_n),
    .if_read(Loop_2_proc_U0_p_hw_input_stencil_stream_to_hw_output_V_last_V_read)
);

start_for_Loop_2_bkb start_for_Loop_2_bkb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_2_proc_U0_din),
    .if_full_n(start_for_Loop_2_proc_U0_full_n),
    .if_write(Loop_1_proc_U0_start_write),
    .if_dout(start_for_Loop_2_proc_U0_dout),
    .if_empty_n(start_for_Loop_2_proc_U0_empty_n),
    .if_read(Loop_2_proc_U0_ap_ready)
);

assign Loop_1_proc_U0_ap_continue = 1'b1;

assign Loop_1_proc_U0_ap_start = ap_start;

assign Loop_1_proc_U0_start_full_n = (start_for_Loop_2_proc_U0_full_n | 1'b0);

assign Loop_2_proc_U0_ap_continue = 1'b1;

assign Loop_2_proc_U0_ap_start = start_for_Loop_2_proc_U0_empty_n;

assign Loop_2_proc_U0_start_full_n = 1'b0;

assign Loop_2_proc_U0_start_write = 1'b0;

assign ap_done = Loop_2_proc_U0_ap_done;

assign ap_idle = (Loop_1_proc_U0_ap_idle & Loop_2_proc_U0_ap_idle);

assign ap_ready = Loop_1_proc_U0_ap_ready;

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_2_proc_U0_ap_done;

assign ap_sync_ready = Loop_1_proc_U0_ap_ready;

assign hw_input_V_last_V_ap_ack = Loop_1_proc_U0_hw_input_V_last_V_ap_ack;

assign hw_input_V_value_V_ap_ack = Loop_1_proc_U0_hw_input_V_value_V_ap_ack;

assign hw_output_V_last_V = Loop_2_proc_U0_hw_output_V_last_V;

assign hw_output_V_last_V_ap_vld = Loop_2_proc_U0_hw_output_V_last_V_ap_vld;

assign hw_output_V_value_V = Loop_2_proc_U0_hw_output_V_value_V;

assign hw_output_V_value_V_ap_vld = Loop_2_proc_U0_hw_output_V_value_V_ap_vld;

assign start_for_Loop_2_proc_U0_din = 1'b1;

endmodule //hls_target


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w64_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd64;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w64_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd64;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w64_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w64_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w1_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w1_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w1_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w1_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_dout,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_read,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_dout,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] p_hw_input_stencil_stream_to_hw_output_V_value_V_dout;
input   p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n;
output   p_hw_input_stencil_stream_to_hw_output_V_value_V_read;
input  [0:0] p_hw_input_stencil_stream_to_hw_output_V_last_V_dout;
input   p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n;
output   p_hw_input_stencil_stream_to_hw_output_V_last_V_read;
output  [63:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_reg_278;
reg    p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n;
reg    hw_output_V_value_V_blk_n;
reg    hw_output_V_last_V_blk_n;
reg   [4:0] p_hw_output_x_scan_s_reg_102;
wire   [0:0] exitcond_fu_113_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    p_hw_input_stencil_stream_to_hw_output_V_last_V0_status;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [4:0] p_hw_output_x_scan_1_fu_119_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_125_p2;
reg   [0:0] tmp_last_V_reg_287;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    p_hw_input_stencil_stream_to_hw_output_V_last_V0_update;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [7:0] tmp_fu_135_p1;
wire   [7:0] p_02_0_0_0_0_i_i_0_1_fu_139_p4;
wire   [7:0] p_02_0_0_0_0_i_i_0_2_fu_149_p4;
wire   [7:0] p_02_0_0_0_0_i_i_0_3_fu_159_p4;
wire   [7:0] p_02_0_0_0_0_i_i_0_4_fu_169_p4;
wire   [7:0] p_02_0_0_0_0_i_i_0_5_fu_179_p4;
wire   [7:0] p_02_0_0_0_0_i_i_0_6_fu_189_p4;
wire   [7:0] p_02_0_0_0_0_i_i_0_7_fu_199_p4;
wire   [7:0] p_7_fu_251_p2;
wire   [7:0] p_6_fu_245_p2;
wire   [7:0] p_5_fu_239_p2;
wire   [7:0] p_4_fu_233_p2;
wire   [7:0] p_3_fu_227_p2;
wire   [7:0] p_2_fu_221_p2;
wire   [7:0] p_1_fu_215_p2;
wire   [7:0] p_s_fu_209_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_278;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if ((ap_condition_278 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if ((ap_condition_278 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_s_reg_102 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_113_p2))) begin
        p_hw_output_x_scan_s_reg_102 <= p_hw_output_x_scan_1_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_reg_278 <= exitcond_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_fu_113_p2))) begin
        tmp_last_V_reg_287 <= tmp_last_V_fu_125_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_113_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_278 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_278 == 1'd0))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_278 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_278 == 1'd0))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_278 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V0_update = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_278 == 1'd0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n = p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_278 == 1'd0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n = p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_113_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_113_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_278 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_reg_278 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status)) | (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_reg_278 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status)) | (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((exitcond_reg_278 == 1'd0) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_reg_278 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status));
end

always @ (*) begin
    ap_condition_278 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_278 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_fu_113_p2 = ((p_hw_output_x_scan_s_reg_102 == 5'd25) ? 1'b1 : 1'b0);

assign hw_output_V_last_V = tmp_last_V_reg_287;

assign hw_output_V_value_V = {{{{{{{{p_7_fu_251_p2}, {p_6_fu_245_p2}}, {p_5_fu_239_p2}}, {p_4_fu_233_p2}}, {p_3_fu_227_p2}}, {p_2_fu_221_p2}}, {p_1_fu_215_p2}}, {p_s_fu_209_p2}};

assign p_02_0_0_0_0_i_i_0_1_fu_139_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[15:8]}};

assign p_02_0_0_0_0_i_i_0_2_fu_149_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[23:16]}};

assign p_02_0_0_0_0_i_i_0_3_fu_159_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[31:24]}};

assign p_02_0_0_0_0_i_i_0_4_fu_169_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[39:32]}};

assign p_02_0_0_0_0_i_i_0_5_fu_179_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[47:40]}};

assign p_02_0_0_0_0_i_i_0_6_fu_189_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[55:48]}};

assign p_02_0_0_0_0_i_i_0_7_fu_199_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[63:56]}};

assign p_1_fu_215_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_1_fu_139_p4);

assign p_2_fu_221_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_2_fu_149_p4);

assign p_3_fu_227_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_3_fu_159_p4);

assign p_4_fu_233_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_4_fu_169_p4);

assign p_5_fu_239_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_5_fu_179_p4);

assign p_6_fu_245_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_6_fu_189_p4);

assign p_7_fu_251_p2 = (8'd5 + p_02_0_0_0_0_i_i_0_7_fu_199_p4);

assign p_hw_input_stencil_stream_to_hw_output_V_last_V0_status = (p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n & p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n);

assign p_hw_input_stencil_stream_to_hw_output_V_last_V_read = p_hw_input_stencil_stream_to_hw_output_V_last_V0_update;

assign p_hw_input_stencil_stream_to_hw_output_V_value_V_read = p_hw_input_stencil_stream_to_hw_output_V_last_V0_update;

assign p_hw_output_x_scan_1_fu_119_p2 = (p_hw_output_x_scan_s_reg_102 + 5'd1);

assign p_s_fu_209_p2 = (8'd5 + tmp_fu_135_p1);

assign tmp_fu_135_p1 = p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[7:0];

assign tmp_last_V_fu_125_p2 = ((p_hw_output_x_scan_s_reg_102 == 5'd24) ? 1'b1 : 1'b0);

endmodule //Loop_2_proc


