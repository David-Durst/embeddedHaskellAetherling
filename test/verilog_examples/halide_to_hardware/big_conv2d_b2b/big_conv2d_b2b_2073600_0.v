// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call_Loop_LB2D_buf_p (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        slice_stream_V_value_V_din,
        slice_stream_V_value_V_full_n,
        slice_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [7:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [23:0] slice_stream_V_value_V_din;
input   slice_stream_V_value_V_full_n;
output   slice_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg in_stream_V_value_V_read;
reg slice_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    in_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] tmp_2_reg_305;
reg   [0:0] ap_reg_pp0_iter1_tmp_2_reg_305;
reg    slice_stream_V_value_V_blk_n;
reg   [0:0] icmp_reg_301;
reg   [63:0] write_idx_1_1_reg_154;
reg   [2:0] col_reg_165;
wire   [0:0] tmp_fu_176_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] row_1_fu_182_p2;
reg   [2:0] row_1_reg_296;
wire   [0:0] icmp_fu_198_p2;
wire   [0:0] tmp_2_fu_204_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
wire   [2:0] col_1_fu_210_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp1_fu_234_p2;
reg   [0:0] icmp1_reg_314;
reg   [1:0] buffer_0_value_V_ad_reg_329;
reg   [1:0] ap_reg_pp0_iter1_buffer_0_value_V_ad_reg_329;
reg   [1:0] buffer_1_value_V_ad_reg_334;
reg   [1:0] ap_reg_pp0_iter1_buffer_1_value_V_ad_reg_334;
wire   [63:0] p_write_idx_1_1_fu_246_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] p_Val2_3_0_phi_fu_257_p3;
reg   [7:0] p_Val2_3_0_phi_reg_344;
wire   [7:0] p_Val2_3_1_phi_fu_265_p3;
reg   [7:0] p_Val2_3_1_phi_reg_349;
wire   [0:0] tmp_13_fu_273_p1;
reg   [0:0] tmp_13_reg_354;
wire   [63:0] write_idx_1_2_fu_286_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
wire   [1:0] buffer_0_value_V_address0;
reg    buffer_0_value_V_ce0;
wire   [7:0] buffer_0_value_V_q0;
wire   [1:0] buffer_0_value_V_address1;
reg    buffer_0_value_V_ce1;
reg    buffer_0_value_V_we1;
wire   [1:0] buffer_1_value_V_address0;
reg    buffer_1_value_V_ce0;
wire   [7:0] buffer_1_value_V_q0;
reg    buffer_1_value_V_ce1;
reg    buffer_1_value_V_we1;
reg   [63:0] write_idx_1_reg_131;
reg    ap_block_state1;
reg   [2:0] row_reg_143;
reg   [63:0] write_idx_1_1_phi_fu_157_p4;
wire   [63:0] col_cast_fu_216_p1;
reg    ap_block_pp0_stage0_flag00001001;
wire   [1:0] tmp_10_fu_188_p4;
wire   [62:0] tmp_11_fu_224_p4;
wire   [63:0] write_idx_1_3_fu_240_p2;
wire   [0:0] tmp_12_fu_253_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_57;
reg    ap_enable_state5_pp0_iter2_stage0;
reg    ap_predicate_op38_load_state3;
reg    ap_enable_operation_38;
reg    ap_enable_state3_pp0_iter0_stage0;
reg    ap_enable_operation_45;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

call_Loop_LB2D_bubkb #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
buffer_0_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_0_value_V_address0),
    .ce0(buffer_0_value_V_ce0),
    .q0(buffer_0_value_V_q0),
    .address1(buffer_0_value_V_address1),
    .ce1(buffer_0_value_V_ce1),
    .we1(buffer_0_value_V_we1),
    .d1(in_stream_V_value_V_dout)
);

call_Loop_LB2D_bubkb #(
    .DataWidth( 8 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
buffer_1_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_1_value_V_address0),
    .ce0(buffer_1_value_V_ce0),
    .q0(buffer_1_value_V_q0),
    .address1(ap_reg_pp0_iter1_buffer_1_value_V_ad_reg_334),
    .ce1(buffer_1_value_V_ce1),
    .we1(buffer_1_value_V_we1),
    .d1(in_stream_V_value_V_dout)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_176_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_176_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_176_p2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_2_fu_204_p2))) begin
        col_reg_165 <= col_1_fu_210_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_176_p2))) begin
        col_reg_165 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_reg_143 <= row_1_reg_296;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        row_reg_143 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_305 == 1'd0))) begin
        write_idx_1_1_reg_154 <= p_write_idx_1_1_fu_246_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_176_p2))) begin
        write_idx_1_1_reg_154 <= write_idx_1_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        write_idx_1_reg_131 <= write_idx_1_2_fu_286_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        write_idx_1_reg_131 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_buffer_0_value_V_ad_reg_329 <= buffer_0_value_V_ad_reg_329;
        ap_reg_pp0_iter1_buffer_1_value_V_ad_reg_334 <= buffer_1_value_V_ad_reg_334;
        ap_reg_pp0_iter1_tmp_2_reg_305 <= tmp_2_reg_305;
        tmp_13_reg_354 <= tmp_13_fu_273_p1;
        tmp_2_reg_305 <= tmp_2_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_2_fu_204_p2))) begin
        buffer_0_value_V_ad_reg_329 <= col_cast_fu_216_p1;
        buffer_1_value_V_ad_reg_334 <= col_cast_fu_216_p1;
        icmp1_reg_314 <= icmp1_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_176_p2))) begin
        icmp_reg_301 <= icmp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == icmp_reg_301) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_Val2_3_0_phi_reg_344 <= p_Val2_3_0_phi_fu_257_p3;
        p_Val2_3_1_phi_reg_349 <= p_Val2_3_1_phi_fu_265_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_1_reg_296 <= row_1_fu_182_p2;
    end
end

always @ (*) begin
    if ((tmp_2_fu_204_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_176_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buffer_0_value_V_ce0 = 1'b1;
    end else begin
        buffer_0_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buffer_0_value_V_ce1 = 1'b1;
    end else begin
        buffer_0_value_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_13_reg_354))) begin
        buffer_0_value_V_we1 = 1'b1;
    end else begin
        buffer_0_value_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buffer_1_value_V_ce0 = 1'b1;
    end else begin
        buffer_1_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        buffer_1_value_V_ce1 = 1'b1;
    end else begin
        buffer_1_value_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (tmp_13_reg_354 == 1'd1))) begin
        buffer_1_value_V_we1 = 1'b1;
    end else begin
        buffer_1_value_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter1_tmp_2_reg_305 == 1'd0))) begin
        in_stream_V_value_V_blk_n = in_stream_V_value_V_empty_n;
    end else begin
        in_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter1_tmp_2_reg_305 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_stream_V_value_V_read = 1'b1;
    end else begin
        in_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_176_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == icmp_reg_301))) begin
        slice_stream_V_value_V_blk_n = slice_stream_V_value_V_full_n;
    end else begin
        slice_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == icmp_reg_301) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        slice_stream_V_value_V_write = 1'b1;
    end else begin
        slice_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_2_reg_305 == 1'd0))) begin
        write_idx_1_1_phi_fu_157_p4 = p_write_idx_1_1_fu_246_p3;
    end else begin
        write_idx_1_1_phi_fu_157_p4 = write_idx_1_1_reg_154;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_176_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_2_fu_204_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_2_fu_204_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = (1'b1 == ap_block_pp0_stage0_flag00011011);
end

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (((ap_reg_pp0_iter1_tmp_2_reg_305 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'd0 == icmp_reg_301) & (1'b0 == slice_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (((ap_reg_pp0_iter1_tmp_2_reg_305 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'd0 == icmp_reg_301) & (1'b0 == slice_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter2) & (((ap_reg_pp0_iter1_tmp_2_reg_305 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'd0 == icmp_reg_301) & (1'b0 == slice_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = (((ap_reg_pp0_iter1_tmp_2_reg_305 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'd0 == icmp_reg_301) & (1'b0 == slice_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_enable_operation_38 = (1'b1 == ap_predicate_op38_load_state3);
end

always @ (*) begin
    ap_enable_operation_45 = (1'd0 == icmp_reg_301);
end

always @ (*) begin
    ap_enable_operation_57 = (1'd0 == tmp_13_reg_354);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage0 = ((ap_CS_fsm_pp0_stage0 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_CS_fsm_pp0_stage0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_CS_fsm_pp0_stage0 == 1'b1));
end

always @ (*) begin
    ap_predicate_op38_load_state3 = ((1'd0 == icmp_reg_301) & (1'd0 == tmp_2_fu_204_p2));
end

assign ap_ready = internal_ap_ready;

assign buffer_0_value_V_address0 = col_cast_fu_216_p1;

assign buffer_0_value_V_address1 = ap_reg_pp0_iter1_buffer_0_value_V_ad_reg_329;

assign buffer_1_value_V_address0 = col_cast_fu_216_p1;

assign col_1_fu_210_p2 = (col_reg_165 + 3'd1);

assign col_cast_fu_216_p1 = col_reg_165;

assign icmp1_fu_234_p2 = ((tmp_11_fu_224_p4 != 63'd0) ? 1'b1 : 1'b0);

assign icmp_fu_198_p2 = ((tmp_10_fu_188_p4 == 2'd0) ? 1'b1 : 1'b0);

assign p_Val2_3_0_phi_fu_257_p3 = ((tmp_12_fu_253_p1[0:0] === 1'b1) ? buffer_1_value_V_q0 : buffer_0_value_V_q0);

assign p_Val2_3_1_phi_fu_265_p3 = ((tmp_12_fu_253_p1[0:0] === 1'b1) ? buffer_0_value_V_q0 : buffer_1_value_V_q0);

assign p_write_idx_1_1_fu_246_p3 = ((icmp1_reg_314[0:0] === 1'b1) ? write_idx_1_3_fu_240_p2 : write_idx_1_1_reg_154);

assign row_1_fu_182_p2 = (row_reg_143 + 3'd1);

assign slice_stream_V_value_V_din = {{{in_stream_V_value_V_dout}, {p_Val2_3_1_phi_reg_349}}, {p_Val2_3_0_phi_reg_344}};

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp_10_fu_188_p4 = {{row_reg_143[2:1]}};

assign tmp_11_fu_224_p4 = {{write_idx_1_1_phi_fu_157_p4[63:1]}};

assign tmp_12_fu_253_p1 = p_write_idx_1_1_fu_246_p3[0:0];

assign tmp_13_fu_273_p1 = p_write_idx_1_1_fu_246_p3[0:0];

assign tmp_2_fu_204_p2 = ((col_reg_165 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_fu_176_p2 = ((row_reg_143 == 3'd4) ? 1'b1 : 1'b0);

assign write_idx_1_2_fu_286_p2 = (write_idx_1_1_reg_154 + 64'd1);

assign write_idx_1_3_fu_240_p2 = ($signed(write_idx_1_1_reg_154) + $signed(64'd18446744073709551614));

endmodule //call_Loop_LB2D_buf_p


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_preheader39_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_mul_stencil_stream_V_value_V_dout,
        p_mul_stencil_stream_V_value_V_empty_n,
        p_mul_stencil_stream_V_value_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] p_mul_stencil_stream_V_value_V_dout;
input   p_mul_stencil_stream_V_value_V_empty_n;
output   p_mul_stencil_stream_V_value_V_read;
output  [7:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_mul_stencil_stream_V_value_V_read;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_mul_stencil_stream_V_value_V_blk_n;
reg    hw_output_V_value_V_blk_n;
wire    ap_CS_fsm_state3;
reg    hw_output_V_last_V_blk_n;
wire   [8:0] p_9_fu_148_p2;
reg   [8:0] p_9_reg_230;
reg    ap_block_state1;
wire   [8:0] tmp_fu_190_p2;
reg   [8:0] tmp_reg_235;
wire   [31:0] p_p2_mul1_stencil_str_din;
wire    p_p2_mul1_stencil_str_full_n;
reg    p_p2_mul1_stencil_str_write;
wire    ap_CS_fsm_state2;
wire   [31:0] p_p2_mul1_stencil_str_dout;
wire    p_p2_mul1_stencil_str_empty_n;
reg    p_p2_mul1_stencil_str_read;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [7:0] p_s_fu_112_p4;
wire   [5:0] tmp_6_fu_126_p4;
wire   [7:0] p_8_fu_136_p3;
wire   [8:0] p_323_cast_fu_144_p1;
wire   [8:0] p_315_cast_fu_122_p1;
wire   [6:0] tmp_7_fu_154_p4;
wire   [7:0] p_10_fu_164_p3;
wire   [7:0] p_11_fu_176_p4;
wire   [8:0] p_339_cast_cast_fu_186_p1;
wire   [8:0] p_331_cast_cast_fu_172_p1;
wire   [9:0] p_324_cast_fu_196_p1;
wire   [9:0] tmp_cast_fu_199_p1;
wire   [9:0] tmp_value_V_6_fu_202_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

fifo_w32_d1_S p_p2_mul1_stencil_str_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(p_p2_mul1_stencil_str_din),
    .if_full_n(p_p2_mul1_stencil_str_full_n),
    .if_write(p_p2_mul1_stencil_str_write),
    .if_dout(p_p2_mul1_stencil_str_dout),
    .if_empty_n(p_p2_mul1_stencil_str_empty_n),
    .if_read(p_p2_mul1_stencil_str_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if (~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((p_p2_mul1_stencil_str_empty_n == 1'b1) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if (~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((p_p2_mul1_stencil_str_empty_n == 1'b1) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)))) begin
        p_9_reg_230 <= p_9_fu_148_p2;
        tmp_reg_235 <= tmp_fu_190_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (p_p2_mul1_stencil_str_empty_n == 1'b1) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (p_p2_mul1_stencil_str_empty_n == 1'b1) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_mul_stencil_stream_V_value_V_blk_n = p_mul_stencil_stream_V_value_V_empty_n;
    end else begin
        p_mul_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)))) begin
        p_mul_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_mul_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack)))) begin
        p_p2_mul1_stencil_str_read = 1'b1;
    end else begin
        p_p2_mul1_stencil_str_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (p_p2_mul1_stencil_str_full_n == 1'b1))) begin
        p_p2_mul1_stencil_str_write = 1'b1;
    end else begin
        p_p2_mul1_stencil_str_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (p_p2_mul1_stencil_str_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == p_p2_mul1_stencil_str_empty_n) | (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == p_mul_stencil_stream_V_value_V_empty_n));
end

assign hw_output_V_last_V = 1'd1;

assign hw_output_V_value_V = {{p_p2_mul1_stencil_str_dout[10:3]}};

assign p_10_fu_164_p3 = {{tmp_7_fu_154_p4}, {1'd0}};

assign p_11_fu_176_p4 = {{p_mul_stencil_stream_V_value_V_dout[107:100]}};

assign p_315_cast_fu_122_p1 = p_s_fu_112_p4;

assign p_323_cast_fu_144_p1 = p_8_fu_136_p3;

assign p_324_cast_fu_196_p1 = p_9_reg_230;

assign p_331_cast_cast_fu_172_p1 = p_10_fu_164_p3;

assign p_339_cast_cast_fu_186_p1 = p_11_fu_176_p4;

assign p_8_fu_136_p3 = {{tmp_6_fu_126_p4}, {2'd0}};

assign p_9_fu_148_p2 = (p_323_cast_fu_144_p1 + p_315_cast_fu_122_p1);

assign p_p2_mul1_stencil_str_din = tmp_value_V_6_fu_202_p2;

assign p_s_fu_112_p4 = {{p_mul_stencil_stream_V_value_V_dout[11:4]}};

assign tmp_6_fu_126_p4 = {{p_mul_stencil_stream_V_value_V_dout[41:36]}};

assign tmp_7_fu_154_p4 = {{p_mul_stencil_stream_V_value_V_dout[74:68]}};

assign tmp_cast_fu_199_p1 = tmp_reg_235;

assign tmp_fu_190_p2 = (p_339_cast_cast_fu_186_p1 + p_331_cast_cast_fu_172_p1);

assign tmp_value_V_6_fu_202_p2 = (p_324_cast_fu_196_p1 + tmp_cast_fu_199_p1);

endmodule //Block_preheader39_p


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_linebufeOg_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_linebufeOg (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_linebufeOg_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_linebufeOg_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        p_mul_stencil_update_stream_V_value_V_din,
        p_mul_stencil_update_stream_V_value_V_full_n,
        p_mul_stencil_update_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [71:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [31:0] p_mul_stencil_update_stream_V_value_V_din;
input   p_mul_stencil_update_stream_V_value_V_full_n;
output   p_mul_stencil_update_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg p_hw_input_stencil_stream_V_value_V_read;
reg p_mul_stencil_update_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_354;
reg    p_mul_stencil_update_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_354;
reg   [2:0] indvar_flatten_reg_103;
wire   [0:0] exitcond_flatten_fu_114_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_354;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_354;
wire   [2:0] indvar_flatten_next_fu_120_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] p_302_reg_363;
reg   [7:0] ap_reg_pp0_iter2_p_302_reg_363;
reg   [7:0] ap_reg_pp0_iter3_p_302_reg_363;
wire   [8:0] p_252_fu_194_p2;
reg   [8:0] p_252_reg_368;
wire   [8:0] tmp1_fu_222_p2;
reg   [8:0] tmp1_reg_373;
reg   [5:0] tmp_3_reg_378;
reg   [5:0] ap_reg_pp0_iter2_tmp_3_reg_378;
reg   [6:0] tmp_4_reg_383;
wire   [8:0] tmp4_fu_270_p2;
reg   [8:0] tmp4_reg_388;
wire   [9:0] p_268_fu_282_p2;
reg   [9:0] p_268_reg_393;
wire   [9:0] tmp3_fu_302_p2;
reg   [9:0] tmp3_reg_398;
wire   [10:0] p_300_fu_331_p2;
reg   [10:0] p_300_reg_403;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_flag00001001;
wire   [7:0] p_238_fu_126_p1;
wire   [7:0] p_254_fu_134_p4;
wire   [7:0] p_286_fu_148_p4;
wire   [6:0] tmp_1_fu_172_p4;
wire   [7:0] p_250_fu_182_p3;
wire   [8:0] p_243_cast_fu_130_p1;
wire   [8:0] p_251_cast_fu_190_p1;
wire   [6:0] tmp_2_fu_200_p4;
wire   [7:0] p_266_fu_210_p3;
wire   [8:0] p_267_cast_cast_fu_218_p1;
wire   [8:0] p_259_cast_cast_fu_144_p1;
wire   [6:0] tmp_5_fu_248_p4;
wire   [7:0] p_298_fu_258_p3;
wire   [8:0] p_299_cast_cast_fu_266_p1;
wire   [8:0] p_291_cast_cast_fu_158_p1;
wire   [9:0] p_252_cast_fu_276_p1;
wire   [9:0] tmp1_cast_fu_279_p1;
wire   [7:0] p_282_fu_288_p3;
wire   [9:0] p_283_cast_cast_fu_295_p1;
wire   [9:0] tmp4_cast_fu_299_p1;
wire   [7:0] p_274_fu_311_p3;
wire   [10:0] p_275_cast_fu_318_p1;
wire   [10:0] p_268_cast_fu_308_p1;
wire   [10:0] tmp2_fu_322_p2;
wire   [10:0] tmp3_cast_fu_328_p1;
wire   [11:0] p_307_cast_fu_337_p1;
wire   [11:0] p_300_cast_fu_340_p1;
wire   [11:0] p_308_fu_343_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_114_p2))) begin
        indvar_flatten_reg_103 <= indvar_flatten_next_fu_120_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_103 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_354 <= exitcond_flatten_reg_354;
        exitcond_flatten_reg_354 <= exitcond_flatten_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_354 <= ap_reg_pp0_iter1_exitcond_flatten_reg_354;
        ap_reg_pp0_iter2_p_302_reg_363 <= p_302_reg_363;
        ap_reg_pp0_iter2_tmp_3_reg_378 <= tmp_3_reg_378;
        ap_reg_pp0_iter3_exitcond_flatten_reg_354 <= ap_reg_pp0_iter2_exitcond_flatten_reg_354;
        ap_reg_pp0_iter3_p_302_reg_363 <= ap_reg_pp0_iter2_p_302_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_354 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_252_reg_368 <= p_252_fu_194_p2;
        p_302_reg_363 <= {{p_hw_input_stencil_stream_V_value_V_dout[71:64]}};
        tmp1_reg_373 <= tmp1_fu_222_p2;
        tmp4_reg_388 <= tmp4_fu_270_p2;
        tmp_3_reg_378 <= {{p_hw_input_stencil_stream_V_value_V_dout[37:32]}};
        tmp_4_reg_383 <= {{p_hw_input_stencil_stream_V_value_V_dout[46:40]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_354))) begin
        p_268_reg_393 <= p_268_fu_282_p2;
        tmp3_reg_398 <= tmp3_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_354))) begin
        p_300_reg_403 <= p_300_fu_331_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_114_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_354 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354))) begin
        p_mul_stencil_update_stream_V_value_V_blk_n = p_mul_stencil_update_stream_V_value_V_full_n;
    end else begin
        p_mul_stencil_update_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_mul_stencil_update_stream_V_value_V_write = 1'b1;
    end else begin
        p_mul_stencil_update_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_114_p2 = ((indvar_flatten_reg_103 == 3'd4) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_120_p2 = (indvar_flatten_reg_103 + 3'd1);

assign p_238_fu_126_p1 = p_hw_input_stencil_stream_V_value_V_dout[7:0];

assign p_243_cast_fu_130_p1 = p_238_fu_126_p1;

assign p_250_fu_182_p3 = {{tmp_1_fu_172_p4}, {1'd0}};

assign p_251_cast_fu_190_p1 = p_250_fu_182_p3;

assign p_252_cast_fu_276_p1 = p_252_reg_368;

assign p_252_fu_194_p2 = (p_243_cast_fu_130_p1 + p_251_cast_fu_190_p1);

assign p_254_fu_134_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[23:16]}};

assign p_259_cast_cast_fu_144_p1 = p_254_fu_134_p4;

assign p_266_fu_210_p3 = {{tmp_2_fu_200_p4}, {1'd0}};

assign p_267_cast_cast_fu_218_p1 = p_266_fu_210_p3;

assign p_268_cast_fu_308_p1 = p_268_reg_393;

assign p_268_fu_282_p2 = (p_252_cast_fu_276_p1 + tmp1_cast_fu_279_p1);

assign p_274_fu_311_p3 = {{ap_reg_pp0_iter2_tmp_3_reg_378}, {2'd0}};

assign p_275_cast_fu_318_p1 = p_274_fu_311_p3;

assign p_282_fu_288_p3 = {{tmp_4_reg_383}, {1'd0}};

assign p_283_cast_cast_fu_295_p1 = p_282_fu_288_p3;

assign p_286_fu_148_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[55:48]}};

assign p_291_cast_cast_fu_158_p1 = p_286_fu_148_p4;

assign p_298_fu_258_p3 = {{tmp_5_fu_248_p4}, {1'd0}};

assign p_299_cast_cast_fu_266_p1 = p_298_fu_258_p3;

assign p_300_cast_fu_340_p1 = p_300_reg_403;

assign p_300_fu_331_p2 = (tmp2_fu_322_p2 + tmp3_cast_fu_328_p1);

assign p_307_cast_fu_337_p1 = ap_reg_pp0_iter3_p_302_reg_363;

assign p_308_fu_343_p2 = (p_307_cast_fu_337_p1 + p_300_cast_fu_340_p1);

assign p_mul_stencil_update_stream_V_value_V_din = p_308_fu_343_p2;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp1_cast_fu_279_p1 = tmp1_reg_373;

assign tmp1_fu_222_p2 = (p_267_cast_cast_fu_218_p1 + p_259_cast_cast_fu_144_p1);

assign tmp2_fu_322_p2 = (p_275_cast_fu_318_p1 + p_268_cast_fu_308_p1);

assign tmp3_cast_fu_328_p1 = tmp3_reg_398;

assign tmp3_fu_302_p2 = (p_283_cast_cast_fu_295_p1 + tmp4_cast_fu_299_p1);

assign tmp4_cast_fu_299_p1 = tmp4_reg_388;

assign tmp4_fu_270_p2 = (p_299_cast_cast_fu_266_p1 + p_291_cast_cast_fu_158_p1);

assign tmp_1_fu_172_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[14:8]}};

assign tmp_2_fu_200_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[30:24]}};

assign tmp_5_fu_248_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[62:56]}};

endmodule //Loop_1_proc


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer (
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [71:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    call_U0_in_stream_V_value_V_read;
wire   [71:0] call_U0_out_stream_V_value_V_din;
wire    call_U0_out_stream_V_value_V_write;
wire    call_U0_ap_done;
wire    call_U0_ap_start;
wire    call_U0_ap_ready;
wire    call_U0_ap_idle;
wire    call_U0_ap_continue;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    call_U0_start_full_n;
wire    call_U0_start_write;

call call_U0(
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(call_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(call_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(call_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(call_U0_ap_done),
    .ap_start(call_U0_ap_start),
    .ap_ready(call_U0_ap_ready),
    .ap_idle(call_U0_ap_idle),
    .ap_continue(call_U0_ap_continue)
);

assign ap_done = call_U0_ap_done;

assign ap_idle = call_U0_ap_idle;

assign ap_ready = call_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = call_U0_ap_done;

assign ap_sync_ready = call_U0_ap_ready;

assign call_U0_ap_continue = ap_continue;

assign call_U0_ap_start = ap_start;

assign call_U0_start_full_n = 1'b0;

assign call_U0_start_write = 1'b0;

assign in_stream_V_value_V_read = call_U0_in_stream_V_value_V_read;

assign out_stream_V_value_V_din = call_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = call_U0_out_stream_V_value_V_write;

endmodule //linebuffer


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w128_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd128;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w128_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd128;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w128_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w128_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Block_phbi_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Block_phbi (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Block_phbi_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Block_phbi_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call_Loop_LB2D_shift (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        slice_stream_V_value_V_dout,
        slice_stream_V_value_V_empty_n,
        slice_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] slice_stream_V_value_V_dout;
input   slice_stream_V_value_V_empty_n;
output   slice_stream_V_value_V_read;
output  [71:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg slice_stream_V_value_V_read;
reg out_stream_V_value_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    slice_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg    out_stream_V_value_V_blk_n;
reg   [0:0] icmp_reg_298;
reg   [2:0] i_0_i_i_reg_102;
wire   [0:0] tmp_1_fu_113_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] n1_1_fu_119_p2;
reg   [1:0] n1_1_reg_284;
wire   [0:0] tmp_3_fu_125_p2;
reg   [0:0] tmp_3_reg_289;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [2:0] i_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_fu_147_p2;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [1:0] n1_reg_91;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00001001;
reg   [23:0] buffer_1_value_V_fu_70;
reg   [23:0] buffer_0_value_V_fu_74;
wire   [1:0] tmp_fu_137_p4;
wire   [7:0] p_Result_6_2_2_fu_221_p4;
wire   [7:0] p_Result_6_2_1_fu_211_p4;
wire   [7:0] p_Result_6_2_fu_201_p4;
wire   [7:0] p_Result_6_1_2_fu_191_p4;
wire   [7:0] p_Result_6_1_1_fu_181_p4;
wire   [7:0] p_Result_6_1_fu_171_p4;
wire   [7:0] tmp_9_fu_167_p1;
wire   [7:0] tmp_7_fu_163_p1;
wire   [7:0] tmp_6_fu_159_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_113_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_113_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_113_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_3_fu_125_p2))) begin
        i_0_i_i_reg_102 <= i_fu_131_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_1_fu_113_p2))) begin
        i_0_i_i_reg_102 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        n1_reg_91 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n1_reg_91 <= n1_1_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_3_reg_289))) begin
        buffer_0_value_V_fu_74 <= buffer_1_value_V_fu_70;
        buffer_1_value_V_fu_70 <= slice_stream_V_value_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_3_fu_125_p2))) begin
        icmp_reg_298 <= icmp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n1_1_reg_284 <= n1_1_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_3_reg_289 <= tmp_3_fu_125_p2;
    end
end

always @ (*) begin
    if ((tmp_3_fu_125_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_113_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_113_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (icmp_reg_298 == 1'd0))) begin
        out_stream_V_value_V_blk_n = out_stream_V_value_V_full_n;
    end else begin
        out_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (icmp_reg_298 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_stream_V_value_V_write = 1'b1;
    end else begin
        out_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        slice_stream_V_value_V_blk_n = slice_stream_V_value_V_empty_n;
    end else begin
        slice_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        slice_stream_V_value_V_read = 1'b1;
    end else begin
        slice_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_113_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_3_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_3_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_298 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_298 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_298 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_298 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_131_p2 = (i_0_i_i_reg_102 + 3'd1);

assign icmp_fu_147_p2 = ((tmp_fu_137_p4 == 2'd0) ? 1'b1 : 1'b0);

assign n1_1_fu_119_p2 = (n1_reg_91 + 2'd1);

assign out_stream_V_value_V_din = {{{{{{{{{p_Result_6_2_2_fu_221_p4}, {p_Result_6_2_1_fu_211_p4}}, {p_Result_6_2_fu_201_p4}}, {p_Result_6_1_2_fu_191_p4}}, {p_Result_6_1_1_fu_181_p4}}, {p_Result_6_1_fu_171_p4}}, {tmp_9_fu_167_p1}}, {tmp_7_fu_163_p1}}, {tmp_6_fu_159_p1}};

assign p_Result_6_1_1_fu_181_p4 = {{buffer_1_value_V_fu_70[15:8]}};

assign p_Result_6_1_2_fu_191_p4 = {{slice_stream_V_value_V_dout[15:8]}};

assign p_Result_6_1_fu_171_p4 = {{buffer_0_value_V_fu_74[15:8]}};

assign p_Result_6_2_1_fu_211_p4 = {{buffer_1_value_V_fu_70[23:16]}};

assign p_Result_6_2_2_fu_221_p4 = {{slice_stream_V_value_V_dout[23:16]}};

assign p_Result_6_2_fu_201_p4 = {{buffer_0_value_V_fu_74[23:16]}};

assign tmp_1_fu_113_p2 = ((n1_reg_91 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_3_fu_125_p2 = ((i_0_i_i_reg_102 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_6_fu_159_p1 = buffer_0_value_V_fu_74[7:0];

assign tmp_7_fu_163_p1 = buffer_1_value_V_fu_70[7:0];

assign tmp_9_fu_167_p1 = slice_stream_V_value_V_dout[7:0];

assign tmp_fu_137_p4 = {{i_0_i_i_reg_102[2:1]}};

endmodule //call_Loop_LB2D_shift


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_linebufg8j_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_linebufg8j (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_linebufg8j_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_linebufg8j_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w32_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd32;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w32_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd32;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w32_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w32_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_call_LodEe_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_call_LodEe (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_call_LodEe_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_call_LodEe_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w72_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd72;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w72_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd72;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w72_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w72_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_Loop_1_pr (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        in_axi_stream_V_value_V,
        in_axi_stream_V_value_V_ap_vld,
        in_axi_stream_V_value_V_ap_ack,
        in_axi_stream_V_last_V,
        in_axi_stream_V_last_V_ap_vld,
        in_axi_stream_V_last_V_ap_ack,
        in_stream_V_value_V_din,
        in_stream_V_value_V_full_n,
        in_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [7:0] in_axi_stream_V_value_V;
input   in_axi_stream_V_value_V_ap_vld;
output   in_axi_stream_V_value_V_ap_ack;
input  [0:0] in_axi_stream_V_last_V;
input   in_axi_stream_V_last_V_ap_vld;
output   in_axi_stream_V_last_V_ap_ack;
output  [7:0] in_stream_V_value_V_din;
input   in_stream_V_value_V_full_n;
output   in_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg in_axi_stream_V_value_V_ap_ack;
reg in_axi_stream_V_last_V_ap_ack;
reg in_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    in_axi_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_flag00000000;
wire   [0:0] exitcond_flatten_fu_74_p2;
reg    in_axi_stream_V_last_V_blk_n;
reg    in_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_90;
reg   [4:0] indvar_flatten_reg_63;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [4:0] indvar_flatten_next_fu_80_p2;
reg   [7:0] tmp_value_V_reg_99;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_flag00001001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_63 <= indvar_flatten_next_fu_80_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_63 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_90 <= exitcond_flatten_fu_74_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_value_V_reg_99 <= in_axi_stream_V_value_V;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_74_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_axi_stream_V_last_V_ap_ack = 1'b1;
    end else begin
        in_axi_stream_V_last_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd0))) begin
        in_axi_stream_V_last_V_blk_n = in_axi_stream_V_last_V_ap_vld;
    end else begin
        in_axi_stream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_axi_stream_V_value_V_ap_ack = 1'b1;
    end else begin
        in_axi_stream_V_value_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd0))) begin
        in_axi_stream_V_value_V_blk_n = in_axi_stream_V_value_V_ap_vld;
    end else begin
        in_axi_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90))) begin
        in_stream_V_value_V_blk_n = in_stream_V_value_V_full_n;
    end else begin
        in_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_stream_V_value_V_write = 1'b1;
    end else begin
        in_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_74_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond_flatten_fu_74_p2 == 1'd0) & (1'b0 == in_axi_stream_V_value_V_ap_vld));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((1'd0 == exitcond_flatten_reg_90) & (1'b0 == in_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_74_p2 = ((indvar_flatten_reg_63 == 5'd16) ? 1'b1 : 1'b0);

assign in_stream_V_value_V_din = tmp_value_V_reg_99;

assign indvar_flatten_next_fu_80_p2 = (indvar_flatten_reg_63 + 5'd1);

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //linebuffer_Loop_1_pr


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w24_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd24;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w24_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd24;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w24_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w24_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call (
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [71:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    call_Loop_LB2D_buf_p_U0_ap_start;
wire    call_Loop_LB2D_buf_p_U0_start_full_n;
wire    call_Loop_LB2D_buf_p_U0_ap_ready;
wire    call_Loop_LB2D_buf_p_U0_ap_done;
wire    call_Loop_LB2D_buf_p_U0_ap_continue;
wire    call_Loop_LB2D_buf_p_U0_ap_idle;
wire    call_Loop_LB2D_buf_p_U0_start_out;
wire    call_Loop_LB2D_buf_p_U0_start_write;
wire    call_Loop_LB2D_buf_p_U0_in_stream_V_value_V_read;
wire   [23:0] call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_din;
wire    call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_write;
wire    call_Loop_LB2D_shift_U0_ap_start;
wire    call_Loop_LB2D_shift_U0_ap_done;
wire    call_Loop_LB2D_shift_U0_ap_continue;
wire    call_Loop_LB2D_shift_U0_ap_idle;
wire    call_Loop_LB2D_shift_U0_ap_ready;
wire    call_Loop_LB2D_shift_U0_slice_stream_V_value_V_read;
wire   [71:0] call_Loop_LB2D_shift_U0_out_stream_V_value_V_din;
wire    call_Loop_LB2D_shift_U0_out_stream_V_value_V_write;
wire    ap_sync_continue;
wire    slice_stream_V_value_full_n;
wire   [23:0] slice_stream_V_value_dout;
wire    slice_stream_V_value_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_call_Loop_LB2D_shift_U0_din;
wire    start_for_call_Loop_LB2D_shift_U0_full_n;
wire   [0:0] start_for_call_Loop_LB2D_shift_U0_dout;
wire    start_for_call_Loop_LB2D_shift_U0_empty_n;
wire    call_Loop_LB2D_shift_U0_start_full_n;
wire    call_Loop_LB2D_shift_U0_start_write;

call_Loop_LB2D_buf_p call_Loop_LB2D_buf_p_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_Loop_LB2D_buf_p_U0_ap_start),
    .start_full_n(call_Loop_LB2D_buf_p_U0_start_full_n),
    .ap_ready(call_Loop_LB2D_buf_p_U0_ap_ready),
    .ap_done(call_Loop_LB2D_buf_p_U0_ap_done),
    .ap_continue(call_Loop_LB2D_buf_p_U0_ap_continue),
    .ap_idle(call_Loop_LB2D_buf_p_U0_ap_idle),
    .start_out(call_Loop_LB2D_buf_p_U0_start_out),
    .start_write(call_Loop_LB2D_buf_p_U0_start_write),
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(call_Loop_LB2D_buf_p_U0_in_stream_V_value_V_read),
    .slice_stream_V_value_V_din(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_din),
    .slice_stream_V_value_V_full_n(slice_stream_V_value_full_n),
    .slice_stream_V_value_V_write(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_write)
);

call_Loop_LB2D_shift call_Loop_LB2D_shift_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_Loop_LB2D_shift_U0_ap_start),
    .ap_done(call_Loop_LB2D_shift_U0_ap_done),
    .ap_continue(call_Loop_LB2D_shift_U0_ap_continue),
    .ap_idle(call_Loop_LB2D_shift_U0_ap_idle),
    .ap_ready(call_Loop_LB2D_shift_U0_ap_ready),
    .slice_stream_V_value_V_dout(slice_stream_V_value_dout),
    .slice_stream_V_value_V_empty_n(slice_stream_V_value_empty_n),
    .slice_stream_V_value_V_read(call_Loop_LB2D_shift_U0_slice_stream_V_value_V_read),
    .out_stream_V_value_V_din(call_Loop_LB2D_shift_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(call_Loop_LB2D_shift_U0_out_stream_V_value_V_write)
);

fifo_w24_d1_S slice_stream_V_value_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_din),
    .if_full_n(slice_stream_V_value_full_n),
    .if_write(call_Loop_LB2D_buf_p_U0_slice_stream_V_value_V_write),
    .if_dout(slice_stream_V_value_dout),
    .if_empty_n(slice_stream_V_value_empty_n),
    .if_read(call_Loop_LB2D_shift_U0_slice_stream_V_value_V_read)
);

start_for_call_LodEe start_for_call_LodEe_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_call_Loop_LB2D_shift_U0_din),
    .if_full_n(start_for_call_Loop_LB2D_shift_U0_full_n),
    .if_write(call_Loop_LB2D_buf_p_U0_start_write),
    .if_dout(start_for_call_Loop_LB2D_shift_U0_dout),
    .if_empty_n(start_for_call_Loop_LB2D_shift_U0_empty_n),
    .if_read(call_Loop_LB2D_shift_U0_ap_ready)
);

assign ap_done = call_Loop_LB2D_shift_U0_ap_done;

assign ap_idle = (call_Loop_LB2D_buf_p_U0_ap_idle & call_Loop_LB2D_shift_U0_ap_idle);

assign ap_ready = call_Loop_LB2D_buf_p_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = call_Loop_LB2D_shift_U0_ap_done;

assign ap_sync_ready = call_Loop_LB2D_buf_p_U0_ap_ready;

assign call_Loop_LB2D_buf_p_U0_ap_continue = 1'b1;

assign call_Loop_LB2D_buf_p_U0_ap_start = ap_start;

assign call_Loop_LB2D_buf_p_U0_start_full_n = (1'b0 | start_for_call_Loop_LB2D_shift_U0_full_n);

assign call_Loop_LB2D_shift_U0_ap_continue = ap_continue;

assign call_Loop_LB2D_shift_U0_ap_start = start_for_call_Loop_LB2D_shift_U0_empty_n;

assign call_Loop_LB2D_shift_U0_start_full_n = 1'b0;

assign call_Loop_LB2D_shift_U0_start_write = 1'b0;

assign in_stream_V_value_V_read = call_Loop_LB2D_buf_p_U0_in_stream_V_value_V_read;

assign out_stream_V_value_V_din = call_Loop_LB2D_shift_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = call_Loop_LB2D_shift_U0_out_stream_V_value_V_write;

assign start_for_call_Loop_LB2D_shift_U0_din = 1'b1;

endmodule //call


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_1 (
        ap_start,
        start_full_n,
        ap_ready,
        start_out,
        start_write,
        in_axi_stream_V_value_V,
        in_axi_stream_V_last_V,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        in_axi_stream_V_value_V_ap_vld,
        in_axi_stream_V_value_V_ap_ack,
        in_axi_stream_V_last_V_ap_vld,
        in_axi_stream_V_last_V_ap_ack,
        ap_done,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_axi_stream_V_value_V;
input  [0:0] in_axi_stream_V_last_V;
output  [71:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
input   in_axi_stream_V_value_V_ap_vld;
output   in_axi_stream_V_value_V_ap_ack;
input   in_axi_stream_V_last_V_ap_vld;
output   in_axi_stream_V_last_V_ap_ack;
output   ap_done;
output   ap_idle;
input   ap_continue;

reg    real_start;
reg    real_start_status_reg;
wire    internal_ap_ready;
reg    start_once_reg;
reg    start_control_reg;
wire    linebuffer_Loop_1_pr_U0_ap_start;
wire    linebuffer_Loop_1_pr_U0_start_full_n;
wire    linebuffer_Loop_1_pr_U0_ap_ready;
wire    linebuffer_Loop_1_pr_U0_ap_done;
wire    linebuffer_Loop_1_pr_U0_ap_continue;
wire    linebuffer_Loop_1_pr_U0_ap_idle;
wire    linebuffer_Loop_1_pr_U0_start_out;
wire    linebuffer_Loop_1_pr_U0_start_write;
wire    linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack;
wire    linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack;
wire   [7:0] linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din;
wire    linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write;
wire    linebuffer_U0_in_stream_V_value_V_read;
wire   [71:0] linebuffer_U0_out_stream_V_value_V_din;
wire    linebuffer_U0_out_stream_V_value_V_write;
wire    linebuffer_U0_ap_done;
wire    linebuffer_U0_ap_start;
wire    linebuffer_U0_ap_ready;
wire    linebuffer_U0_ap_idle;
wire    linebuffer_U0_ap_continue;
wire    ap_sync_continue;
wire    in_stream_V_value_V_full_n;
wire   [7:0] in_stream_V_value_V_dout;
wire    in_stream_V_value_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_linebuffer_U0_din;
wire    start_for_linebuffer_U0_full_n;
wire   [0:0] start_for_linebuffer_U0_dout;
wire    start_for_linebuffer_U0_empty_n;
wire    linebuffer_U0_start_full_n;
wire    linebuffer_U0_start_write;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
end

linebuffer_Loop_1_pr linebuffer_Loop_1_pr_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(linebuffer_Loop_1_pr_U0_ap_start),
    .start_full_n(linebuffer_Loop_1_pr_U0_start_full_n),
    .ap_ready(linebuffer_Loop_1_pr_U0_ap_ready),
    .ap_done(linebuffer_Loop_1_pr_U0_ap_done),
    .ap_continue(linebuffer_Loop_1_pr_U0_ap_continue),
    .ap_idle(linebuffer_Loop_1_pr_U0_ap_idle),
    .start_out(linebuffer_Loop_1_pr_U0_start_out),
    .start_write(linebuffer_Loop_1_pr_U0_start_write),
    .in_axi_stream_V_value_V(in_axi_stream_V_value_V),
    .in_axi_stream_V_value_V_ap_vld(in_axi_stream_V_value_V_ap_vld),
    .in_axi_stream_V_value_V_ap_ack(linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack),
    .in_axi_stream_V_last_V(in_axi_stream_V_last_V),
    .in_axi_stream_V_last_V_ap_vld(in_axi_stream_V_last_V_ap_vld),
    .in_axi_stream_V_last_V_ap_ack(linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack),
    .in_stream_V_value_V_din(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din),
    .in_stream_V_value_V_full_n(in_stream_V_value_V_full_n),
    .in_stream_V_value_V_write(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write)
);

linebuffer linebuffer_U0(
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(linebuffer_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(linebuffer_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(linebuffer_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(linebuffer_U0_ap_done),
    .ap_start(linebuffer_U0_ap_start),
    .ap_ready(linebuffer_U0_ap_ready),
    .ap_idle(linebuffer_U0_ap_idle),
    .ap_continue(linebuffer_U0_ap_continue)
);

fifo_w8_d1_S in_stream_V_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din),
    .if_full_n(in_stream_V_value_V_full_n),
    .if_write(linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write),
    .if_dout(in_stream_V_value_V_dout),
    .if_empty_n(in_stream_V_value_V_empty_n),
    .if_read(linebuffer_U0_in_stream_V_value_V_read)
);

start_for_linebufeOg start_for_linebufeOg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_linebuffer_U0_din),
    .if_full_n(start_for_linebuffer_U0_full_n),
    .if_write(linebuffer_Loop_1_pr_U0_start_write),
    .if_dout(start_for_linebuffer_U0_dout),
    .if_empty_n(start_for_linebuffer_U0_empty_n),
    .if_read(linebuffer_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((start_full_n == 1'b0) & (internal_ap_ready == 1'b1))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & ((internal_ap_ready == 1'b1) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((real_start == 1'b1)) begin
            start_once_reg <= 1'b1;
        end else if ((ap_start == 1'b0)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((real_start_status_reg == 1'b1)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

assign ap_done = linebuffer_U0_ap_done;

assign ap_idle = (linebuffer_Loop_1_pr_U0_ap_idle & linebuffer_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = linebuffer_U0_ap_done;

assign ap_sync_ready = linebuffer_Loop_1_pr_U0_ap_ready;

assign in_axi_stream_V_last_V_ap_ack = linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack;

assign in_axi_stream_V_value_V_ap_ack = linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack;

assign internal_ap_ready = ap_sync_ready;

assign linebuffer_Loop_1_pr_U0_ap_continue = 1'b1;

assign linebuffer_Loop_1_pr_U0_ap_start = real_start;

assign linebuffer_Loop_1_pr_U0_start_full_n = (1'b0 | start_for_linebuffer_U0_full_n);

assign linebuffer_U0_ap_continue = ap_continue;

assign linebuffer_U0_ap_start = start_for_linebuffer_U0_empty_n;

assign linebuffer_U0_start_full_n = 1'b0;

assign linebuffer_U0_start_write = 1'b0;

assign out_stream_V_value_V_din = linebuffer_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = linebuffer_U0_out_stream_V_value_V_write;

assign start_for_linebuffer_U0_din = 1'b1;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //linebuffer_1


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w32_d1_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd32;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w32_d1_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd32;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w32_d1_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w32_d1_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_2 (
        ap_start,
        start_full_n,
        ap_ready,
        start_out,
        start_write,
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [127:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_idle;
input   ap_continue;

reg    real_start;
reg    real_start_status_reg;
wire    internal_ap_ready;
reg    start_once_reg;
reg    start_control_reg;
wire    linebuffer_Block_pr_U0_ap_start;
wire    linebuffer_Block_pr_U0_ap_done;
wire    linebuffer_Block_pr_U0_ap_continue;
wire    linebuffer_Block_pr_U0_ap_idle;
wire    linebuffer_Block_pr_U0_ap_ready;
wire    linebuffer_Block_pr_U0_in_stream_V_value_V_read;
wire   [127:0] linebuffer_Block_pr_U0_out_stream_V_value_V_din;
wire    linebuffer_Block_pr_U0_out_stream_V_value_V_write;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    linebuffer_Block_pr_U0_start_full_n;
wire    linebuffer_Block_pr_U0_start_write;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
end

linebuffer_Block_pr linebuffer_Block_pr_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(linebuffer_Block_pr_U0_ap_start),
    .ap_done(linebuffer_Block_pr_U0_ap_done),
    .ap_continue(linebuffer_Block_pr_U0_ap_continue),
    .ap_idle(linebuffer_Block_pr_U0_ap_idle),
    .ap_ready(linebuffer_Block_pr_U0_ap_ready),
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(linebuffer_Block_pr_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(linebuffer_Block_pr_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(linebuffer_Block_pr_U0_out_stream_V_value_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((start_full_n == 1'b0) & (internal_ap_ready == 1'b1))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & ((internal_ap_ready == 1'b1) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((real_start == 1'b1)) begin
            start_once_reg <= 1'b1;
        end else if ((ap_start == 1'b0)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((real_start_status_reg == 1'b1)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

assign ap_done = linebuffer_Block_pr_U0_ap_done;

assign ap_idle = linebuffer_Block_pr_U0_ap_idle;

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = linebuffer_Block_pr_U0_ap_done;

assign ap_sync_ready = linebuffer_Block_pr_U0_ap_ready;

assign in_stream_V_value_V_read = linebuffer_Block_pr_U0_in_stream_V_value_V_read;

assign internal_ap_ready = ap_sync_ready;

assign linebuffer_Block_pr_U0_ap_continue = ap_continue;

assign linebuffer_Block_pr_U0_ap_start = real_start;

assign linebuffer_Block_pr_U0_start_full_n = 1'b0;

assign linebuffer_Block_pr_U0_start_write = 1'b0;

assign out_stream_V_value_V_din = linebuffer_Block_pr_U0_out_stream_V_value_V_din;

assign out_stream_V_value_V_write = linebuffer_Block_pr_U0_out_stream_V_value_V_write;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //linebuffer_2


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_target,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.600000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.935000,HLS_SYN_LAT=33,HLS_SYN_TPT=34,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1563,HLS_SYN_LUT=1504}" *)

module top (
        hw_input_V_value_V,
        hw_input_V_last_V,
        hw_output_V_value_V,
        hw_output_V_last_V,
        ap_clk,
        ap_rst,
        hw_input_V_value_V_ap_vld,
        hw_input_V_value_V_ap_ack,
        hw_input_V_last_V_ap_vld,
        hw_input_V_last_V_ap_ack,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle
);


input  [7:0] hw_input_V_value_V;
input  [0:0] hw_input_V_last_V;
output  [7:0] hw_output_V_value_V;
output  [0:0] hw_output_V_last_V;
input   ap_clk;
input   ap_rst;
input   hw_input_V_value_V_ap_vld;
output   hw_input_V_value_V_ap_ack;
input   hw_input_V_last_V_ap_vld;
output   hw_input_V_last_V_ap_ack;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;

wire    linebuffer_1_U0_ap_start;
wire    linebuffer_1_U0_start_full_n;
wire    linebuffer_1_U0_ap_ready;
wire    linebuffer_1_U0_start_out;
wire    linebuffer_1_U0_start_write;
wire   [71:0] linebuffer_1_U0_out_stream_V_value_V_din;
wire    linebuffer_1_U0_out_stream_V_value_V_write;
wire    linebuffer_1_U0_in_axi_stream_V_value_V_ap_ack;
wire    linebuffer_1_U0_in_axi_stream_V_last_V_ap_ack;
wire    linebuffer_1_U0_ap_done;
wire    linebuffer_1_U0_ap_idle;
wire    linebuffer_1_U0_ap_continue;
wire    Loop_1_proc_U0_ap_start;
wire    Loop_1_proc_U0_start_full_n;
wire    Loop_1_proc_U0_ap_ready;
wire    Loop_1_proc_U0_ap_done;
wire    Loop_1_proc_U0_ap_continue;
wire    Loop_1_proc_U0_ap_idle;
wire    Loop_1_proc_U0_start_out;
wire    Loop_1_proc_U0_start_write;
wire    Loop_1_proc_U0_p_hw_input_stencil_stream_V_value_V_read;
wire   [31:0] Loop_1_proc_U0_p_mul_stencil_update_stream_V_value_V_din;
wire    Loop_1_proc_U0_p_mul_stencil_update_stream_V_value_V_write;
wire    linebuffer_2_U0_ap_start;
wire    linebuffer_2_U0_start_full_n;
wire    linebuffer_2_U0_ap_ready;
wire    linebuffer_2_U0_start_out;
wire    linebuffer_2_U0_start_write;
wire    linebuffer_2_U0_in_stream_V_value_V_read;
wire   [127:0] linebuffer_2_U0_out_stream_V_value_V_din;
wire    linebuffer_2_U0_out_stream_V_value_V_write;
wire    linebuffer_2_U0_ap_done;
wire    linebuffer_2_U0_ap_idle;
wire    linebuffer_2_U0_ap_continue;
wire    Block_preheader39_p_U0_ap_start;
wire    Block_preheader39_p_U0_ap_done;
wire    Block_preheader39_p_U0_ap_continue;
wire    Block_preheader39_p_U0_ap_idle;
wire    Block_preheader39_p_U0_ap_ready;
wire    Block_preheader39_p_U0_p_mul_stencil_stream_V_value_V_read;
wire   [7:0] Block_preheader39_p_U0_hw_output_V_value_V;
wire    Block_preheader39_p_U0_hw_output_V_value_V_ap_vld;
wire   [0:0] Block_preheader39_p_U0_hw_output_V_last_V;
wire    Block_preheader39_p_U0_hw_output_V_last_V_ap_vld;
wire    ap_sync_continue;
wire    p_hw_input_stencil_st_full_n;
wire   [71:0] p_hw_input_stencil_st_dout;
wire    p_hw_input_stencil_st_empty_n;
wire    p_mul_stencil_update_1_full_n;
wire   [31:0] p_mul_stencil_update_1_dout;
wire    p_mul_stencil_update_1_empty_n;
wire    p_mul_stencil_stream_s_full_n;
wire   [127:0] p_mul_stencil_stream_s_dout;
wire    p_mul_stencil_stream_s_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_Loop_1_proc_U0_din;
wire    start_for_Loop_1_proc_U0_full_n;
wire   [0:0] start_for_Loop_1_proc_U0_dout;
wire    start_for_Loop_1_proc_U0_empty_n;
wire   [0:0] start_for_linebuffer_2_U0_din;
wire    start_for_linebuffer_2_U0_full_n;
wire   [0:0] start_for_linebuffer_2_U0_dout;
wire    start_for_linebuffer_2_U0_empty_n;
wire   [0:0] start_for_Block_preheader39_p_U0_din;
wire    start_for_Block_preheader39_p_U0_full_n;
wire   [0:0] start_for_Block_preheader39_p_U0_dout;
wire    start_for_Block_preheader39_p_U0_empty_n;
wire    Block_preheader39_p_U0_start_full_n;
wire    Block_preheader39_p_U0_start_write;

linebuffer_1 linebuffer_1_U0(
    .ap_start(linebuffer_1_U0_ap_start),
    .start_full_n(linebuffer_1_U0_start_full_n),
    .ap_ready(linebuffer_1_U0_ap_ready),
    .start_out(linebuffer_1_U0_start_out),
    .start_write(linebuffer_1_U0_start_write),
    .in_axi_stream_V_value_V(hw_input_V_value_V),
    .in_axi_stream_V_last_V(hw_input_V_last_V),
    .out_stream_V_value_V_din(linebuffer_1_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(p_hw_input_stencil_st_full_n),
    .out_stream_V_value_V_write(linebuffer_1_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_axi_stream_V_value_V_ap_vld(hw_input_V_value_V_ap_vld),
    .in_axi_stream_V_value_V_ap_ack(linebuffer_1_U0_in_axi_stream_V_value_V_ap_ack),
    .in_axi_stream_V_last_V_ap_vld(hw_input_V_last_V_ap_vld),
    .in_axi_stream_V_last_V_ap_ack(linebuffer_1_U0_in_axi_stream_V_last_V_ap_ack),
    .ap_done(linebuffer_1_U0_ap_done),
    .ap_idle(linebuffer_1_U0_ap_idle),
    .ap_continue(linebuffer_1_U0_ap_continue)
);

Loop_1_proc Loop_1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_1_proc_U0_ap_start),
    .start_full_n(Loop_1_proc_U0_start_full_n),
    .ap_ready(Loop_1_proc_U0_ap_ready),
    .ap_done(Loop_1_proc_U0_ap_done),
    .ap_continue(Loop_1_proc_U0_ap_continue),
    .ap_idle(Loop_1_proc_U0_ap_idle),
    .start_out(Loop_1_proc_U0_start_out),
    .start_write(Loop_1_proc_U0_start_write),
    .p_hw_input_stencil_stream_V_value_V_dout(p_hw_input_stencil_st_dout),
    .p_hw_input_stencil_stream_V_value_V_empty_n(p_hw_input_stencil_st_empty_n),
    .p_hw_input_stencil_stream_V_value_V_read(Loop_1_proc_U0_p_hw_input_stencil_stream_V_value_V_read),
    .p_mul_stencil_update_stream_V_value_V_din(Loop_1_proc_U0_p_mul_stencil_update_stream_V_value_V_din),
    .p_mul_stencil_update_stream_V_value_V_full_n(p_mul_stencil_update_1_full_n),
    .p_mul_stencil_update_stream_V_value_V_write(Loop_1_proc_U0_p_mul_stencil_update_stream_V_value_V_write)
);

linebuffer_2 linebuffer_2_U0(
    .ap_start(linebuffer_2_U0_ap_start),
    .start_full_n(linebuffer_2_U0_start_full_n),
    .ap_ready(linebuffer_2_U0_ap_ready),
    .start_out(linebuffer_2_U0_start_out),
    .start_write(linebuffer_2_U0_start_write),
    .in_stream_V_value_V_dout(p_mul_stencil_update_1_dout),
    .in_stream_V_value_V_empty_n(p_mul_stencil_update_1_empty_n),
    .in_stream_V_value_V_read(linebuffer_2_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(linebuffer_2_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(p_mul_stencil_stream_s_full_n),
    .out_stream_V_value_V_write(linebuffer_2_U0_out_stream_V_value_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(linebuffer_2_U0_ap_done),
    .ap_idle(linebuffer_2_U0_ap_idle),
    .ap_continue(linebuffer_2_U0_ap_continue)
);

Block_preheader39_p Block_preheader39_p_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_preheader39_p_U0_ap_start),
    .ap_done(Block_preheader39_p_U0_ap_done),
    .ap_continue(Block_preheader39_p_U0_ap_continue),
    .ap_idle(Block_preheader39_p_U0_ap_idle),
    .ap_ready(Block_preheader39_p_U0_ap_ready),
    .p_mul_stencil_stream_V_value_V_dout(p_mul_stencil_stream_s_dout),
    .p_mul_stencil_stream_V_value_V_empty_n(p_mul_stencil_stream_s_empty_n),
    .p_mul_stencil_stream_V_value_V_read(Block_preheader39_p_U0_p_mul_stencil_stream_V_value_V_read),
    .hw_output_V_value_V(Block_preheader39_p_U0_hw_output_V_value_V),
    .hw_output_V_value_V_ap_vld(Block_preheader39_p_U0_hw_output_V_value_V_ap_vld),
    .hw_output_V_value_V_ap_ack(hw_output_V_value_V_ap_ack),
    .hw_output_V_last_V(Block_preheader39_p_U0_hw_output_V_last_V),
    .hw_output_V_last_V_ap_vld(Block_preheader39_p_U0_hw_output_V_last_V_ap_vld),
    .hw_output_V_last_V_ap_ack(hw_output_V_last_V_ap_ack)
);

fifo_w72_d1_S p_hw_input_stencil_st_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(linebuffer_1_U0_out_stream_V_value_V_din),
    .if_full_n(p_hw_input_stencil_st_full_n),
    .if_write(linebuffer_1_U0_out_stream_V_value_V_write),
    .if_dout(p_hw_input_stencil_st_dout),
    .if_empty_n(p_hw_input_stencil_st_empty_n),
    .if_read(Loop_1_proc_U0_p_hw_input_stencil_stream_V_value_V_read)
);

fifo_w32_d1_S_x p_mul_stencil_update_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_1_proc_U0_p_mul_stencil_update_stream_V_value_V_din),
    .if_full_n(p_mul_stencil_update_1_full_n),
    .if_write(Loop_1_proc_U0_p_mul_stencil_update_stream_V_value_V_write),
    .if_dout(p_mul_stencil_update_1_dout),
    .if_empty_n(p_mul_stencil_update_1_empty_n),
    .if_read(linebuffer_2_U0_in_stream_V_value_V_read)
);

fifo_w128_d1_S p_mul_stencil_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(linebuffer_2_U0_out_stream_V_value_V_din),
    .if_full_n(p_mul_stencil_stream_s_full_n),
    .if_write(linebuffer_2_U0_out_stream_V_value_V_write),
    .if_dout(p_mul_stencil_stream_s_dout),
    .if_empty_n(p_mul_stencil_stream_s_empty_n),
    .if_read(Block_preheader39_p_U0_p_mul_stencil_stream_V_value_V_read)
);

start_for_Loop_1_fYi start_for_Loop_1_fYi_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Loop_1_proc_U0_din),
    .if_full_n(start_for_Loop_1_proc_U0_full_n),
    .if_write(linebuffer_1_U0_start_write),
    .if_dout(start_for_Loop_1_proc_U0_dout),
    .if_empty_n(start_for_Loop_1_proc_U0_empty_n),
    .if_read(Loop_1_proc_U0_ap_ready)
);

start_for_linebufg8j start_for_linebufg8j_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_linebuffer_2_U0_din),
    .if_full_n(start_for_linebuffer_2_U0_full_n),
    .if_write(Loop_1_proc_U0_start_write),
    .if_dout(start_for_linebuffer_2_U0_dout),
    .if_empty_n(start_for_linebuffer_2_U0_empty_n),
    .if_read(linebuffer_2_U0_ap_ready)
);

start_for_Block_phbi start_for_Block_phbi_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Block_preheader39_p_U0_din),
    .if_full_n(start_for_Block_preheader39_p_U0_full_n),
    .if_write(linebuffer_2_U0_start_write),
    .if_dout(start_for_Block_preheader39_p_U0_dout),
    .if_empty_n(start_for_Block_preheader39_p_U0_empty_n),
    .if_read(Block_preheader39_p_U0_ap_ready)
);

assign Block_preheader39_p_U0_ap_continue = 1'b1;

assign Block_preheader39_p_U0_ap_start = start_for_Block_preheader39_p_U0_empty_n;

assign Block_preheader39_p_U0_start_full_n = 1'b0;

assign Block_preheader39_p_U0_start_write = 1'b0;

assign Loop_1_proc_U0_ap_continue = 1'b1;

assign Loop_1_proc_U0_ap_start = start_for_Loop_1_proc_U0_empty_n;

assign Loop_1_proc_U0_start_full_n = (1'b0 | start_for_linebuffer_2_U0_full_n);

assign ap_done = Block_preheader39_p_U0_ap_done;

assign ap_idle = (linebuffer_1_U0_ap_idle & Loop_1_proc_U0_ap_idle & linebuffer_2_U0_ap_idle & Block_preheader39_p_U0_ap_idle);

assign ap_ready = linebuffer_1_U0_ap_ready;

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Block_preheader39_p_U0_ap_done;

assign ap_sync_ready = linebuffer_1_U0_ap_ready;

assign hw_input_V_last_V_ap_ack = linebuffer_1_U0_in_axi_stream_V_last_V_ap_ack;

assign hw_input_V_value_V_ap_ack = linebuffer_1_U0_in_axi_stream_V_value_V_ap_ack;

assign hw_output_V_last_V = Block_preheader39_p_U0_hw_output_V_last_V;

assign hw_output_V_last_V_ap_vld = Block_preheader39_p_U0_hw_output_V_last_V_ap_vld;

assign hw_output_V_value_V = Block_preheader39_p_U0_hw_output_V_value_V;

assign hw_output_V_value_V_ap_vld = Block_preheader39_p_U0_hw_output_V_value_V_ap_vld;

assign linebuffer_1_U0_ap_continue = 1'b1;

assign linebuffer_1_U0_ap_start = ap_start;

assign linebuffer_1_U0_start_full_n = (start_for_Loop_1_proc_U0_full_n | 1'b0);

assign linebuffer_2_U0_ap_continue = 1'b1;

assign linebuffer_2_U0_ap_start = start_for_linebuffer_2_U0_empty_n;

assign linebuffer_2_U0_start_full_n = (1'b0 | start_for_Block_preheader39_p_U0_full_n);

assign start_for_Block_preheader39_p_U0_din = 1'b1;

assign start_for_Loop_1_proc_U0_din = 1'b1;

assign start_for_linebuffer_2_U0_din = 1'b1;

endmodule //hls_target


// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module start_for_Loop_1_fYi_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module start_for_Loop_1_fYi (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

start_for_Loop_1_fYi_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_start_for_Loop_1_fYi_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module call_Loop_LB2D_bubkb_ram (addr0, ce0, q0, addr1, ce1, d1, we1,  clk);

parameter DWIDTH = 8;
parameter AWIDTH = 2;
parameter MEM_SIZE = 4;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) 
    begin
            q0 <= ram[addr0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) 
    begin
        if (we1) 
        begin 
            ram[addr1] <= d1; 
        end 
    end
end


endmodule


`timescale 1 ns / 1 ps
module call_Loop_LB2D_bubkb(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    we1,
    d1);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd4;
parameter AddressWidth = 32'd2;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;



call_Loop_LB2D_bubkb_ram call_Loop_LB2D_bubkb_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .d1( d1 ),
    .we1( we1 ));

endmodule



// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module fifo_w8_d1_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd8;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 32'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module fifo_w8_d1_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "auto";
parameter DATA_WIDTH  = 32'd8;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 32'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = {(ADDR_WIDTH+1){1'b1}};
reg internal_empty_n = 0, internal_full_n = 1;

assign if_empty_n = internal_empty_n;
assign if_full_n = internal_full_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 1;
            if (mOutPtr == 0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

fifo_w8_d1_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_fifo_w8_d1_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  



// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_Block_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [127:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_value_V_read;
reg out_stream_V_value_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_323;
reg    out_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] or_cond_i_i_i_i_reg_377;
reg   [2:0] indvar_flatten_reg_85;
reg   [1:0] idx_1_0_i_i_i_i_reg_96;
reg   [1:0] idx_0_0_i_i_i_i_reg_108;
wire   [0:0] exitcond_flatten_fu_119_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_323;
wire   [2:0] indvar_flatten_next_fu_125_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_1_fu_131_p2;
reg   [0:0] tmp_1_reg_332;
wire   [1:0] idx_0_0_i_i_i_i_mid2_fu_137_p3;
reg   [1:0] idx_0_0_i_i_i_i_mid2_reg_338;
wire   [0:0] tmp_5_fu_145_p1;
reg   [0:0] tmp_5_reg_343;
reg   [0:0] ap_reg_pp0_iter1_tmp_5_reg_343;
wire   [1:0] idx_0_fu_149_p2;
wire   [1:0] idx_1_0_i_i_i_i_t_mi_fu_180_p3;
reg   [1:0] idx_1_0_i_i_i_i_t_mi_reg_356;
wire   [0:0] tmp_fu_187_p1;
reg   [0:0] tmp_reg_361;
reg   [31:0] tmp_value_V_1_reg_369;
wire   [0:0] or_cond_i_i_i_i_fu_196_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] idx_1_0_i_i_i_i_phi_fu_100_p4;
reg    ap_block_pp0_stage0_flag00001001;
reg   [31:0] buffer_1_1_value_V_4_fu_56;
wire   [31:0] buffer_1_1_value_V_8_fu_259_p3;
reg   [31:0] buffer_1_1_value_V_9_fu_60;
wire   [31:0] buffer_1_1_value_V_7_fu_252_p3;
reg   [31:0] buffer_1_1_value_V_10_fu_64;
wire   [31:0] buffer_1_1_value_V_6_fu_245_p3;
reg   [31:0] buffer_1_1_value_V_11_fu_68;
wire   [31:0] buffer_1_1_value_V_5_fu_238_p3;
wire   [0:0] tmp_7_mid1_fu_155_p2;
wire   [0:0] tmp_4_fu_161_p2;
wire   [1:0] idx_s_fu_174_p2;
wire   [0:0] tmp_7_mid2_fu_167_p3;
wire   [0:0] tmp_s_fu_191_p2;
wire   [31:0] buffer_1_1_value_V_1_fu_214_p3;
wire   [31:0] buffer_1_1_value_V_2_fu_220_p3;
wire   [31:0] buffer_1_1_value_V_fu_226_p3;
wire   [31:0] buffer_1_1_value_V_3_fu_232_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_119_p2))) begin
        idx_0_0_i_i_i_i_reg_108 <= idx_0_fu_149_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        idx_0_0_i_i_i_i_reg_108 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_323))) begin
        idx_1_0_i_i_i_i_reg_96 <= idx_1_0_i_i_i_i_t_mi_reg_356;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        idx_1_0_i_i_i_i_reg_96 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_119_p2))) begin
        indvar_flatten_reg_85 <= indvar_flatten_next_fu_125_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_85 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_323 <= exitcond_flatten_reg_323;
        ap_reg_pp0_iter1_tmp_5_reg_343 <= tmp_5_reg_343;
        exitcond_flatten_reg_323 <= exitcond_flatten_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_323))) begin
        buffer_1_1_value_V_10_fu_64 <= buffer_1_1_value_V_6_fu_245_p3;
        buffer_1_1_value_V_11_fu_68 <= buffer_1_1_value_V_5_fu_238_p3;
        buffer_1_1_value_V_4_fu_56 <= buffer_1_1_value_V_8_fu_259_p3;
        buffer_1_1_value_V_9_fu_60 <= buffer_1_1_value_V_7_fu_252_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_119_p2))) begin
        idx_0_0_i_i_i_i_mid2_reg_338 <= idx_0_0_i_i_i_i_mid2_fu_137_p3;
        tmp_1_reg_332 <= tmp_1_fu_131_p2;
        tmp_5_reg_343 <= tmp_5_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        idx_1_0_i_i_i_i_t_mi_reg_356 <= idx_1_0_i_i_i_i_t_mi_fu_180_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_323 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        or_cond_i_i_i_i_reg_377 <= or_cond_i_i_i_i_fu_196_p2;
        tmp_reg_361 <= tmp_fu_187_p1;
        tmp_value_V_1_reg_369 <= in_stream_V_value_V_dout;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_119_p2)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_323))) begin
        idx_1_0_i_i_i_i_phi_fu_100_p4 = idx_1_0_i_i_i_i_t_mi_reg_356;
    end else begin
        idx_1_0_i_i_i_i_phi_fu_100_p4 = idx_1_0_i_i_i_i_reg_96;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_323 == 1'd0))) begin
        in_stream_V_value_V_blk_n = in_stream_V_value_V_empty_n;
    end else begin
        in_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_stream_V_value_V_read = 1'b1;
    end else begin
        in_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1))) begin
        out_stream_V_value_V_blk_n = out_stream_V_value_V_full_n;
    end else begin
        out_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_stream_V_value_V_write = 1'b1;
    end else begin
        out_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_119_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_119_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_1_1_value_V_1_fu_214_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? tmp_value_V_1_reg_369 : buffer_1_1_value_V_11_fu_68);

assign buffer_1_1_value_V_2_fu_220_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? buffer_1_1_value_V_10_fu_64 : tmp_value_V_1_reg_369);

assign buffer_1_1_value_V_3_fu_232_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? buffer_1_1_value_V_4_fu_56 : tmp_value_V_1_reg_369);

assign buffer_1_1_value_V_5_fu_238_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_1_fu_214_p3 : buffer_1_1_value_V_11_fu_68);

assign buffer_1_1_value_V_6_fu_245_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_2_fu_220_p3 : buffer_1_1_value_V_10_fu_64);

assign buffer_1_1_value_V_7_fu_252_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_9_fu_60 : buffer_1_1_value_V_fu_226_p3);

assign buffer_1_1_value_V_8_fu_259_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_4_fu_56 : buffer_1_1_value_V_3_fu_232_p3);

assign buffer_1_1_value_V_fu_226_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? tmp_value_V_1_reg_369 : buffer_1_1_value_V_9_fu_60);

assign exitcond_flatten_fu_119_p2 = ((indvar_flatten_reg_85 == 3'd4) ? 1'b1 : 1'b0);

assign idx_0_0_i_i_i_i_mid2_fu_137_p3 = ((tmp_1_fu_131_p2[0:0] === 1'b1) ? 2'd0 : idx_0_0_i_i_i_i_reg_108);

assign idx_0_fu_149_p2 = (idx_0_0_i_i_i_i_mid2_fu_137_p3 + 2'd1);

assign idx_1_0_i_i_i_i_t_mi_fu_180_p3 = ((tmp_1_reg_332[0:0] === 1'b1) ? idx_s_fu_174_p2 : idx_1_0_i_i_i_i_phi_fu_100_p4);

assign idx_s_fu_174_p2 = (2'd1 + idx_1_0_i_i_i_i_phi_fu_100_p4);

assign indvar_flatten_next_fu_125_p2 = (indvar_flatten_reg_85 + 3'd1);

assign or_cond_i_i_i_i_fu_196_p2 = (tmp_7_mid2_fu_167_p3 & tmp_s_fu_191_p2);

assign out_stream_V_value_V_din = {{{{buffer_1_1_value_V_5_fu_238_p3}, {buffer_1_1_value_V_6_fu_245_p3}}, {buffer_1_1_value_V_7_fu_252_p3}}, {buffer_1_1_value_V_8_fu_259_p3}};

assign tmp_1_fu_131_p2 = ((idx_0_0_i_i_i_i_reg_108 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_4_fu_161_p2 = ((idx_1_0_i_i_i_i_phi_fu_100_p4 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_5_fu_145_p1 = idx_0_0_i_i_i_i_mid2_fu_137_p3[0:0];

assign tmp_7_mid1_fu_155_p2 = ((idx_1_0_i_i_i_i_phi_fu_100_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_7_mid2_fu_167_p3 = ((tmp_1_reg_332[0:0] === 1'b1) ? tmp_7_mid1_fu_155_p2 : tmp_4_fu_161_p2);

assign tmp_fu_187_p1 = idx_1_0_i_i_i_i_t_mi_fu_180_p3[0:0];

assign tmp_s_fu_191_p2 = ((idx_0_0_i_i_i_i_mid2_reg_338 == 2'd1) ? 1'b1 : 1'b0);

endmodule //linebuffer_Block_pr


