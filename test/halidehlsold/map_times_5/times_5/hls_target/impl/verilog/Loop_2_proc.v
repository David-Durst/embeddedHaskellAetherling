// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_dout,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n,
        p_hw_input_stencil_stream_to_hw_output_V_value_V_read,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_dout,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n,
        p_hw_input_stencil_stream_to_hw_output_V_last_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] p_hw_input_stencil_stream_to_hw_output_V_value_V_dout;
input   p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n;
output   p_hw_input_stencil_stream_to_hw_output_V_value_V_read;
input  [0:0] p_hw_input_stencil_stream_to_hw_output_V_last_V_dout;
input   p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n;
output   p_hw_input_stencil_stream_to_hw_output_V_last_V_read;
output  [63:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_528;
reg    p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n;
reg    hw_output_V_value_V_blk_n;
reg    hw_output_V_last_V_blk_n;
reg   [7:0] indvar_flatten_reg_132;
reg   [5:0] p_hw_output_y_scan_1_reg_143;
reg   [2:0] p_hw_output_x_scan_2_reg_154;
wire   [0:0] exitcond_flatten_fu_165_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    p_hw_input_stencil_stream_to_hw_output_V_last_V0_status;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [7:0] indvar_flatten_next_fu_171_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] p_hw_output_y_scan_s_fu_217_p3;
wire   [0:0] tmp_last_V_fu_231_p2;
reg   [0:0] tmp_last_V_reg_542;
wire   [2:0] p_hw_output_x_scan_1_fu_237_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    p_hw_input_stencil_stream_to_hw_output_V_last_V0_update;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [0:0] exitcond7_fu_177_p2;
wire   [5:0] p_hw_output_y_scan_2_fu_191_p2;
wire   [0:0] tmp_2_mid1_fu_197_p2;
wire   [0:0] tmp_2_fu_203_p2;
wire   [2:0] p_hw_output_x_scan_s_fu_183_p3;
wire   [0:0] tmp_s_fu_225_p2;
wire   [0:0] tmp_2_mid2_fu_209_p3;
wire   [5:0] tmp_fu_321_p1;
wire   [7:0] p_258_fu_247_p1;
wire   [7:0] p_shl1_fu_325_p3;
wire   [5:0] tmp_3_fu_339_p4;
wire   [7:0] p_261_fu_251_p4;
wire   [7:0] p_shl2_fu_349_p3;
wire   [5:0] tmp_4_fu_363_p4;
wire   [7:0] p_264_fu_261_p4;
wire   [7:0] p_shl9_fu_373_p3;
wire   [5:0] tmp_5_fu_387_p4;
wire   [7:0] p_267_fu_271_p4;
wire   [7:0] p_shl8_fu_397_p3;
wire   [5:0] tmp_6_fu_411_p4;
wire   [7:0] p_270_fu_281_p4;
wire   [7:0] p_shl7_fu_421_p3;
wire   [5:0] tmp_7_fu_435_p4;
wire   [7:0] p_273_fu_291_p4;
wire   [7:0] p_shl6_fu_445_p3;
wire   [5:0] tmp_8_fu_459_p4;
wire   [7:0] p_276_fu_301_p4;
wire   [7:0] p_shl5_fu_469_p3;
wire   [5:0] tmp_9_fu_483_p4;
wire   [7:0] p_279_fu_311_p4;
wire   [7:0] p_shl_fu_493_p3;
wire   [7:0] p_281_fu_501_p2;
wire   [7:0] p_278_fu_477_p2;
wire   [7:0] p_275_fu_453_p2;
wire   [7:0] p_272_fu_429_p2;
wire   [7:0] p_269_fu_405_p2;
wire   [7:0] p_266_fu_381_p2;
wire   [7:0] p_263_fu_357_p2;
wire   [7:0] p_260_fu_333_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_408;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if ((ap_condition_408 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if ((ap_condition_408 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_165_p2))) begin
        indvar_flatten_reg_132 <= indvar_flatten_next_fu_171_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_132 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_165_p2))) begin
        p_hw_output_x_scan_2_reg_154 <= p_hw_output_x_scan_1_fu_237_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_154 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_165_p2))) begin
        p_hw_output_y_scan_1_reg_143 <= p_hw_output_y_scan_s_fu_217_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_143 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_528 <= exitcond_flatten_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_165_p2))) begin
        tmp_last_V_reg_542 <= tmp_last_V_fu_231_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_165_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_528 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_528 == 1'd0))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_528 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_528 == 1'd0))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_528 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V0_update = 1'b1;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_528 == 1'd0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n = p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_528 == 1'd0))) begin
        p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n = p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_to_hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_528 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_528 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status)) | (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_528 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status)) | (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((exitcond_flatten_reg_528 == 1'd0) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_528 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_to_hw_output_V_last_V0_status));
end

always @ (*) begin
    ap_condition_408 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_528 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond7_fu_177_p2 = ((p_hw_output_x_scan_2_reg_154 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_165_p2 = ((indvar_flatten_reg_132 == 8'd128) ? 1'b1 : 1'b0);

assign hw_output_V_last_V = tmp_last_V_reg_542;

assign hw_output_V_value_V = {{{{{{{{p_281_fu_501_p2}, {p_278_fu_477_p2}}, {p_275_fu_453_p2}}, {p_272_fu_429_p2}}, {p_269_fu_405_p2}}, {p_266_fu_381_p2}}, {p_263_fu_357_p2}}, {p_260_fu_333_p2}};

assign indvar_flatten_next_fu_171_p2 = (indvar_flatten_reg_132 + 8'd1);

assign p_258_fu_247_p1 = p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[7:0];

assign p_260_fu_333_p2 = (p_258_fu_247_p1 + p_shl1_fu_325_p3);

assign p_261_fu_251_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[15:8]}};

assign p_263_fu_357_p2 = (p_261_fu_251_p4 + p_shl2_fu_349_p3);

assign p_264_fu_261_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[23:16]}};

assign p_266_fu_381_p2 = (p_264_fu_261_p4 + p_shl9_fu_373_p3);

assign p_267_fu_271_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[31:24]}};

assign p_269_fu_405_p2 = (p_267_fu_271_p4 + p_shl8_fu_397_p3);

assign p_270_fu_281_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[39:32]}};

assign p_272_fu_429_p2 = (p_270_fu_281_p4 + p_shl7_fu_421_p3);

assign p_273_fu_291_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[47:40]}};

assign p_275_fu_453_p2 = (p_273_fu_291_p4 + p_shl6_fu_445_p3);

assign p_276_fu_301_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[55:48]}};

assign p_278_fu_477_p2 = (p_276_fu_301_p4 + p_shl5_fu_469_p3);

assign p_279_fu_311_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[63:56]}};

assign p_281_fu_501_p2 = (p_279_fu_311_p4 + p_shl_fu_493_p3);

assign p_hw_input_stencil_stream_to_hw_output_V_last_V0_status = (p_hw_input_stencil_stream_to_hw_output_V_value_V_empty_n & p_hw_input_stencil_stream_to_hw_output_V_last_V_empty_n);

assign p_hw_input_stencil_stream_to_hw_output_V_last_V_read = p_hw_input_stencil_stream_to_hw_output_V_last_V0_update;

assign p_hw_input_stencil_stream_to_hw_output_V_value_V_read = p_hw_input_stencil_stream_to_hw_output_V_last_V0_update;

assign p_hw_output_x_scan_1_fu_237_p2 = (3'd1 + p_hw_output_x_scan_s_fu_183_p3);

assign p_hw_output_x_scan_s_fu_183_p3 = ((exitcond7_fu_177_p2[0:0] === 1'b1) ? 3'd0 : p_hw_output_x_scan_2_reg_154);

assign p_hw_output_y_scan_2_fu_191_p2 = (6'd1 + p_hw_output_y_scan_1_reg_143);

assign p_hw_output_y_scan_s_fu_217_p3 = ((exitcond7_fu_177_p2[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_191_p2 : p_hw_output_y_scan_1_reg_143);

assign p_shl1_fu_325_p3 = {{tmp_fu_321_p1}, {2'd0}};

assign p_shl2_fu_349_p3 = {{tmp_3_fu_339_p4}, {2'd0}};

assign p_shl5_fu_469_p3 = {{tmp_8_fu_459_p4}, {2'd0}};

assign p_shl6_fu_445_p3 = {{tmp_7_fu_435_p4}, {2'd0}};

assign p_shl7_fu_421_p3 = {{tmp_6_fu_411_p4}, {2'd0}};

assign p_shl8_fu_397_p3 = {{tmp_5_fu_387_p4}, {2'd0}};

assign p_shl9_fu_373_p3 = {{tmp_4_fu_363_p4}, {2'd0}};

assign p_shl_fu_493_p3 = {{tmp_9_fu_483_p4}, {2'd0}};

assign tmp_2_fu_203_p2 = ((p_hw_output_y_scan_1_reg_143 == 6'd31) ? 1'b1 : 1'b0);

assign tmp_2_mid1_fu_197_p2 = ((p_hw_output_y_scan_2_fu_191_p2 == 6'd31) ? 1'b1 : 1'b0);

assign tmp_2_mid2_fu_209_p3 = ((exitcond7_fu_177_p2[0:0] === 1'b1) ? tmp_2_mid1_fu_197_p2 : tmp_2_fu_203_p2);

assign tmp_3_fu_339_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[13:8]}};

assign tmp_4_fu_363_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[21:16]}};

assign tmp_5_fu_387_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[29:24]}};

assign tmp_6_fu_411_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[37:32]}};

assign tmp_7_fu_435_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[45:40]}};

assign tmp_8_fu_459_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[53:48]}};

assign tmp_9_fu_483_p4 = {{p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[61:56]}};

assign tmp_fu_321_p1 = p_hw_input_stencil_stream_to_hw_output_V_value_V_dout[5:0];

assign tmp_last_V_fu_231_p2 = (tmp_s_fu_225_p2 & tmp_2_mid2_fu_209_p3);

assign tmp_s_fu_225_p2 = ((p_hw_output_x_scan_s_fu_183_p3 == 3'd3) ? 1'b1 : 1'b0);

endmodule //Loop_2_proc
