// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module call_Loop_LB2D_shift (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        slice_stream_V_value_V_dout,
        slice_stream_V_value_V_empty_n,
        slice_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [95:0] slice_stream_V_value_V_dout;
input   slice_stream_V_value_V_empty_n;
output   slice_stream_V_value_V_read;
output  [287:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg slice_stream_V_value_V_read;
reg out_stream_V_value_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    slice_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg    out_stream_V_value_V_blk_n;
reg   [0:0] icmp_reg_300;
reg   [10:0] i_0_i_i_reg_104;
wire   [0:0] tmp_5_fu_115_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] n1_1_fu_121_p2;
reg   [10:0] n1_1_reg_286;
wire   [0:0] tmp_7_fu_127_p2;
reg   [0:0] tmp_7_reg_291;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
wire   [10:0] i_fu_133_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_fu_149_p2;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [10:0] n1_reg_93;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00001001;
reg   [95:0] buffer_1_value_V_fu_72;
reg   [95:0] buffer_0_value_V_fu_76;
wire   [9:0] tmp_fu_139_p4;
wire   [31:0] p_Result_20_2_2_fu_223_p4;
wire   [31:0] p_Result_20_2_1_fu_213_p4;
wire   [31:0] p_Result_20_2_fu_203_p4;
wire   [31:0] p_Result_20_1_2_fu_193_p4;
wire   [31:0] p_Result_20_1_1_fu_183_p4;
wire   [31:0] p_Result_20_1_fu_173_p4;
wire   [31:0] tmp_4_fu_169_p1;
wire   [31:0] tmp_2_fu_165_p1;
wire   [31:0] tmp_1_fu_161_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_115_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_5_fu_115_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_5_fu_115_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_7_fu_127_p2))) begin
        i_0_i_i_reg_104 <= i_fu_133_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_5_fu_115_p2))) begin
        i_0_i_i_reg_104 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        n1_reg_93 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n1_reg_93 <= n1_1_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_7_reg_291))) begin
        buffer_0_value_V_fu_76 <= buffer_1_value_V_fu_72;
        buffer_1_value_V_fu_72 <= slice_stream_V_value_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_7_fu_127_p2))) begin
        icmp_reg_300 <= icmp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n1_1_reg_286 <= n1_1_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_7_reg_291 <= tmp_7_fu_127_p2;
    end
end

always @ (*) begin
    if ((tmp_7_fu_127_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_115_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_115_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (icmp_reg_300 == 1'd0))) begin
        out_stream_V_value_V_blk_n = out_stream_V_value_V_full_n;
    end else begin
        out_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (icmp_reg_300 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_stream_V_value_V_write = 1'b1;
    end else begin
        out_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        slice_stream_V_value_V_blk_n = slice_stream_V_value_V_empty_n;
    end else begin
        slice_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        slice_stream_V_value_V_read = 1'b1;
    end else begin
        slice_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_7_fu_127_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_7_fu_127_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == slice_stream_V_value_V_empty_n) | ((icmp_reg_300 == 1'd0) & (1'b0 == out_stream_V_value_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_133_p2 = (i_0_i_i_reg_104 + 11'd1);

assign icmp_fu_149_p2 = ((tmp_fu_139_p4 == 10'd0) ? 1'b1 : 1'b0);

assign n1_1_fu_121_p2 = (n1_reg_93 + 11'd1);

assign out_stream_V_value_V_din = {{{{{{{{{p_Result_20_2_2_fu_223_p4}, {p_Result_20_2_1_fu_213_p4}}, {p_Result_20_2_fu_203_p4}}, {p_Result_20_1_2_fu_193_p4}}, {p_Result_20_1_1_fu_183_p4}}, {p_Result_20_1_fu_173_p4}}, {tmp_4_fu_169_p1}}, {tmp_2_fu_165_p1}}, {tmp_1_fu_161_p1}};

assign p_Result_20_1_1_fu_183_p4 = {{buffer_1_value_V_fu_72[63:32]}};

assign p_Result_20_1_2_fu_193_p4 = {{slice_stream_V_value_V_dout[63:32]}};

assign p_Result_20_1_fu_173_p4 = {{buffer_0_value_V_fu_76[63:32]}};

assign p_Result_20_2_1_fu_213_p4 = {{buffer_1_value_V_fu_72[95:64]}};

assign p_Result_20_2_2_fu_223_p4 = {{slice_stream_V_value_V_dout[95:64]}};

assign p_Result_20_2_fu_203_p4 = {{buffer_0_value_V_fu_76[95:64]}};

assign tmp_1_fu_161_p1 = buffer_0_value_V_fu_76[31:0];

assign tmp_2_fu_165_p1 = buffer_1_value_V_fu_72[31:0];

assign tmp_4_fu_169_p1 = slice_stream_V_value_V_dout[31:0];

assign tmp_5_fu_115_p2 = ((n1_reg_93 == 11'd1078) ? 1'b1 : 1'b0);

assign tmp_7_fu_127_p2 = ((i_0_i_i_reg_104 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_fu_139_p4 = {{i_0_i_i_reg_104[10:1]}};

endmodule //call_Loop_LB2D_shift
