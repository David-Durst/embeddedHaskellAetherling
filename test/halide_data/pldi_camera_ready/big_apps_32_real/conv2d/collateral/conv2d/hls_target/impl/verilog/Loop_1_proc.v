// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state29 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [287:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [31:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_hw_input_stencil_stream_V_value_V_read;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_539;
reg    hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter26;
reg   [0:0] ap_reg_pp0_iter25_exitcond_flatten_reg_539;
reg    hw_output_V_last_V_blk_n;
reg   [20:0] indvar_flatten_reg_146;
reg   [10:0] p_hw_output_y_scan_1_reg_157;
reg   [10:0] p_hw_output_x_scan_2_reg_169;
wire   [0:0] exitcond_flatten_fu_191_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state28_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter12_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter13_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter14_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter15_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter16_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter17_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter18_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter19_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter20_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter21_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter22_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter23_exitcond_flatten_reg_539;
reg   [0:0] ap_reg_pp0_iter24_exitcond_flatten_reg_539;
wire   [20:0] indvar_flatten_next_fu_197_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_203_p2;
reg   [0:0] exitcond_reg_548;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_548;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_548;
wire   [10:0] p_hw_output_x_scan_s_fu_209_p3;
reg   [10:0] p_hw_output_x_scan_s_reg_554;
wire   [10:0] p_hw_output_x_scan_1_fu_217_p2;
wire   [10:0] p_hw_output_y_scan_2_fu_223_p2;
reg   [10:0] p_hw_output_y_scan_2_reg_564;
wire   [0:0] tmp8_fu_229_p2;
reg   [0:0] tmp8_reg_569;
reg   [0:0] ap_reg_pp0_iter2_tmp8_reg_569;
wire   [10:0] p_hw_output_y_scan_s_fu_235_p3;
reg   [10:0] p_hw_output_y_scan_s_reg_574;
wire   [31:0] p_345_fu_242_p1;
reg   [31:0] p_345_reg_579;
reg   [31:0] p_357_reg_584;
reg   [31:0] ap_reg_pp0_iter2_p_357_reg_584;
reg   [31:0] p_381_reg_589;
reg   [31:0] p_393_reg_594;
reg   [30:0] tmp_2_reg_599;
reg   [30:0] tmp_3_reg_604;
reg   [30:0] ap_reg_pp0_iter2_tmp_3_reg_604;
reg   [29:0] tmp_4_reg_609;
reg   [30:0] tmp_5_reg_614;
reg   [30:0] tmp_6_reg_619;
wire   [0:0] tmp_s_fu_326_p2;
reg   [0:0] tmp_s_reg_624;
reg   [0:0] ap_reg_pp0_iter2_tmp_s_reg_624;
wire   [0:0] tmp_mid1_fu_331_p2;
reg   [0:0] tmp_mid1_reg_629;
wire   [31:0] tmp2_fu_364_p2;
reg   [31:0] tmp2_reg_634;
wire   [31:0] tmp5_fu_369_p2;
reg   [31:0] tmp5_reg_639;
reg   [31:0] ap_reg_pp0_iter3_tmp5_reg_639;
wire   [31:0] tmp6_fu_380_p2;
reg   [31:0] tmp6_reg_644;
reg   [31:0] ap_reg_pp0_iter3_tmp6_reg_644;
wire   [31:0] tmp1_fu_402_p2;
reg   [31:0] tmp1_reg_649;
wire   [0:0] tmp_last_V_fu_407_p2;
reg   [0:0] tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter4_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter5_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter6_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter7_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter8_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter9_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter10_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter11_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter12_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter13_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter14_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter15_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter16_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter17_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter18_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter19_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter20_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter21_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter22_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter23_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter24_tmp_last_V_reg_654;
reg   [0:0] ap_reg_pp0_iter25_tmp_last_V_reg_654;
wire   [31:0] p_397_fu_416_p2;
reg   [31:0] p_397_reg_659;
wire   [31:0] grp_fu_180_p1;
reg   [31:0] p_399_reg_664;
wire   [63:0] grp_fu_183_p1;
reg   [63:0] p_400_reg_669;
reg   [10:0] loc_V_reg_674;
wire   [51:0] loc_V_1_fu_435_p1;
reg   [51:0] loc_V_1_reg_680;
reg   [51:0] ap_reg_pp0_iter25_loc_V_1_reg_680;
wire   [0:0] isNeg_fu_448_p3;
reg   [0:0] isNeg_reg_685;
wire   [11:0] sh_assign_1_fu_465_p3;
reg   [11:0] sh_assign_1_reg_690;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg   [10:0] p_hw_output_y_scan_1_phi_fu_161_p4;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [31:0] p_353_fu_336_p3;
wire   [31:0] p_377_fu_350_p3;
wire   [31:0] p_371_fu_343_p3;
wire   [31:0] p_389_fu_357_p3;
wire   [31:0] tmp7_fu_375_p2;
wire   [31:0] p_365_fu_390_p3;
wire   [31:0] tmp3_fu_397_p2;
wire   [0:0] tmp_mid2_fu_385_p3;
wire   [31:0] tmp4_fu_412_p2;
wire   [63:0] grp_fu_186_p2;
wire   [63:0] p_Val2_s_fu_421_p1;
wire   [11:0] tmp_i_i_cast_i_fu_439_p1;
wire   [11:0] sh_assign_fu_442_p2;
wire   [10:0] tmp_9_i_i_fu_456_p2;
wire  signed [11:0] tmp_9_i_cast_i_fu_461_p1;
wire   [53:0] tmp_i_i_fu_473_p4;
wire  signed [31:0] sh_assign_1_i_cast_i_fu_486_p1;
wire   [53:0] tmp_1_i_cast_i_fu_493_p1;
wire   [136:0] tmp_i_cast_i_fu_482_p1;
wire   [136:0] tmp_1_i_i_fu_489_p1;
wire   [53:0] tmp_2_i_i_fu_497_p2;
wire   [0:0] tmp_fu_509_p3;
wire   [136:0] tmp_3_i_i_fu_503_p2;
wire   [31:0] tmp_8_fu_517_p1;
wire   [31:0] tmp_9_fu_521_p4;
reg    grp_fu_180_ce;
reg    grp_fu_183_ce;
reg    grp_fu_186_ce;
wire    ap_CS_fsm_state29;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

hls_target_sitofpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hls_target_sitofpfYi_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_397_reg_659),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p1)
);

hls_target_fpext_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
hls_target_fpext_g8j_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_399_reg_664),
    .ce(grp_fu_183_ce),
    .dout(grp_fu_183_p1)
);

hls_target_dmul_6hbi #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hls_target_dmul_6hbi_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_400_reg_669),
    .din1(64'd4589168020290535424),
    .ce(grp_fu_186_ce),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter26) & (1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter26) & (1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_191_p2))) begin
        indvar_flatten_reg_146 <= indvar_flatten_next_fu_197_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_146 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_191_p2))) begin
        p_hw_output_x_scan_2_reg_169 <= p_hw_output_x_scan_1_fu_217_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_169 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_539) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_reg_157 <= p_hw_output_y_scan_s_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_157 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_539 <= ap_reg_pp0_iter9_exitcond_flatten_reg_539;
        ap_reg_pp0_iter10_tmp_last_V_reg_654 <= ap_reg_pp0_iter9_tmp_last_V_reg_654;
        ap_reg_pp0_iter11_exitcond_flatten_reg_539 <= ap_reg_pp0_iter10_exitcond_flatten_reg_539;
        ap_reg_pp0_iter11_tmp_last_V_reg_654 <= ap_reg_pp0_iter10_tmp_last_V_reg_654;
        ap_reg_pp0_iter12_exitcond_flatten_reg_539 <= ap_reg_pp0_iter11_exitcond_flatten_reg_539;
        ap_reg_pp0_iter12_tmp_last_V_reg_654 <= ap_reg_pp0_iter11_tmp_last_V_reg_654;
        ap_reg_pp0_iter13_exitcond_flatten_reg_539 <= ap_reg_pp0_iter12_exitcond_flatten_reg_539;
        ap_reg_pp0_iter13_tmp_last_V_reg_654 <= ap_reg_pp0_iter12_tmp_last_V_reg_654;
        ap_reg_pp0_iter14_exitcond_flatten_reg_539 <= ap_reg_pp0_iter13_exitcond_flatten_reg_539;
        ap_reg_pp0_iter14_tmp_last_V_reg_654 <= ap_reg_pp0_iter13_tmp_last_V_reg_654;
        ap_reg_pp0_iter15_exitcond_flatten_reg_539 <= ap_reg_pp0_iter14_exitcond_flatten_reg_539;
        ap_reg_pp0_iter15_tmp_last_V_reg_654 <= ap_reg_pp0_iter14_tmp_last_V_reg_654;
        ap_reg_pp0_iter16_exitcond_flatten_reg_539 <= ap_reg_pp0_iter15_exitcond_flatten_reg_539;
        ap_reg_pp0_iter16_tmp_last_V_reg_654 <= ap_reg_pp0_iter15_tmp_last_V_reg_654;
        ap_reg_pp0_iter17_exitcond_flatten_reg_539 <= ap_reg_pp0_iter16_exitcond_flatten_reg_539;
        ap_reg_pp0_iter17_tmp_last_V_reg_654 <= ap_reg_pp0_iter16_tmp_last_V_reg_654;
        ap_reg_pp0_iter18_exitcond_flatten_reg_539 <= ap_reg_pp0_iter17_exitcond_flatten_reg_539;
        ap_reg_pp0_iter18_tmp_last_V_reg_654 <= ap_reg_pp0_iter17_tmp_last_V_reg_654;
        ap_reg_pp0_iter19_exitcond_flatten_reg_539 <= ap_reg_pp0_iter18_exitcond_flatten_reg_539;
        ap_reg_pp0_iter19_tmp_last_V_reg_654 <= ap_reg_pp0_iter18_tmp_last_V_reg_654;
        ap_reg_pp0_iter20_exitcond_flatten_reg_539 <= ap_reg_pp0_iter19_exitcond_flatten_reg_539;
        ap_reg_pp0_iter20_tmp_last_V_reg_654 <= ap_reg_pp0_iter19_tmp_last_V_reg_654;
        ap_reg_pp0_iter21_exitcond_flatten_reg_539 <= ap_reg_pp0_iter20_exitcond_flatten_reg_539;
        ap_reg_pp0_iter21_tmp_last_V_reg_654 <= ap_reg_pp0_iter20_tmp_last_V_reg_654;
        ap_reg_pp0_iter22_exitcond_flatten_reg_539 <= ap_reg_pp0_iter21_exitcond_flatten_reg_539;
        ap_reg_pp0_iter22_tmp_last_V_reg_654 <= ap_reg_pp0_iter21_tmp_last_V_reg_654;
        ap_reg_pp0_iter23_exitcond_flatten_reg_539 <= ap_reg_pp0_iter22_exitcond_flatten_reg_539;
        ap_reg_pp0_iter23_tmp_last_V_reg_654 <= ap_reg_pp0_iter22_tmp_last_V_reg_654;
        ap_reg_pp0_iter24_exitcond_flatten_reg_539 <= ap_reg_pp0_iter23_exitcond_flatten_reg_539;
        ap_reg_pp0_iter24_tmp_last_V_reg_654 <= ap_reg_pp0_iter23_tmp_last_V_reg_654;
        ap_reg_pp0_iter25_exitcond_flatten_reg_539 <= ap_reg_pp0_iter24_exitcond_flatten_reg_539;
        ap_reg_pp0_iter25_loc_V_1_reg_680 <= loc_V_1_reg_680;
        ap_reg_pp0_iter25_tmp_last_V_reg_654 <= ap_reg_pp0_iter24_tmp_last_V_reg_654;
        ap_reg_pp0_iter2_exitcond_flatten_reg_539 <= ap_reg_pp0_iter1_exitcond_flatten_reg_539;
        ap_reg_pp0_iter2_exitcond_reg_548 <= ap_reg_pp0_iter1_exitcond_reg_548;
        ap_reg_pp0_iter2_p_357_reg_584 <= p_357_reg_584;
        ap_reg_pp0_iter2_tmp8_reg_569 <= tmp8_reg_569;
        ap_reg_pp0_iter2_tmp_3_reg_604 <= tmp_3_reg_604;
        ap_reg_pp0_iter2_tmp_s_reg_624 <= tmp_s_reg_624;
        ap_reg_pp0_iter3_exitcond_flatten_reg_539 <= ap_reg_pp0_iter2_exitcond_flatten_reg_539;
        ap_reg_pp0_iter3_tmp5_reg_639[31 : 1] <= tmp5_reg_639[31 : 1];
        ap_reg_pp0_iter3_tmp6_reg_644 <= tmp6_reg_644;
        ap_reg_pp0_iter4_exitcond_flatten_reg_539 <= ap_reg_pp0_iter3_exitcond_flatten_reg_539;
        ap_reg_pp0_iter4_tmp_last_V_reg_654 <= tmp_last_V_reg_654;
        ap_reg_pp0_iter5_exitcond_flatten_reg_539 <= ap_reg_pp0_iter4_exitcond_flatten_reg_539;
        ap_reg_pp0_iter5_tmp_last_V_reg_654 <= ap_reg_pp0_iter4_tmp_last_V_reg_654;
        ap_reg_pp0_iter6_exitcond_flatten_reg_539 <= ap_reg_pp0_iter5_exitcond_flatten_reg_539;
        ap_reg_pp0_iter6_tmp_last_V_reg_654 <= ap_reg_pp0_iter5_tmp_last_V_reg_654;
        ap_reg_pp0_iter7_exitcond_flatten_reg_539 <= ap_reg_pp0_iter6_exitcond_flatten_reg_539;
        ap_reg_pp0_iter7_tmp_last_V_reg_654 <= ap_reg_pp0_iter6_tmp_last_V_reg_654;
        ap_reg_pp0_iter8_exitcond_flatten_reg_539 <= ap_reg_pp0_iter7_exitcond_flatten_reg_539;
        ap_reg_pp0_iter8_tmp_last_V_reg_654 <= ap_reg_pp0_iter7_tmp_last_V_reg_654;
        ap_reg_pp0_iter9_exitcond_flatten_reg_539 <= ap_reg_pp0_iter8_exitcond_flatten_reg_539;
        ap_reg_pp0_iter9_tmp_last_V_reg_654 <= ap_reg_pp0_iter8_tmp_last_V_reg_654;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_539 <= exitcond_flatten_reg_539;
        ap_reg_pp0_iter1_exitcond_reg_548 <= exitcond_reg_548;
        exitcond_flatten_reg_539 <= exitcond_flatten_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_191_p2))) begin
        exitcond_reg_548 <= exitcond_fu_203_p2;
        p_hw_output_x_scan_s_reg_554 <= p_hw_output_x_scan_s_fu_209_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter24_exitcond_flatten_reg_539))) begin
        isNeg_reg_685 <= sh_assign_fu_442_p2[32'd11];
        sh_assign_1_reg_690 <= sh_assign_1_fu_465_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter23_exitcond_flatten_reg_539))) begin
        loc_V_1_reg_680 <= loc_V_1_fu_435_p1;
        loc_V_reg_674 <= {{p_Val2_s_fu_421_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_539 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_345_reg_579 <= p_345_fu_242_p1;
        p_357_reg_584 <= {{p_hw_input_stencil_stream_V_value_V_dout[95:64]}};
        p_381_reg_589 <= {{p_hw_input_stencil_stream_V_value_V_dout[223:192]}};
        p_393_reg_594 <= {{p_hw_input_stencil_stream_V_value_V_dout[287:256]}};
        p_hw_output_y_scan_2_reg_564 <= p_hw_output_y_scan_2_fu_223_p2;
        tmp_2_reg_599 <= {{p_hw_input_stencil_stream_V_value_V_dout[62:32]}};
        tmp_3_reg_604 <= {{p_hw_input_stencil_stream_V_value_V_dout[126:96]}};
        tmp_4_reg_609 <= {{p_hw_input_stencil_stream_V_value_V_dout[157:128]}};
        tmp_5_reg_614 <= {{p_hw_input_stencil_stream_V_value_V_dout[190:160]}};
        tmp_6_reg_619 <= {{p_hw_input_stencil_stream_V_value_V_dout[254:224]}};
        tmp_s_reg_624 <= tmp_s_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_539))) begin
        p_397_reg_659 <= p_397_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter11_exitcond_flatten_reg_539))) begin
        p_399_reg_664 <= grp_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter13_exitcond_flatten_reg_539))) begin
        p_400_reg_669 <= grp_fu_183_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_539 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_output_y_scan_s_reg_574 <= p_hw_output_y_scan_s_fu_235_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_539))) begin
        tmp1_reg_649 <= tmp1_fu_402_p2;
        tmp_last_V_reg_654 <= tmp_last_V_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_539))) begin
        tmp2_reg_634 <= tmp2_fu_364_p2;
        tmp5_reg_639[31 : 1] <= tmp5_fu_369_p2[31 : 1];
        tmp6_reg_644 <= tmp6_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_539 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_548))) begin
        tmp8_reg_569 <= tmp8_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_539) & (ap_reg_pp0_iter1_exitcond_reg_548 == 1'd1))) begin
        tmp_mid1_reg_629 <= tmp_mid1_fu_331_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_191_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter18) & (1'b0 == ap_enable_reg_pp0_iter19) & (1'b0 == ap_enable_reg_pp0_iter20) & (1'b0 == ap_enable_reg_pp0_iter21) & (1'b0 == ap_enable_reg_pp0_iter22) & (1'b0 == ap_enable_reg_pp0_iter23) & (1'b0 == ap_enable_reg_pp0_iter24) & (1'b0 == ap_enable_reg_pp0_iter25) & (1'b0 == ap_enable_reg_pp0_iter26))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_183_ce = 1'b1;
    end else begin
        grp_fu_183_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_186_ce = 1'b1;
    end else begin
        grp_fu_186_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter26) & (1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter26) & (1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter26) & (1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter26) & (1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_539 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_539 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_539) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        p_hw_output_y_scan_1_phi_fu_161_p4 = p_hw_output_y_scan_s_reg_574;
    end else begin
        p_hw_output_y_scan_1_phi_fu_161_p4 = p_hw_output_y_scan_1_reg_157;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter26) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_191_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter26) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_191_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_539 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_539 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter26) & (1'b1 == ap_block_state28_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_539 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter26) & (1'b1 == ap_block_state28_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((1'd0 == ap_reg_pp0_iter25_exitcond_flatten_reg_539) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_539 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_191_p2 = ((indvar_flatten_reg_146 == 21'd2067604) ? 1'b1 : 1'b0);

assign exitcond_fu_203_p2 = ((p_hw_output_x_scan_2_reg_169 == 11'd1918) ? 1'b1 : 1'b0);

assign hw_output_V_last_V = ap_reg_pp0_iter25_tmp_last_V_reg_654;

assign hw_output_V_value_V = ((isNeg_reg_685[0:0] === 1'b1) ? tmp_8_fu_517_p1 : tmp_9_fu_521_p4);

assign indvar_flatten_next_fu_197_p2 = (indvar_flatten_reg_146 + 21'd1);

assign isNeg_fu_448_p3 = sh_assign_fu_442_p2[32'd11];

assign loc_V_1_fu_435_p1 = p_Val2_s_fu_421_p1[51:0];

assign p_345_fu_242_p1 = p_hw_input_stencil_stream_V_value_V_dout[31:0];

assign p_353_fu_336_p3 = {{tmp_2_reg_599}, {1'd0}};

assign p_365_fu_390_p3 = {{ap_reg_pp0_iter2_tmp_3_reg_604}, {1'd0}};

assign p_371_fu_343_p3 = {{tmp_4_reg_609}, {2'd0}};

assign p_377_fu_350_p3 = {{tmp_5_reg_614}, {1'd0}};

assign p_389_fu_357_p3 = {{tmp_6_reg_619}, {1'd0}};

assign p_397_fu_416_p2 = (tmp1_reg_649 + tmp4_fu_412_p2);

assign p_Val2_s_fu_421_p1 = grp_fu_186_p2;

assign p_hw_output_x_scan_1_fu_217_p2 = (11'd1 + p_hw_output_x_scan_s_fu_209_p3);

assign p_hw_output_x_scan_s_fu_209_p3 = ((exitcond_fu_203_p2[0:0] === 1'b1) ? 11'd0 : p_hw_output_x_scan_2_reg_169);

assign p_hw_output_y_scan_2_fu_223_p2 = (11'd1 + p_hw_output_y_scan_1_phi_fu_161_p4);

assign p_hw_output_y_scan_s_fu_235_p3 = ((exitcond_reg_548[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_223_p2 : p_hw_output_y_scan_1_phi_fu_161_p4);

assign sh_assign_1_fu_465_p3 = ((isNeg_fu_448_p3[0:0] === 1'b1) ? tmp_9_i_cast_i_fu_461_p1 : sh_assign_fu_442_p2);

assign sh_assign_1_i_cast_i_fu_486_p1 = $signed(sh_assign_1_reg_690);

assign sh_assign_fu_442_p2 = ($signed(12'd3073) + $signed(tmp_i_i_cast_i_fu_439_p1));

assign tmp1_fu_402_p2 = (tmp2_reg_634 + tmp3_fu_397_p2);

assign tmp2_fu_364_p2 = (p_345_reg_579 + p_353_fu_336_p3);

assign tmp3_fu_397_p2 = (p_365_fu_390_p3 + ap_reg_pp0_iter2_p_357_reg_584);

assign tmp4_fu_412_p2 = (ap_reg_pp0_iter3_tmp5_reg_639 + ap_reg_pp0_iter3_tmp6_reg_644);

assign tmp5_fu_369_p2 = (p_377_fu_350_p3 + p_371_fu_343_p3);

assign tmp6_fu_380_p2 = (p_381_reg_589 + tmp7_fu_375_p2);

assign tmp7_fu_375_p2 = (p_393_reg_594 + p_389_fu_357_p3);

assign tmp8_fu_229_p2 = ((p_hw_output_y_scan_1_phi_fu_161_p4 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_1_i_cast_i_fu_493_p1 = $unsigned(sh_assign_1_i_cast_i_fu_486_p1);

assign tmp_1_i_i_fu_489_p1 = $unsigned(sh_assign_1_i_cast_i_fu_486_p1);

assign tmp_2_i_i_fu_497_p2 = tmp_i_i_fu_473_p4 >> tmp_1_i_cast_i_fu_493_p1;

assign tmp_3_i_i_fu_503_p2 = tmp_i_cast_i_fu_482_p1 << tmp_1_i_i_fu_489_p1;

assign tmp_8_fu_517_p1 = tmp_fu_509_p3;

assign tmp_9_fu_521_p4 = {{tmp_3_i_i_fu_503_p2[84:53]}};

assign tmp_9_i_cast_i_fu_461_p1 = $signed(tmp_9_i_i_fu_456_p2);

assign tmp_9_i_i_fu_456_p2 = (11'd1023 - loc_V_reg_674);

assign tmp_fu_509_p3 = tmp_2_i_i_fu_497_p2[32'd53];

assign tmp_i_cast_i_fu_482_p1 = tmp_i_i_fu_473_p4;

assign tmp_i_i_cast_i_fu_439_p1 = loc_V_reg_674;

assign tmp_i_i_fu_473_p4 = {{{{1'd1}, {ap_reg_pp0_iter25_loc_V_1_reg_680}}}, {1'd0}};

assign tmp_last_V_fu_407_p2 = (ap_reg_pp0_iter2_tmp_s_reg_624 & tmp_mid2_fu_385_p3);

assign tmp_mid1_fu_331_p2 = ((p_hw_output_y_scan_2_reg_564 == 11'd1077) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_385_p3 = ((ap_reg_pp0_iter2_exitcond_reg_548[0:0] === 1'b1) ? tmp_mid1_reg_629 : ap_reg_pp0_iter2_tmp8_reg_569);

assign tmp_s_fu_326_p2 = ((p_hw_output_x_scan_s_reg_554 == 11'd1917) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp5_reg_639[0] <= 1'b0;
    ap_reg_pp0_iter3_tmp5_reg_639[0] <= 1'b0;
end

endmodule //Loop_1_proc
