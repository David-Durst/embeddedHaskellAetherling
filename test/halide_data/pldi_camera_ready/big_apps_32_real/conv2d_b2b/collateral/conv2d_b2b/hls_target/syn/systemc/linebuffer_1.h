// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _linebuffer_1_HH_
#define _linebuffer_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "linebuffer_Loop_1_pr.h"
#include "linebuffer.h"
#include "fifo_w32_d1_S.h"
#include "start_for_linebufeOg.h"

namespace ap_rtl {

struct linebuffer_1 : public sc_module {
    // Port declarations 19
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > in_axi_stream_V_value_V;
    sc_in< sc_lv<1> > in_axi_stream_V_last_V;
    sc_out< sc_lv<288> > out_stream_V_value_V_din;
    sc_in< sc_logic > out_stream_V_value_V_full_n;
    sc_out< sc_logic > out_stream_V_value_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > in_axi_stream_V_value_V_ap_vld;
    sc_out< sc_logic > in_axi_stream_V_value_V_ap_ack;
    sc_in< sc_logic > in_axi_stream_V_last_V_ap_vld;
    sc_out< sc_logic > in_axi_stream_V_last_V_ap_ack;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    linebuffer_1(sc_module_name name);
    SC_HAS_PROCESS(linebuffer_1);

    ~linebuffer_1();

    sc_trace_file* mVcdFile;

    linebuffer_Loop_1_pr* linebuffer_Loop_1_pr_U0;
    linebuffer* linebuffer_U0;
    fifo_w32_d1_S* in_stream_V_value_V_U;
    start_for_linebufeOg* start_for_linebufeOg_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > real_start_status_reg;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > start_control_reg;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_ap_start;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_start_full_n;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_ap_ready;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_ap_done;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_ap_continue;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_ap_idle;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_start_out;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_start_write;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_in_axi_stream_V_value_V_ap_ack;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_in_axi_stream_V_last_V_ap_ack;
    sc_signal< sc_lv<32> > linebuffer_Loop_1_pr_U0_in_stream_V_value_V_din;
    sc_signal< sc_logic > linebuffer_Loop_1_pr_U0_in_stream_V_value_V_write;
    sc_signal< sc_logic > linebuffer_U0_in_stream_V_value_V_read;
    sc_signal< sc_lv<288> > linebuffer_U0_out_stream_V_value_V_din;
    sc_signal< sc_logic > linebuffer_U0_out_stream_V_value_V_write;
    sc_signal< sc_logic > linebuffer_U0_ap_done;
    sc_signal< sc_logic > linebuffer_U0_ap_start;
    sc_signal< sc_logic > linebuffer_U0_ap_ready;
    sc_signal< sc_logic > linebuffer_U0_ap_idle;
    sc_signal< sc_logic > linebuffer_U0_ap_continue;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > in_stream_V_value_V_full_n;
    sc_signal< sc_lv<32> > in_stream_V_value_V_dout;
    sc_signal< sc_logic > in_stream_V_value_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_linebuffer_U0_din;
    sc_signal< sc_logic > start_for_linebuffer_U0_full_n;
    sc_signal< sc_lv<1> > start_for_linebuffer_U0_dout;
    sc_signal< sc_logic > start_for_linebuffer_U0_empty_n;
    sc_signal< sc_logic > linebuffer_U0_start_full_n;
    sc_signal< sc_logic > linebuffer_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<288> ap_const_lv288_lc_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in_axi_stream_V_last_V_ap_ack();
    void thread_in_axi_stream_V_value_V_ap_ack();
    void thread_internal_ap_ready();
    void thread_linebuffer_Loop_1_pr_U0_ap_continue();
    void thread_linebuffer_Loop_1_pr_U0_ap_start();
    void thread_linebuffer_Loop_1_pr_U0_start_full_n();
    void thread_linebuffer_U0_ap_continue();
    void thread_linebuffer_U0_ap_start();
    void thread_linebuffer_U0_start_full_n();
    void thread_linebuffer_U0_start_write();
    void thread_out_stream_V_value_V_din();
    void thread_out_stream_V_value_V_write();
    void thread_real_start();
    void thread_start_for_linebuffer_U0_din();
    void thread_start_out();
    void thread_start_write();
};

}

using namespace ap_rtl;

#endif
