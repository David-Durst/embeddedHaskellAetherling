// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _call_1_HH_
#define _call_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "call_Loop_LB2D_buf_p_1.h"
#include "call_Loop_LB2D_shift_1.h"
#include "fifo_w64_d1_S.h"
#include "start_for_call_Log8j.h"

namespace ap_rtl {

struct call_1 : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<32> > in_stream_V_value_V_dout;
    sc_in< sc_logic > in_stream_V_value_V_empty_n;
    sc_out< sc_logic > in_stream_V_value_V_read;
    sc_out< sc_lv<128> > out_stream_V_value_V_din;
    sc_in< sc_logic > out_stream_V_value_V_full_n;
    sc_out< sc_logic > out_stream_V_value_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    call_1(sc_module_name name);
    SC_HAS_PROCESS(call_1);

    ~call_1();

    sc_trace_file* mVcdFile;

    call_Loop_LB2D_buf_p_1* call_Loop_LB2D_buf_p_1_U0;
    call_Loop_LB2D_shift_1* call_Loop_LB2D_shift_1_U0;
    fifo_w64_d1_S* slice_stream_V_value_U;
    start_for_call_Log8j* start_for_call_Log8j_U;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_ap_start;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_start_full_n;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_ap_ready;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_ap_done;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_ap_continue;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_ap_idle;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_start_out;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_start_write;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_in_stream_V_value_V_read;
    sc_signal< sc_lv<64> > call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_din;
    sc_signal< sc_logic > call_Loop_LB2D_buf_p_1_U0_slice_stream_V_value_V_write;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_ap_start;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_ap_done;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_ap_continue;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_ap_idle;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_ap_ready;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_slice_stream_V_value_V_read;
    sc_signal< sc_lv<128> > call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_din;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_out_stream_V_value_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > slice_stream_V_value_full_n;
    sc_signal< sc_lv<64> > slice_stream_V_value_dout;
    sc_signal< sc_logic > slice_stream_V_value_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_call_Loop_LB2D_shift_1_U0_din;
    sc_signal< sc_logic > start_for_call_Loop_LB2D_shift_1_U0_full_n;
    sc_signal< sc_lv<1> > start_for_call_Loop_LB2D_shift_1_U0_dout;
    sc_signal< sc_logic > start_for_call_Loop_LB2D_shift_1_U0_empty_n;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_start_full_n;
    sc_signal< sc_logic > call_Loop_LB2D_shift_1_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_call_Loop_LB2D_buf_p_1_U0_ap_continue();
    void thread_call_Loop_LB2D_buf_p_1_U0_ap_start();
    void thread_call_Loop_LB2D_buf_p_1_U0_start_full_n();
    void thread_call_Loop_LB2D_shift_1_U0_ap_continue();
    void thread_call_Loop_LB2D_shift_1_U0_ap_start();
    void thread_call_Loop_LB2D_shift_1_U0_start_full_n();
    void thread_call_Loop_LB2D_shift_1_U0_start_write();
    void thread_in_stream_V_value_V_read();
    void thread_out_stream_V_value_V_din();
    void thread_out_stream_V_value_V_write();
    void thread_start_for_call_Loop_LB2D_shift_1_U0_din();
};

}

using namespace ap_rtl;

#endif
